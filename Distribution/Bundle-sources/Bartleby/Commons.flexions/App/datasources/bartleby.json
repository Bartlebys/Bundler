{
    "bartleby-json-modeling": "1.0",
    "info": {
        "description": "This is Bartleby commons API",
        "version": "0.9.beta1",
        "title": "Bartleby",
        "license": {
            "name": "Proprietary",
            "url": "http://www.chaosmos.fr/license.html"
        }
    },
    "host": "pereira-da-silva.com/clients/lylo/",
    "basePath": "/api/v1",
    "tags": [],
    "schemes": [
        "https"
    ],
    "definitions": {
        "CollectionMetadatum": {
            "description": "Bartleby's Core: Collection Metadatum. Complete implementation in CollectionMetadatum",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "storage": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "CollectionMetadatum.Storage",
                            "description": "the used file storage",
                            "enum": [
                                "MonolithicFileStorage",
                                "SQLiteIncrementalStore"
                            ],
                            "default": ".MonolithicFileStorage",
                            "observable": false
                        },
                        "collectionName": {
                            "type": "string",
                            "description": "The holding collection name",
                            "default": "\\(Default.NO_NAME)",
                            "dynamic": false,
                            "observable": false
                        },
                        "proxy": {
                            "explicitType": "JObject",
                            "description": "The proxy object (not serializable, not observable)",
                            "dynamic": false,
                            "serializable": false,
                            "observable": false
                        },
                        "allowDistantPersistency": {
                            "type": "boolean",
                            "description": "Allow distant persistency?",
                            "default": "true",
                            "dynamic": false,
                            "observable": false
                        },
                        "inMemory": {
                            "type": "Boolean",
                            "description": "In Memory?",
                            "default": "true",
                            "dynamic": false,
                            "observable": false
                        },
                        "observableViaUID": {
                            "type": "string",
                            "description": "The observable UID",
                            "default": "\\(Default.NO_UID)",
                            "dynamic": true,
                            "observable": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "groupable": true
            }
        },
        "Task": {
            "description": "Bartleby's Commons A task (abstract)",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "group": {
                            "description": "The Task group. External reference to a TaskGroup instance",
                            "$ref": "#/definitions/ExternalReference",
                            "required": false,
                            "observable": false
                        },
                        "status": {
                            "type": "enum",
                            "instanceOf": "integer",
                            "emumPreciseType": "Task.Status",
                            "description": "Task Status",
                            "enum": [
                                "runnable",
                                "running",
                                "completed"
                            ],
                            "default": ".Runnable",
                            "observable": false
                        },
                        "parent": {
                            "description": "The Task parent. ",
                            "$ref": "#/definitions/ExternalReference",
                            "required": false,
                            "observable": false
                        },
                        "children": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "A collection of children Task external references (in the same group)",
                                    "$ref": "#/definitions/ExternalReference",
                                    "required": false,
                                    "default": "[ExternalReference]()",
                                    "dynamic": false,
                                    "observable": false
                                }
                            }
                        },
                        "progressionState": {
                            "schema": {
                                "description": "The progression state of the task",
                                "$ref": "#/definitions/Progression",
                                "observable": false
                            }
                        },
                        "completionState": {
                            "schema": {
                                "description": "The completion state of the task",
                                "$ref": "#/definitions/Completion",
                                "observable": false
                            }
                        },
                        "argumentsData": {
                            "type": "data",
                            "description": "The serialized arguments",
                            "observable": false,
                            "required": false,
                            "dynamic": false
                        },
                        "resultData": {
                            "type": "data",
                            "description": "The serialized result",
                            "required": false,
                            "dynamic": false,
                            "observable": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "persistsLocallyOnlyInMemory": false,
                "allowDistantPersistency": false,
                "undoable": false
            }
        },
        "TasksGroup": {
            "description": "Bartleby's TasksGroup its property are not autocommitted (not observable)",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "document": {
                            "explicitType": "BartlebyDocument",
                            "description": "A non serializable reference to the hosting document",
                            "dynamic": false,
                            "serializable": false,
                            "observable": false
                        },
                        "status": {
                            "type": "enum",
                            "instanceOf": "integer",
                            "emumPreciseType": "TasksGroup.Status",
                            "description": "TasksGroup Status",
                            "enum": [
                                "paused",
                                "running"
                            ],
                            "default": ".Paused",
                            "observable": false
                        },
                        "priority": {
                            "type": "enum",
                            "instanceOf": "integer",
                            "emumPreciseType": "TasksGroup.Priority",
                            "description": "The priority is equal to the parent task.",
                            "enum": [
                                "Background",
                                "Low",
                                "Default",
                                "High"
                            ],
                            "default": ".Default",
                            "observable": false
                        },
                        "spaceUID": {
                            "type": "string",
                            "description": "The group dataspace",
                            "required": true,
                            "default": "\\(Default.NO_UID)",
                            "dynamic": false,
                            "observable": false
                        },
                        "tasks": {
                            "type": "array",
                            "items": {
                                "description": "The root group Tasks (external references)",
                                "$ref": "#/definitions/ExternalReference",
                                "required": false,
                                "default": "[ExternalReference]()",
                                "observable": false,
                                "dynamic": false
                            }
                        },
                        "lastChainedTask": {
                            "description": "The last chained (sequential) task external reference. ",
                            "$ref": "#/definitions/ExternalReference",
                            "required": false,
                            "observable": false
                        },
                        "progressionState": {
                            "schema": {
                                "description": "The progression state of the group",
                                "$ref": "#/definitions/Progression",
                                "observable": false
                            }
                        },
                        "completionState": {
                            "schema": {
                                "description": "The completion state of the group",
                                "$ref": "#/definitions/Completion",
                                "observable": false
                            }
                        },
                        "name": {
                            "type": "string",
                            "description": "The group name",
                            "required": true,
                            "default": "\\(Default.NO_NAME)",
                            "dynamic": false,
                            "observable": false
                        },
                        "handlers": {
                            "explicitType": "Handlers",
                            "description": "A void handler to allow subscribers to register their own handlers",
                            "default": "Handlers.withoutCompletion()",
                            "dynamic": false,
                            "serializable": false,
                            "observable": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "persistsLocallyOnlyInMemory": false,
                "allowDistantPersistency": false,
                "undoable": false
            }
        },
        "Progression": {
            "description": "Bartleby's Commons: A progression state",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "currentTaskIndex": {
                            "type": "integer",
                            "description": "Index of the task",
                            "default": 0,
                            "required": true,
                            "dynamic": false
                        },
                        "totalTaskCount": {
                            "type": "integer",
                            "description": "Total number of tasks",
                            "default": 0,
                            "required": true,
                            "dynamic": false
                        },
                        "currentTaskProgress": {
                            "type": "double",
                            "description": "0 to 1",
                            "default": 0,
                            "required": true,
                            "dynamic": true
                        },
                        "message": {
                            "type": "string",
                            "description": "The Message",
                            "default": "",
                            "required": true,
                            "dynamic": true
                        },
                        "data": {
                            "type": "data",
                            "description": "The associated data",
                            "required": false,
                            "dynamic": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "Completion": {
            "description": "Bartleby's Commons: A completion state",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "success": {
                            "type": "boolean",
                            "description": "Success if set to true",
                            "default": "true",
                            "required": true,
                            "dynamic": false
                        },
                        "statusCode": {
                            "type": "integer",
                            "description": "The status",
                            "default": "CompletionStatus.Undefined.rawValue",
                            "required": true,
                            "dynamic": false
                        },
                        "message": {
                            "type": "string",
                            "description": "The Message",
                            "default": "",
                            "required": true,
                            "dynamic": false
                        },
                        "data": {
                            "type": "data",
                            "description": "completion data",
                            "required": false,
                            "dynamic": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "RegistryMetadata": {
            "description": "Bartleby's Core: Complete implementation in JRegistryMetadata. All its properties are not observable.",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "spaceUID": {
                            "type": "string",
                            "description": "The data space UID can be shared between multiple registries.",
                            "default": "\\(Default.NO_UID)",
                            "dynamic": true,
                            "observable": false
                        },
                        "currentUser": {
                            "schema": {
                                "description": "The user currently associated to the local instance of the registry",
                                "$ref": "#/definitions/User",
                                "observable": false,
                                "cryptable": false
                            }
                        },
                        "identificationMethod": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "RegistryMetadata.IdentificationMethod",
                            "description": "The identification method (By cookie or by Key - kvid)",
                            "enum": [
                                "Key",
                                "Cookie"
                            ],
                            "default": ".Key",
                            "observable": false
                        },
                        "identificationValue": {
                            "type": "string",
                            "description": "The current kvid identification value (injected in HTTP headers)",
                            "dynamic": false,
                            "observable": false
                        },
                        "rootObjectUID": {
                            "type": "string",
                            "description": "The rootObject UID",
                            "default": "\\(Default.NO_UID)",
                            "dynamic": true,
                            "observable": false
                        },
                        "collaborationServerURL": {
                            "type": "url",
                            "description": "The url of the collaboration server",
                            "dynamic": true,
                            "observable": false
                        },
                        "collectionsMetadata": {
                            "schema": {
                                "description": "The collection of CollectionMetadatum ",
                                "type": "array",
                                "items": {
                                    "description": "A collection of CollectionMetadatum",
                                    "explicitType": "CollectionMetadatum",
                                    "default": "[CollectionMetadatum]()",
                                    "dynamic": false,
                                    "observable": false
                                }
                            }
                        },
                        "online": {
                            "type": "boolean",
                            "description": "is the user performing Online",
                            "dynamic": true,
                            "default": "Bartleby.configuration.ONLINE_BY_DEFAULT",
                            "observable": false
                        },
                        "stateDictionary": {
                            "type": "dictionary",
                            "description": "The State dictionary to insure registry persistency ",
                            "default": "[String:AnyObject]()",
                            "dynamic": false,
                            "observable": false
                        },
                        "URLBookmarkData": {
                            "type": "dictionary",
                            "description": "The collection of serialized Security-Scoped Bookmarks (you should store NSData)",
                            "default": "[String:AnyObject]()",
                            "dynamic": false,
                            "observable": false
                        },
                        "saveThePassword": {
                            "type": "boolean",
                            "description": "Save the password or not?",
                            "default": "Bartleby.configuration.SAVE_PASSWORD_DEFAULT_VALUE",
                            "dynamic": true,
                            "observable": false
                        },
                        "assetsFolderURL": {
                            "type": "url",
                            "description": "The url of the assets folder",
                            "dynamic": false,
                            "observable": false
                        },
                        "triggersIndexes": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "A collection of trigger Indexes (used to detect data holes) the first entry should be equal to lastIntegratedTriggerIndex",
                                    "instanceOf": "integer",
                                    "default": "[Int]()",
                                    "dynamic": false,
                                    "observable": false
                                }
                            }
                        },
                        "ownedTriggersIndexes": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "The persistentcollection of triggers indexes owned by the current user (allows local distinctive analytics even on cloned documents)",
                                    "instanceOf": "integer",
                                    "default": "[Int]()",
                                    "dynamic": false,
                                    "observable": false
                                }
                            }
                        },
                        "missingTriggersIndexes": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "A collection of trigger Indexes that are missings (data holes)",
                                    "instanceOf": "integer",
                                    "default": "[Int]()",
                                    "dynamic": false,
                                    "observable": false
                                }
                            }
                        },
                        "lastIntegratedTriggerIndex": {
                            "type": "integer",
                            "description": "The index of the last trigger that has been integrated",
                            "default": -1,
                            "dynamic": false,
                            "observable": false
                        },
                        "receivedTriggers": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "A collection Triggers that are temporarly stored before integration",
                                    "$ref": "#/definitions/Trigger",
                                    "default": "[Trigger]()",
                                    "dynamic": false,
                                    "observable": false
                                }
                            }
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "User": {
            "description": "Bartleby's Core: a user in a specified data Space",
            "allOf": [
                {
                    "type": "object",
                    "required": [
                        "spaceUID",
                        "phoneNumber",
                        "password"
                    ],
                    "properties": {
                        "spaceUID": {
                            "type": "string",
                            "description": "The spaceUID. A user with the same credentials can exists within multiple Data space.",
                            "default": "\\(Bartleby.createUID())"
                        },
                        "verificationMethod": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "User.VerificationMethod",
                            "description": "the verification method",
                            "enum": [
                                "None",
                                "ByPhoneNumber",
                                "ByEmail"
                            ],
                            "default": ".ByPhoneNumber"
                        },
                        "firstname": {
                            "type": "string",
                            "default": "\\(Bartleby.randomStringWithLength(5))"
                        },
                        "lastname": {
                            "type": "string",
                            "default": "\\(Bartleby.randomStringWithLength(5))"
                        },
                        "email": {
                            "description": "The user's email. Can be the secondary Identification source ",
                            "type": "string"
                        },
                        "phoneNumber": {
                            "description": "The user's phone number. Can be the secondary Identification source ",
                            "type": "string"
                        },
                        "password": {
                            "description": "The hashed version of the user password",
                            "type": "string",
                            "default": "\\(Bartleby.randomStringWithLength(8,signs:Bartleby.configuration.PASSWORD_CHAR_CART))",
                            "cryptable": false
                        },
                        "activationCode": {
                            "description": "An activation code",
                            "type": "string",
                            "default": "\\(Bartleby.randomStringWithLength(8,signs:Bartleby.configuration.PASSWORD_CHAR_CART))"
                        },
                        "status": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "User.Status",
                            "description": "User Status",
                            "enum": [
                                "new",
                                "actived",
                                "suspended"
                            ],
                            "default": ".New"
                        },
                        "tags": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "The user Tags. External reference to Tags instances",
                                    "$ref": "#/definitions/ExternalReference",
                                    "required": true,
                                    "default": "[ExternalReference]()"
                                }
                            }
                        },
                        "groups": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "The user Groups. External reference to Group instances",
                                    "$ref": "#/definitions/ExternalReference",
                                    "required": true,
                                    "default": "[ExternalReference]()"
                                }
                            }
                        },
                        "notes": {
                            "type": "string",
                            "description": "Notes"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "groupable": false
            }
        },
        "Locker": {
            "description": "Bartleby's Core: a locker",
            "allOf": [
                {
                    "type": "object",
                    "required": [
                        "spaceUID",
                        "username",
                        "password"
                    ],
                    "properties": {
                        "spaceUID": {
                            "type": "string",
                            "description": "The spaceUID is the data space UID."
                        },
                        "subjectUID": {
                            "description": "The subject UID you want to lock",
                            "type": "string",
                            "default": "\\(Default.NO_UID)"
                        },
                        "userUID": {
                            "description": "The userUID that can unlock the locker",
                            "type": "string",
                            "default": "\\(Default.NO_UID)"
                        },
                        "mode": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "Locker.Mode",
                            "description": "the locker mode",
                            "enum": [
                                "AutoDestructive",
                                "Persistent"
                            ],
                            "default": ".AutoDestructive"
                        },
                        "verificationMethod": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "Locker.VerificationMethod",
                            "description": "the locker mode",
                            "enum": [
                                "Online",
                                "Offline"
                            ],
                            "default": ".Online"
                        },
                        "code": {
                            "description": "This code should be crypted / decrypted",
                            "type": "string",
                            "default": "\\(Bartleby.randomStringWithLength(6,signs:\"0123456789ABCDEFGHJKMNPQRZTUVW\"))"
                        },
                        "numberOfAttempt": {
                            "description": "The number of attempts",
                            "type": "integer",
                            "default": 3
                        },
                        "startDate": {
                            "type": "date",
                            "definition": "the starting date. If Locker.verifyed.online The server date will be used as reference",
                            "default": "NSDate.distantPast()"
                        },
                        "endDate": {
                            "type": "date",
                            "definition": "the ending date. If Locker.verifyed.online The server date will be used as reference",
                            "default": "NSDate.distantFuture()"
                        },
                        "cake": {
                            "description": "This cake will be return on success",
                            "type": "string",
                            "default": "\\(Default.NO_CAKE)"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "groupable": false
            }
        },
        "Group": {
            "description": "Bartleby's Core: a group of user",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "creationDate": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "color": {
                            "type": "string"
                        },
                        "icon": {
                            "type": "string"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "groupable": false
            }
        },
        "ExternalReference": {
            "description": "Bartleby's Core: an ExternalReference stores all the necessary data to find a unique resource.",
            "allOf": [
                {
                    "type": "object",
                    "required": [
                        "iUID"
                    ],
                    "properties": {
                        "iUID": {
                            "description": "The UID of the referred instance",
                            "type": "string",
                            "default": "\\(Default.NO_UID)"
                        },
                        "iTypeName": {
                            "description": "The typeName of the referred instance",
                            "type": "string",
                            "default": "\\(Default.NO_UID)"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "Operation": {
            "description": "Bartleby's Core: an object used to provision serialized operation. All its properties are not observable",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "toDictionary": {
                            "description": "The dictionary representation of a serialized action call",
                            "type": "dictionary",
                            "observable": false
                        },
                        "responseDictionary": {
                            "description": "The dictionary representation of the last response serialized data",
                            "type": "dictionary",
                            "observable": false
                        },
                        "baseUrl": {
                            "definition": "The base url is stored to support operations shifting (from a server to another, from clients, ...)",
                            "type": "url",
                            "observable": false
                        },
                        "status": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "Operation.Status",
                            "description": "The invocation Status",
                            "enum": [
                                "none",
                                "pending",
                                "inProgress",
                                "successful",
                                "unsucessful"
                            ],
                            "default": ".None",
                            "observable": false
                        },
                        "spaceUID": {
                            "type": "string",
                            "description": "The data space UID can be shared between multiple registries.",
                            "default": "\\(Default.NO_UID)",
                            "dynamic": true,
                            "observable": false
                        },
                        "counter": {
                            "description": "The invocation counter",
                            "type": "integer",
                            "observable": false
                        },
                        "creationDate": {
                            "description": "The creationdate",
                            "type": "date",
                            "observable": false
                        },
                        "lastInvocationDate": {
                            "description": "The last invocation date",
                            "type": "date",
                            "observable": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "persistsLocallyOnlyInMemory": false,
                "allowDistantPersistency": false,
                "undoable": false
            }
        },
        "Permission": {
            "description": "Bartleby's Core: a dynamic permission (Bartleby's base ACL is static)",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "callString": {
                            "type": "string",
                            "description": "The call string e.g : DeleteOperation->call",
                            "required": false,
                            "observable": true
                        },
                        "level": {
                            "type": "integer",
                            "description": "The level of the permission (check Bartleby's doc)",
                            "required": false,
                            "observable": true
                        },
                        "rule": {
                            "description": "The permission rule  (check Bartleby's doc)",
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "default": "[String]()"
                                }
                            },
                            "required": false,
                            "observable": true
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "persistsLocallyOnlyInMemory": false,
                "allowDistantPersistency": true,
                "undoable": false
            }
        },
        "Trigger": {
            "description": "Bartleby's Core: a Trigger encapsulates a bunch of ExternalReferencees that's modelizes a state transformation",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "index": {
                            "description": "The index is injected server side (each dataspace-registry) has it own counter)",
                            "type": "integer",
                            "format": "int64",
                            "observable": false,
                            "default": -1
                        },
                        "senderUID": {
                            "description": "The user.UID of the sender",
                            "type": "string",
                            "observable": false
                        },
                        "spaceUID": {
                            "description": "The dataSpace UID",
                            "type": "string",
                            "observable": false
                        },
                        "runUID": {
                            "description": "The UID of the instance of Bartleby client that has created the trigger.",
                            "type": "string",
                            "observable": false
                        },
                        "origin": {
                            "description": "The action that has initiated the trigger",
                            "type": "string",
                            "required": false,
                            "observable": false
                        },
                        "collectionName": {
                            "description": "The targetted collection name",
                            "type": "string",
                            "required": true,
                            "default": "",
                            "observable": false
                        },
                        "creationDate": {
                            "description": "The server side creation date ( informative, use index for ranking)",
                            "type": "date",
                            "required": false,
                            "observable": false
                        },
                        "action": {
                            "description": "The action name",
                            "type": "string",
                            "required": true,
                            "default": "",
                            "observable": false
                        },
                        "UIDS": {
                            "description": "A coma separated UIDS list",
                            "type": "string",
                            "required": true,
                            "default": "",
                            "observable": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "persistsLocallyOnlyInMemory": false,
                "allowDistantPersistency": false,
                "undoable": false,
                "groupable": false
            }
        },
        "Tag": {
            "description": "Bartleby's Core: a tag can be used to classify instances.",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "creationDate": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "color": {
                            "type": "string"
                        },
                        "icon": {
                            "type": "string"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "JString": {
            "description": "Bartleby's Core: String Primitive Wrapper. (Used for example to pass task Arguments)",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "string": {
                            "type": "string",
                            "description": "the embedded String"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "JData": {
            "description": "Bartleby's Core: Data Primitive Wrapper. (Used for example to pass task Arguments)",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "data": {
                            "type": "data",
                            "description": "the data"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        }
    },
    "paths": {
        "/collectionMetadatum/{collectionMetadatumId}": {
            "get": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Find CollectionMetadatum by ID",
                "description": "Returns a single CollectionMetadatum",
                "operationId": "readCollectionMetadatumById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "collectionMetadatumId",
                        "in": "path",
                        "description": "The unique identifier the the of CollectionMetadatum",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/CollectionMetadatum"
                        }
                    },
                    "404": {
                        "description": "CollectionMetadatum not found"
                    }
                }
            }
        },
        "/collectionMetadatum": {
            "post": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Creates a new CollectionMetadatum to the system",
                "description": "",
                "operationId": "createCollectionMetadatum",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "collectionMetadatum",
                        "description": "The instance ofCollectionMetadatum that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CollectionMetadatum"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Update an existing CollectionMetadatum",
                "description": "",
                "operationId": "updateCollectionMetadatum",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "collectionMetadatum",
                        "description": "The CollectionMetadatum instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CollectionMetadatum"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "CollectionMetadatum not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Deletes a CollectionMetadatum",
                "description": "",
                "operationId": "deleteCollectionMetadatum",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "collectionMetadatumId",
                        "in": "path",
                        "description": "The identifier of the CollectionMetadatum to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid CollectionMetadatum value"
                    }
                }
            }
        },
        "/collectionMetadata": {
            "post": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Create collectionMetadata to the system",
                "description": "",
                "operationId": "createCollectionMetadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "collectionMetadata",
                        "description": "Collection of CollectionMetadatum that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CollectionMetadatum"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Find collectionMetadata by ID",
                "description": "Returns a collection of CollectionMetadatum",
                "operationId": "readCollectionMetadataByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the collectionMetadata to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CollectionMetadatum"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "CollectionMetadata not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Update an existing CollectionMetadatum",
                "description": "",
                "operationId": "updateCollectionMetadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "collectionMetadata",
                        "description": "Collection of CollectionMetadatum to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CollectionMetadatum"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "CollectionMetadata not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Deletes some collectionMetadata",
                "description": "",
                "operationId": "deleteCollectionMetadata",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of collectionMetadata to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid collectionMetadata value"
                    }
                }
            }
        },
        "/collectionMetadataByQuery": {
            "get": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Find collectionMetadata by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of CollectionMetadatum",
                "operationId": "readCollectionMetadataByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CollectionMetadatum"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "CollectionMetadata not found"
                    }
                }
            }
        },
        "/task/{taskId}": {
            "get": {
                "tags": [
                    "tasks"
                ],
                "summary": "Find Task by ID",
                "description": "Returns a single Task",
                "operationId": "readTaskById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "description": "The unique identifier the the of Task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    },
                    "404": {
                        "description": "Task not found"
                    }
                }
            }
        },
        "/task": {
            "post": {
                "tags": [
                    "tasks"
                ],
                "summary": "Creates a new Task to the system",
                "description": "",
                "operationId": "createTask",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "task",
                        "description": "The instance ofTask that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "tasks"
                ],
                "summary": "Update an existing Task",
                "description": "",
                "operationId": "updateTask",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "task",
                        "description": "The Task instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Task not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tasks"
                ],
                "summary": "Deletes a Task",
                "description": "",
                "operationId": "deleteTask",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "description": "The identifier of the Task to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Task value"
                    }
                }
            }
        },
        "/tasks": {
            "post": {
                "tags": [
                    "tasks"
                ],
                "summary": "Create tasks to the system",
                "description": "",
                "operationId": "createTasks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "tasks",
                        "description": "Collection of Task that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Task"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "tasks"
                ],
                "summary": "Find tasks by ID",
                "description": "Returns a collection of Task",
                "operationId": "readTasksByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the tasks to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Task"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Tasks not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "tasks"
                ],
                "summary": "Update an existing Task",
                "description": "",
                "operationId": "updateTasks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "tasks",
                        "description": "Collection of Task to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Task"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Tasks not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tasks"
                ],
                "summary": "Deletes some tasks",
                "description": "",
                "operationId": "deleteTasks",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of tasks to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid tasks value"
                    }
                }
            }
        },
        "/tasksByQuery": {
            "get": {
                "tags": [
                    "tasks"
                ],
                "summary": "Find tasks by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Task",
                "operationId": "readTasksByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Task"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Tasks not found"
                    }
                }
            }
        },
        "/tasksGroup/{tasksGroupId}": {
            "get": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Find TasksGroup by ID",
                "description": "Returns a single TasksGroup",
                "operationId": "readTasksGroupById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tasksGroupId",
                        "in": "path",
                        "description": "The unique identifier the the of TasksGroup",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TasksGroup"
                        }
                    },
                    "404": {
                        "description": "TasksGroup not found"
                    }
                }
            }
        },
        "/tasksGroup": {
            "post": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Creates a new TasksGroup to the system",
                "description": "",
                "operationId": "createTasksGroup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "tasksGroup",
                        "description": "The instance ofTasksGroup that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TasksGroup"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Update an existing TasksGroup",
                "description": "",
                "operationId": "updateTasksGroup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "tasksGroup",
                        "description": "The TasksGroup instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TasksGroup"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "TasksGroup not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Deletes a TasksGroup",
                "description": "",
                "operationId": "deleteTasksGroup",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tasksGroupId",
                        "in": "path",
                        "description": "The identifier of the TasksGroup to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid TasksGroup value"
                    }
                }
            }
        },
        "/tasksGroups": {
            "post": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Create tasksGroups to the system",
                "description": "",
                "operationId": "createTasksGroups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "tasksGroups",
                        "description": "Collection of TasksGroup that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TasksGroup"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Find tasksGroups by ID",
                "description": "Returns a collection of TasksGroup",
                "operationId": "readTasksGroupsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the tasksGroups to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TasksGroup"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "TasksGroups not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Update an existing TasksGroup",
                "description": "",
                "operationId": "updateTasksGroups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "tasksGroups",
                        "description": "Collection of TasksGroup to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TasksGroup"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "TasksGroups not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Deletes some tasksGroups",
                "description": "",
                "operationId": "deleteTasksGroups",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of tasksGroups to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid tasksGroups value"
                    }
                }
            }
        },
        "/tasksGroupsByQuery": {
            "get": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Find tasksGroups by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of TasksGroup",
                "operationId": "readTasksGroupsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TasksGroup"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "TasksGroups not found"
                    }
                }
            }
        },
        "/progression/{progressionId}": {
            "get": {
                "tags": [
                    "progressions"
                ],
                "summary": "Find Progression by ID",
                "description": "Returns a single Progression",
                "operationId": "readProgressionById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "progressionId",
                        "in": "path",
                        "description": "The unique identifier the the of Progression",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Progression"
                        }
                    },
                    "404": {
                        "description": "Progression not found"
                    }
                }
            }
        },
        "/progression": {
            "post": {
                "tags": [
                    "progressions"
                ],
                "summary": "Creates a new Progression to the system",
                "description": "",
                "operationId": "createProgression",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "progression",
                        "description": "The instance ofProgression that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Progression"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "progressions"
                ],
                "summary": "Update an existing Progression",
                "description": "",
                "operationId": "updateProgression",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "progression",
                        "description": "The Progression instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Progression"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Progression not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "progressions"
                ],
                "summary": "Deletes a Progression",
                "description": "",
                "operationId": "deleteProgression",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "progressionId",
                        "in": "path",
                        "description": "The identifier of the Progression to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Progression value"
                    }
                }
            }
        },
        "/progressions": {
            "post": {
                "tags": [
                    "progressions"
                ],
                "summary": "Create progressions to the system",
                "description": "",
                "operationId": "createProgressions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "progressions",
                        "description": "Collection of Progression that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Progression"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "progressions"
                ],
                "summary": "Find progressions by ID",
                "description": "Returns a collection of Progression",
                "operationId": "readProgressionsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the progressions to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Progression"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Progressions not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "progressions"
                ],
                "summary": "Update an existing Progression",
                "description": "",
                "operationId": "updateProgressions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "progressions",
                        "description": "Collection of Progression to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Progression"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Progressions not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "progressions"
                ],
                "summary": "Deletes some progressions",
                "description": "",
                "operationId": "deleteProgressions",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of progressions to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid progressions value"
                    }
                }
            }
        },
        "/progressionsByQuery": {
            "get": {
                "tags": [
                    "progressions"
                ],
                "summary": "Find progressions by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Progression",
                "operationId": "readProgressionsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Progression"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Progressions not found"
                    }
                }
            }
        },
        "/completion/{completionId}": {
            "get": {
                "tags": [
                    "completions"
                ],
                "summary": "Find Completion by ID",
                "description": "Returns a single Completion",
                "operationId": "readCompletionById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "completionId",
                        "in": "path",
                        "description": "The unique identifier the the of Completion",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Completion"
                        }
                    },
                    "404": {
                        "description": "Completion not found"
                    }
                }
            }
        },
        "/completion": {
            "post": {
                "tags": [
                    "completions"
                ],
                "summary": "Creates a new Completion to the system",
                "description": "",
                "operationId": "createCompletion",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "completion",
                        "description": "The instance ofCompletion that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Completion"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "completions"
                ],
                "summary": "Update an existing Completion",
                "description": "",
                "operationId": "updateCompletion",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "completion",
                        "description": "The Completion instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Completion"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Completion not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "completions"
                ],
                "summary": "Deletes a Completion",
                "description": "",
                "operationId": "deleteCompletion",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "completionId",
                        "in": "path",
                        "description": "The identifier of the Completion to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Completion value"
                    }
                }
            }
        },
        "/completions": {
            "post": {
                "tags": [
                    "completions"
                ],
                "summary": "Create completions to the system",
                "description": "",
                "operationId": "createCompletions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "completions",
                        "description": "Collection of Completion that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Completion"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "completions"
                ],
                "summary": "Find completions by ID",
                "description": "Returns a collection of Completion",
                "operationId": "readCompletionsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the completions to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Completion"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Completions not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "completions"
                ],
                "summary": "Update an existing Completion",
                "description": "",
                "operationId": "updateCompletions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "completions",
                        "description": "Collection of Completion to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Completion"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Completions not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "completions"
                ],
                "summary": "Deletes some completions",
                "description": "",
                "operationId": "deleteCompletions",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of completions to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid completions value"
                    }
                }
            }
        },
        "/completionsByQuery": {
            "get": {
                "tags": [
                    "completions"
                ],
                "summary": "Find completions by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Completion",
                "operationId": "readCompletionsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Completion"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Completions not found"
                    }
                }
            }
        },
        "/registryMetadata/{registryMetadataId}": {
            "get": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Find RegistryMetadata by ID",
                "description": "Returns a single RegistryMetadata",
                "operationId": "readRegistryMetadataById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "registryMetadataId",
                        "in": "path",
                        "description": "The unique identifier the the of RegistryMetadata",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/RegistryMetadata"
                        }
                    },
                    "404": {
                        "description": "RegistryMetadata not found"
                    }
                }
            }
        },
        "/registryMetadata": {
            "post": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Creates a new RegistryMetadata to the system",
                "description": "",
                "operationId": "createRegistryMetadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "registryMetadata",
                        "description": "The instance ofRegistryMetadata that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RegistryMetadata"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Update an existing RegistryMetadata",
                "description": "",
                "operationId": "updateRegistryMetadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "registryMetadata",
                        "description": "The RegistryMetadata instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RegistryMetadata"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "RegistryMetadata not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Deletes a RegistryMetadata",
                "description": "",
                "operationId": "deleteRegistryMetadata",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "registryMetadataId",
                        "in": "path",
                        "description": "The identifier of the RegistryMetadata to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid RegistryMetadata value"
                    }
                }
            }
        },
        "/registryMetadatas": {
            "post": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Create registryMetadatas to the system",
                "description": "",
                "operationId": "createRegistryMetadatas",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "registryMetadatas",
                        "description": "Collection of RegistryMetadata that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RegistryMetadata"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Find registryMetadatas by ID",
                "description": "Returns a collection of RegistryMetadata",
                "operationId": "readRegistryMetadatasByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the registryMetadatas to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RegistryMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "RegistryMetadatas not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Update an existing RegistryMetadata",
                "description": "",
                "operationId": "updateRegistryMetadatas",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "registryMetadatas",
                        "description": "Collection of RegistryMetadata to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RegistryMetadata"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "RegistryMetadatas not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Deletes some registryMetadatas",
                "description": "",
                "operationId": "deleteRegistryMetadatas",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of registryMetadatas to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid registryMetadatas value"
                    }
                }
            }
        },
        "/registryMetadatasByQuery": {
            "get": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Find registryMetadatas by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of RegistryMetadata",
                "operationId": "readRegistryMetadatasByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RegistryMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "RegistryMetadatas not found"
                    }
                }
            }
        },
        "/user/{userId}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Find User by ID",
                "description": "Returns a single User",
                "operationId": "readUserById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The unique identifier the the of User",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/user": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Creates a new User to the system",
                "description": "",
                "operationId": "createUser",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "user",
                        "description": "The instance ofUser that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update an existing User",
                "description": "",
                "operationId": "updateUser",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "user",
                        "description": "The User instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Deletes a User",
                "description": "",
                "operationId": "deleteUser",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The identifier of the User to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid User value"
                    }
                }
            }
        },
        "/users": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Create users to the system",
                "description": "",
                "operationId": "createUsers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "users",
                        "description": "Collection of User that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Find users by ID",
                "description": "Returns a collection of User",
                "operationId": "readUsersByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the users to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Users not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update an existing User",
                "description": "",
                "operationId": "updateUsers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "users",
                        "description": "Collection of User to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Users not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Deletes some users",
                "description": "",
                "operationId": "deleteUsers",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of users to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid users value"
                    }
                }
            }
        },
        "/usersByQuery": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Find users by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of User",
                "operationId": "readUsersByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Users not found"
                    }
                }
            }
        },
        "/locker/{lockerId}": {
            "get": {
                "tags": [
                    "lockers"
                ],
                "summary": "Find Locker by ID",
                "description": "Returns a single Locker",
                "operationId": "readLockerById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "lockerId",
                        "in": "path",
                        "description": "The unique identifier the the of Locker",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Locker"
                        }
                    },
                    "404": {
                        "description": "Locker not found"
                    }
                }
            }
        },
        "/locker": {
            "post": {
                "tags": [
                    "lockers"
                ],
                "summary": "Creates a new Locker to the system",
                "description": "",
                "operationId": "createLocker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "locker",
                        "description": "The instance ofLocker that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Locker"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "lockers"
                ],
                "summary": "Update an existing Locker",
                "description": "",
                "operationId": "updateLocker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "locker",
                        "description": "The Locker instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Locker"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Locker not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "lockers"
                ],
                "summary": "Deletes a Locker",
                "description": "",
                "operationId": "deleteLocker",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "lockerId",
                        "in": "path",
                        "description": "The identifier of the Locker to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Locker value"
                    }
                }
            }
        },
        "/lockers": {
            "post": {
                "tags": [
                    "lockers"
                ],
                "summary": "Create lockers to the system",
                "description": "",
                "operationId": "createLockers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "lockers",
                        "description": "Collection of Locker that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Locker"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "lockers"
                ],
                "summary": "Find lockers by ID",
                "description": "Returns a collection of Locker",
                "operationId": "readLockersByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the lockers to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Locker"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Lockers not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "lockers"
                ],
                "summary": "Update an existing Locker",
                "description": "",
                "operationId": "updateLockers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "lockers",
                        "description": "Collection of Locker to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Locker"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Lockers not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "lockers"
                ],
                "summary": "Deletes some lockers",
                "description": "",
                "operationId": "deleteLockers",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of lockers to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid lockers value"
                    }
                }
            }
        },
        "/lockersByQuery": {
            "get": {
                "tags": [
                    "lockers"
                ],
                "summary": "Find lockers by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Locker",
                "operationId": "readLockersByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Locker"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Lockers not found"
                    }
                }
            }
        },
        "/group/{groupId}": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Find Group by ID",
                "description": "Returns a single Group",
                "operationId": "readGroupById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "The unique identifier the the of Group",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "404": {
                        "description": "Group not found"
                    }
                }
            }
        },
        "/group": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Creates a new Group to the system",
                "description": "",
                "operationId": "createGroup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "group",
                        "description": "The instance ofGroup that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "groups"
                ],
                "summary": "Update an existing Group",
                "description": "",
                "operationId": "updateGroup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "group",
                        "description": "The Group instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Group not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "groups"
                ],
                "summary": "Deletes a Group",
                "description": "",
                "operationId": "deleteGroup",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "The identifier of the Group to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Group value"
                    }
                }
            }
        },
        "/groups": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Create groups to the system",
                "description": "",
                "operationId": "createGroups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "groups",
                        "description": "Collection of Group that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Group"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Find groups by ID",
                "description": "Returns a collection of Group",
                "operationId": "readGroupsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the groups to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Group"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Groups not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "groups"
                ],
                "summary": "Update an existing Group",
                "description": "",
                "operationId": "updateGroups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "groups",
                        "description": "Collection of Group to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Group"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Groups not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "groups"
                ],
                "summary": "Deletes some groups",
                "description": "",
                "operationId": "deleteGroups",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of groups to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid groups value"
                    }
                }
            }
        },
        "/groupsByQuery": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Find groups by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Group",
                "operationId": "readGroupsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Group"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Groups not found"
                    }
                }
            }
        },
        "/operation/{operationId}": {
            "get": {
                "tags": [
                    "operations"
                ],
                "summary": "Find Operation by ID",
                "description": "Returns a single Operation",
                "operationId": "readOperationById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "operationId",
                        "in": "path",
                        "description": "The unique identifier the the of Operation",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Operation"
                        }
                    },
                    "404": {
                        "description": "Operation not found"
                    }
                }
            }
        },
        "/operation": {
            "post": {
                "tags": [
                    "operations"
                ],
                "summary": "Creates a new Operation to the system",
                "description": "",
                "operationId": "createOperation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "operation",
                        "description": "The instance ofOperation that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Operation"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "operations"
                ],
                "summary": "Update an existing Operation",
                "description": "",
                "operationId": "updateOperation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "operation",
                        "description": "The Operation instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Operation"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Operation not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "operations"
                ],
                "summary": "Deletes a Operation",
                "description": "",
                "operationId": "deleteOperation",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "operationId",
                        "in": "path",
                        "description": "The identifier of the Operation to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Operation value"
                    }
                }
            }
        },
        "/operations": {
            "post": {
                "tags": [
                    "operations"
                ],
                "summary": "Create operations to the system",
                "description": "",
                "operationId": "createOperations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "operations",
                        "description": "Collection of Operation that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Operation"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "operations"
                ],
                "summary": "Find operations by ID",
                "description": "Returns a collection of Operation",
                "operationId": "readOperationsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the operations to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Operation"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Operations not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "operations"
                ],
                "summary": "Update an existing Operation",
                "description": "",
                "operationId": "updateOperations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "operations",
                        "description": "Collection of Operation to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Operation"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Operations not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "operations"
                ],
                "summary": "Deletes some operations",
                "description": "",
                "operationId": "deleteOperations",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of operations to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid operations value"
                    }
                }
            }
        },
        "/operationsByQuery": {
            "get": {
                "tags": [
                    "operations"
                ],
                "summary": "Find operations by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Operation",
                "operationId": "readOperationsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Operation"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Operations not found"
                    }
                }
            }
        },
        "/permission/{permissionId}": {
            "get": {
                "tags": [
                    "permissions"
                ],
                "summary": "Find Permission by ID",
                "description": "Returns a single Permission",
                "operationId": "readPermissionById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "permissionId",
                        "in": "path",
                        "description": "The unique identifier the the of Permission",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    },
                    "404": {
                        "description": "Permission not found"
                    }
                }
            }
        },
        "/permission": {
            "post": {
                "tags": [
                    "permissions"
                ],
                "summary": "Creates a new Permission to the system",
                "description": "",
                "operationId": "createPermission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "permission",
                        "description": "The instance ofPermission that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "permissions"
                ],
                "summary": "Update an existing Permission",
                "description": "",
                "operationId": "updatePermission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "permission",
                        "description": "The Permission instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Permission not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "permissions"
                ],
                "summary": "Deletes a Permission",
                "description": "",
                "operationId": "deletePermission",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "permissionId",
                        "in": "path",
                        "description": "The identifier of the Permission to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Permission value"
                    }
                }
            }
        },
        "/permissions": {
            "post": {
                "tags": [
                    "permissions"
                ],
                "summary": "Create permissions to the system",
                "description": "",
                "operationId": "createPermissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "permissions",
                        "description": "Collection of Permission that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "permissions"
                ],
                "summary": "Find permissions by ID",
                "description": "Returns a collection of Permission",
                "operationId": "readPermissionsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the permissions to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Permissions not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "permissions"
                ],
                "summary": "Update an existing Permission",
                "description": "",
                "operationId": "updatePermissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "permissions",
                        "description": "Collection of Permission to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Permissions not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "permissions"
                ],
                "summary": "Deletes some permissions",
                "description": "",
                "operationId": "deletePermissions",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of permissions to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid permissions value"
                    }
                }
            }
        },
        "/permissionsByQuery": {
            "get": {
                "tags": [
                    "permissions"
                ],
                "summary": "Find permissions by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Permission",
                "operationId": "readPermissionsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Permissions not found"
                    }
                }
            }
        },
        "/trigger/{triggerId}": {
            "get": {
                "tags": [
                    "triggers"
                ],
                "summary": "Find Trigger by ID",
                "description": "Returns a single Trigger",
                "operationId": "readTriggerById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "triggerId",
                        "in": "path",
                        "description": "The unique identifier the the of Trigger",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Trigger"
                        }
                    },
                    "404": {
                        "description": "Trigger not found"
                    }
                }
            }
        },
        "/trigger": {
            "post": {
                "tags": [
                    "triggers"
                ],
                "summary": "Creates a new Trigger to the system",
                "description": "",
                "operationId": "createTrigger",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "trigger",
                        "description": "The instance ofTrigger that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Trigger"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "triggers"
                ],
                "summary": "Update an existing Trigger",
                "description": "",
                "operationId": "updateTrigger",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "trigger",
                        "description": "The Trigger instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Trigger"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Trigger not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "triggers"
                ],
                "summary": "Deletes a Trigger",
                "description": "",
                "operationId": "deleteTrigger",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "triggerId",
                        "in": "path",
                        "description": "The identifier of the Trigger to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Trigger value"
                    }
                }
            }
        },
        "/triggers": {
            "post": {
                "tags": [
                    "triggers"
                ],
                "summary": "Create triggers to the system",
                "description": "",
                "operationId": "createTriggers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "triggers",
                        "description": "Collection of Trigger that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Trigger"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "triggers"
                ],
                "summary": "Find triggers by ID",
                "description": "Returns a collection of Trigger",
                "operationId": "readTriggersByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the triggers to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Trigger"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Triggers not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "triggers"
                ],
                "summary": "Update an existing Trigger",
                "description": "",
                "operationId": "updateTriggers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "triggers",
                        "description": "Collection of Trigger to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Trigger"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Triggers not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "triggers"
                ],
                "summary": "Deletes some triggers",
                "description": "",
                "operationId": "deleteTriggers",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of triggers to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid triggers value"
                    }
                }
            }
        },
        "/triggersByQuery": {
            "get": {
                "tags": [
                    "triggers"
                ],
                "summary": "Find triggers by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Trigger",
                "operationId": "readTriggersByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Trigger"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Triggers not found"
                    }
                }
            }
        },
        "/jString/{jStringId}": {
            "get": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Find JString by ID",
                "description": "Returns a single JString",
                "operationId": "readJStringById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "jStringId",
                        "in": "path",
                        "description": "The unique identifier the the of JString",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/JString"
                        }
                    },
                    "404": {
                        "description": "JString not found"
                    }
                }
            }
        },
        "/jString": {
            "post": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Creates a new JString to the system",
                "description": "",
                "operationId": "createJString",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jString",
                        "description": "The instance ofJString that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/JString"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Update an existing JString",
                "description": "",
                "operationId": "updateJString",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jString",
                        "description": "The JString instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/JString"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "JString not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Deletes a JString",
                "description": "",
                "operationId": "deleteJString",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "jStringId",
                        "in": "path",
                        "description": "The identifier of the JString to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid JString value"
                    }
                }
            }
        },
        "/jStrings": {
            "post": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Create jStrings to the system",
                "description": "",
                "operationId": "createJStrings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jStrings",
                        "description": "Collection of JString that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JString"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Find jStrings by ID",
                "description": "Returns a collection of JString",
                "operationId": "readJStringsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the jStrings to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JString"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "JStrings not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Update an existing JString",
                "description": "",
                "operationId": "updateJStrings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jStrings",
                        "description": "Collection of JString to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JString"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "JStrings not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Deletes some jStrings",
                "description": "",
                "operationId": "deleteJStrings",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of jStrings to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid jStrings value"
                    }
                }
            }
        },
        "/jStringsByQuery": {
            "get": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Find jStrings by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of JString",
                "operationId": "readJStringsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JString"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "JStrings not found"
                    }
                }
            }
        },
        "/jData/{jDataId}": {
            "get": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Find JData by ID",
                "description": "Returns a single JData",
                "operationId": "readJDataById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "jDataId",
                        "in": "path",
                        "description": "The unique identifier the the of JData",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/JData"
                        }
                    },
                    "404": {
                        "description": "JData not found"
                    }
                }
            }
        },
        "/jData": {
            "post": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Creates a new JData to the system",
                "description": "",
                "operationId": "createJData",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jData",
                        "description": "The instance ofJData that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/JData"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Update an existing JData",
                "description": "",
                "operationId": "updateJData",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jData",
                        "description": "The JData instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/JData"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "JData not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Deletes a JData",
                "description": "",
                "operationId": "deleteJData",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "jDataId",
                        "in": "path",
                        "description": "The identifier of the JData to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid JData value"
                    }
                }
            }
        },
        "/jDatas": {
            "post": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Create jDatas to the system",
                "description": "",
                "operationId": "createJDatas",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jDatas",
                        "description": "Collection of JData that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JData"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Find jDatas by ID",
                "description": "Returns a collection of JData",
                "operationId": "readJDatasByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the jDatas to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JData"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "JDatas not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Update an existing JData",
                "description": "",
                "operationId": "updateJDatas",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jDatas",
                        "description": "Collection of JData to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JData"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "JDatas not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Deletes some jDatas",
                "description": "",
                "operationId": "deleteJDatas",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of jDatas to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid jDatas value"
                    }
                }
            }
        },
        "/jDatasByQuery": {
            "get": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Find jDatas by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of JData",
                "operationId": "readJDatasByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JData"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "JDatas not found"
                    }
                }
            }
        }
    },
    "securityDefinitions": [],
    "externalDocs": {
        "description": "Find out more about Bartleby",
        "url": "http://www.pereira-da-silva.com/projects/bartleby/"
    }
}