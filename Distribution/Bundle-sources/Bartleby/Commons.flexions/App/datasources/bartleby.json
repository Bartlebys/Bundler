{
    "bartleby-json-modeling": "1.0",
    "info": {
        "description": "This is Bartleby commons API",
        "version": "0.9.beta1",
        "title": "Bartleby",
        "license": {
            "name": "Proprietary",
            "url": "http://www.chaosmos.fr/license.html"
        }
    },
    "host": "pereira-da-silva.com/clients/lylo/",
    "basePath": "/api/v1",
    "tags": [],
    "schemes": [
        "https"
    ],
    "definitions": {
        "BaseObject": {
            "description": "Bartleby's Core: The base Object has been created to used by JObject has parent. Complete implementation in JObject",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "committed": {
                            "type": "boolean",
                            "description": "Collectible protocol: committed ",
                            "default": "false",
                            "dynamic": false
                        },
                        "distributed": {
                            "type": "boolean",
                            "description": "Collectible protocol: distributed ",
                            "default": "false",
                            "dynamic": false
                        },
                        "creatorUID": {
                            "type": "string",
                            "description": "Collectible protocol: The Creator UID",
                            "default": "\\(Default.NO_UID)",
                            "dynamic": false
                        },
                        "groupUID": {
                            "type": "string",
                            "description": "Collectible protocol: The Group UID",
                            "default": "\\(Default.NO_UID)",
                            "dynamic": false
                        },
                        "summary": {
                            "type": "string",
                            "description": "The class name of the reference",
                            "dynamic": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "BaseCollectionMetadatum": {
            "description": "Bartleby's Core: A collection Metadatum. Complete implementation in JCollectionMetadatum",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "storage": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "BaseCollectionMetadatum.Storage",
                            "description": "the used file storage",
                            "enum": [
                                "MonolithicFileStorage",
                                "SQLiteIncrementalStore"
                            ],
                            "default": ".MonolithicFileStorage"
                        },
                        "collectionName": {
                            "type": "string",
                            "description": "The holding collection name",
                            "default": "\\(Default.NO_NAME)",
                            "dynamic": false
                        },
                        "allowDistantPersistency": {
                            "type": "boolean",
                            "description": "Allow distant persistency?",
                            "default": "true",
                            "dynamic": false
                        },
                        "inMemory": {
                            "type": "Boolean",
                            "description": "In Memory?",
                            "default": "true",
                            "dynamic": false
                        },
                        "observableViaUID": {
                            "type": "string",
                            "description": "The observable UID",
                            "default": "\\(Default.NO_UID)",
                            "dynamic": true
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "BaseRegistryMetadata": {
            "description": "Bartleby's Core: Complete implementation in JRegistryMetadata",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "spaceUID": {
                            "type": "string",
                            "description": "The data space UID can be shared between multiple registries.",
                            "default": "\\(Default.NO_UID)",
                            "dynamic": true
                        },
                        "rootUser": {
                            "schema": {
                                "description": "The root user of the registry is the user currently associated to the local instance of the registry",
                                "$ref": "#/definitions/User"
                            }
                        },
                        "rootObjectUID": {
                            "type": "string",
                            "description": "The rootObject UID",
                            "default": "\\(Default.NO_UID)",
                            "dynamic": true
                        },
                        "collaborationServerURL": {
                            "type": "url",
                            "description": "The url of the collaboration server",
                            "dynamic": true
                        },
                        "collectionsMetadata": {
                            "schema": {
                                "description": "The collection of JCollectionMetadatum ",
                                "type": "array",
                                "items": {
                                    "description": "A collection of CollectionMetadatum",
                                    "explicitType": "JCollectionMetadatum",
                                    "default": "[JCollectionMetadatum]()"
                                },
                                "dynamic": false
                            }
                        },
                        "stateDictionary": {
                            "type": "dictionary",
                            "description": "The State dictionary to insure registry persistency ",
                            "default": "[String:AnyObject]()",
                            "dynamic": false
                        },
                        "URLBookmarkData": {
                            "type": "dictionary",
                            "description": "The collection of serialized Security-Scoped Bookmarks (you should store NSData)",
                            "default": "[String:AnyObject]()",
                            "dynamic": false
                        },
                        "saveThePassword": {
                            "type": "boolean",
                            "description": "Save the password or not?",
                            "default": "Bartleby.configuration.SAVE_PASSWORD_DEFAULT_VALUE",
                            "dynamic": true
                        },
                        "assetsFolderURL": {
                            "type": "url",
                            "description": "The url of the assets folder",
                            "dynamic": true
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "ObjectError": {
            "description": "Bartleby's Core: an Object Error",
            "allOf": [
                {
                    "type": "object",
                    "required": [
                        "message"
                    ],
                    "properties": {
                        "message": {
                            "type": "string",
                            "description": "The Error Message"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "User": {
            "description": "Bartleby's Core: a user in a specified data Space",
            "allOf": [
                {
                    "type": "object",
                    "required": [
                        "spaceUID",
                        "phoneNumber",
                        "password"
                    ],
                    "properties": {
                        "spaceUID": {
                            "type": "string",
                            "description": "The spaceUID. A user with the same credentials can exists within multiple Data space.",
                            "default": "\\(Bartleby.createUID())"
                        },
                        "verificationMethod": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "User.VerificationMethod",
                            "description": "the verification method",
                            "enum": [
                                "ByPhoneNumber",
                                "ByEmail"
                            ],
                            "default": ".ByPhoneNumber"
                        },
                        "firstname": {
                            "type": "string",
                            "default": "\\(Bartleby.randomStringWithLength(5))"
                        },
                        "lastname": {
                            "type": "string",
                            "default": "\\(Bartleby.randomStringWithLength(5))"
                        },
                        "email": {
                            "description": "The user's email. Can be the secondary Identification source ",
                            "type": "string"
                        },
                        "phoneNumber": {
                            "description": "The user's phone number. Can be the secondary Identification source ",
                            "type": "string"
                        },
                        "password": {
                            "description": "The hashed version of the user password",
                            "type": "string",
                            "default": "\\(Bartleby.randomStringWithLength(8,signs:Bartleby.configuration.PASSWORD_CHAR_CART))"
                        },
                        "activationCode": {
                            "description": "An activation code",
                            "type": "string",
                            "default": "\\(Bartleby.randomStringWithLength(8,signs:Bartleby.configuration.PASSWORD_CHAR_CART))"
                        },
                        "status": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "User.Status",
                            "description": "User Status",
                            "enum": [
                                "new",
                                "actived",
                                "suspended"
                            ],
                            "default": ".New"
                        },
                        "tags": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "The tags of the user",
                                    "$ref": "#/definitions/Alias",
                                    "default": "Bartleby.arrayOfAliases()"
                                }
                            }
                        },
                        "groups": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "The groups of the user",
                                    "$ref": "#/definitions/Alias",
                                    "default": "Bartleby.arrayOfAliases()"
                                }
                            }
                        },
                        "notes": {
                            "type": "string",
                            "description": "Notes"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "Locker": {
            "description": "Bartleby's Core: a locker",
            "allOf": [
                {
                    "type": "object",
                    "required": [
                        "spaceUID",
                        "username",
                        "password"
                    ],
                    "properties": {
                        "spaceUID": {
                            "type": "string",
                            "description": "The spaceUID is the data space UID."
                        },
                        "subjectUID": {
                            "description": "The subject UID you want to lock",
                            "type": "string",
                            "default": "\\(Default.NO_UID)"
                        },
                        "userUID": {
                            "description": "The userUID that can unlock the locker",
                            "type": "string",
                            "default": "\\(Default.NO_UID)"
                        },
                        "mode": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "Locker.Mode",
                            "description": "the locker mode",
                            "enum": [
                                "AutoDestructive",
                                "Persistent"
                            ],
                            "default": ".AutoDestructive"
                        },
                        "verificationMethod": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "Locker.VerificationMethod",
                            "description": "the locker mode",
                            "enum": [
                                "Online",
                                "Offline"
                            ],
                            "default": ".Online"
                        },
                        "code": {
                            "description": "This code should be crypted / decrypted",
                            "type": "string",
                            "default": "\\(Bartleby.randomStringWithLength(6,signs:\"0123456789ABCDEFGHJKMNPQRZTUVW\"))"
                        },
                        "numberOfAttempt": {
                            "description": "The number of attempts",
                            "type": "integer",
                            "default": 3
                        },
                        "startDate": {
                            "type": "date",
                            "definition": "the starting date. If Locker.verifyed.online The server date will be used as reference",
                            "default": "NSDate.distantPast()"
                        },
                        "endDate": {
                            "type": "date",
                            "definition": "the ending date. If Locker.verifyed.online The server date will be used as reference",
                            "default": "NSDate.distantFuture()"
                        },
                        "cake": {
                            "description": "This cake will be return on success",
                            "type": "string",
                            "default": "\\(Default.NO_CAKE)"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "Group": {
            "description": "Bartleby's Core: a group of user",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "creationDate": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "parentReference": {
                            "description": "The relative paths to its parent tag e.g : registryUID/collectionName/instanceUID",
                            "type": "string"
                        },
                        "childrensReferences": {
                            "schema": {
                                "description": "The relative references to its children",
                                "type": "array",
                                "items": {
                                    "description": "The relative paths to a children tag e.g : registryUID/collectionName/instanceUID",
                                    "type": "string"
                                }
                            }
                        },
                        "color": {
                            "type": "string"
                        },
                        "icon": {
                            "type": "string"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "Permission": {
            "description": "Bartleby's Core: a dynamic permission (Bartleby's base ACL is static)",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "callString": {
                            "type": "string",
                            "description": "The call string e.g : DeleteOperation->call",
                            "required": false
                        },
                        "level": {
                            "type": "integer",
                            "description": "The level of the permission (check Bartleby's doc)",
                            "required": false
                        },
                        "rule": {
                            "description": "The permission rule  (check Bartleby's doc)",
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "required": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "Alias": {
            "description": "Bartleby's Core: an alias stores all the necessary data to find a unique resource and optionally a labels. You can use an alias embedded or use it as an external reference.",
            "allOf": [
                {
                    "type": "object",
                    "required": [
                        "iUID"
                    ],
                    "properties": {
                        "iUID": {
                            "description": "The UID of the instance",
                            "type": "string"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "Operation": {
            "description": "Bartleby's Core: an object used to provision serialized operation.",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "data": {
                            "definition": "The dictionary representation of a serialized action call",
                            "type": "dictionary"
                        },
                        "responseData": {
                            "definition": "The dictionary representation of the last response serialized data",
                            "type": "dictionary"
                        },
                        "baseUrl": {
                            "definition": "The base url is stored to support operations shifting (from a server to another, from clients, ...)",
                            "type": "url"
                        },
                        "status": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "Operation.Status",
                            "description": "The invocation Status",
                            "enum": [
                                "none",
                                "pending",
                                "inProgress",
                                "successful",
                                "unsucessful"
                            ],
                            "default": ".None"
                        },
                        "counter": {
                            "description": "The invocation counter",
                            "type": "integer"
                        },
                        "creationDate": {
                            "description": "The creationdate",
                            "type": "date"
                        },
                        "lastInvocationDate": {
                            "description": "The last invocation date",
                            "type": "date"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "persistsLocallyOnlyInMemory": false,
                "allowDistantPersistency": false,
                "undoable": false
            }
        },
        "Trigger": {
            "description": "Bartleby's Core: a Trigger encapsulates a bunch of aliases that's modelizes a state transformation",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "associatedMessage": {
                            "description": "A message that can be injected for monitoring or external observation",
                            "type": "string"
                        },
                        "index": {
                            "description": "The index is injected server side.",
                            "type": "integer",
                            "format": "int64"
                        },
                        "observableUID": {
                            "description": "A UID characterizing the observable",
                            "type": "string"
                        },
                        "created": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "The alias to the created entities",
                                    "$ref": "#/definitions/Alias",
                                    "default": "Bartleby.arrayOfAliases()"
                                }
                            }
                        },
                        "updated": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "The alias to the updated entities",
                                    "$ref": "#/definitions/Alias",
                                    "default": "Bartleby.arrayOfAliases()"
                                }
                            }
                        },
                        "deleted": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "The alias to the deleted entities",
                                    "$ref": "#/definitions/Alias",
                                    "default": "Bartleby.arrayOfAliases()"
                                }
                            }
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "Tag": {
            "description": "Bartleby's Core: a tag can be used to classify instances.",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "creationDate": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "parentReference": {
                            "description": "The relative paths to its parent tag e.g : registryUID/collectionName/instanceUID",
                            "type": "string"
                        },
                        "childrensReferences": {
                            "schema": {
                                "description": "The relative references to its children",
                                "type": "array",
                                "items": {
                                    "description": "The relative paths to a children tag e.g : registryUID/collectionName/instanceUID",
                                    "type": "string"
                                }
                            }
                        },
                        "color": {
                            "type": "string"
                        },
                        "icon": {
                            "type": "string"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        }
    },
    "paths": {
        "/user/{userId}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Find User by ID",
                "description": "Returns a single User",
                "operationId": "readUserById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The unique identifier the the of User",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/user": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Creates a new User to the system",
                "description": "",
                "operationId": "createUser",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "user",
                        "description": "The instance ofUser that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update an existing User",
                "description": "",
                "operationId": "updateUser",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "user",
                        "description": "The User instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Deletes a User",
                "description": "",
                "operationId": "deleteUser",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The identifier of the User to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid User value"
                    }
                }
            }
        },
        "/users": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Create users to the system",
                "description": "",
                "operationId": "createUsers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "users",
                        "description": "Collection of User that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Find users by ID",
                "description": "Returns a collection of User",
                "operationId": "readUsersByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the users to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Users not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update an existing User",
                "description": "",
                "operationId": "updateUsers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "users",
                        "description": "Collection of User to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Users not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Deletes some users",
                "description": "",
                "operationId": "deleteUsers",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of users to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid users value"
                    }
                }
            }
        },
        "/usersByQuery": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Find users by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of User",
                "operationId": "readUsersByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Users not found"
                    }
                }
            }
        },
        "/group/{groupId}": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Find Group by ID",
                "description": "Returns a single Group",
                "operationId": "readGroupById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "The unique identifier the the of Group",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "404": {
                        "description": "Group not found"
                    }
                }
            }
        },
        "/group": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Creates a new Group to the system",
                "description": "",
                "operationId": "createGroup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "group",
                        "description": "The instance ofGroup that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "groups"
                ],
                "summary": "Update an existing Group",
                "description": "",
                "operationId": "updateGroup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "group",
                        "description": "The Group instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Group not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "groups"
                ],
                "summary": "Deletes a Group",
                "description": "",
                "operationId": "deleteGroup",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "The identifier of the Group to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Group value"
                    }
                }
            }
        },
        "/groups": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Create groups to the system",
                "description": "",
                "operationId": "createGroups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "groups",
                        "description": "Collection of Group that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Group"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Find groups by ID",
                "description": "Returns a collection of Group",
                "operationId": "readGroupsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the groups to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Group"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Groups not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "groups"
                ],
                "summary": "Update an existing Group",
                "description": "",
                "operationId": "updateGroups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "groups",
                        "description": "Collection of Group to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Group"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Groups not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "groups"
                ],
                "summary": "Deletes some groups",
                "description": "",
                "operationId": "deleteGroups",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of groups to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid groups value"
                    }
                }
            }
        },
        "/groupsByQuery": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Find groups by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Group",
                "operationId": "readGroupsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Group"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Groups not found"
                    }
                }
            }
        },
        "/permission/{permissionId}": {
            "get": {
                "tags": [
                    "permissions"
                ],
                "summary": "Find Permission by ID",
                "description": "Returns a single Permission",
                "operationId": "readPermissionById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "permissionId",
                        "in": "path",
                        "description": "The unique identifier the the of Permission",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    },
                    "404": {
                        "description": "Permission not found"
                    }
                }
            }
        },
        "/permission": {
            "post": {
                "tags": [
                    "permissions"
                ],
                "summary": "Creates a new Permission to the system",
                "description": "",
                "operationId": "createPermission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "permission",
                        "description": "The instance ofPermission that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "permissions"
                ],
                "summary": "Update an existing Permission",
                "description": "",
                "operationId": "updatePermission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "permission",
                        "description": "The Permission instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Permission not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "permissions"
                ],
                "summary": "Deletes a Permission",
                "description": "",
                "operationId": "deletePermission",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "permissionId",
                        "in": "path",
                        "description": "The identifier of the Permission to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Permission value"
                    }
                }
            }
        },
        "/permissions": {
            "post": {
                "tags": [
                    "permissions"
                ],
                "summary": "Create permissions to the system",
                "description": "",
                "operationId": "createPermissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "permissions",
                        "description": "Collection of Permission that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "permissions"
                ],
                "summary": "Find permissions by ID",
                "description": "Returns a collection of Permission",
                "operationId": "readPermissionsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the permissions to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Permissions not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "permissions"
                ],
                "summary": "Update an existing Permission",
                "description": "",
                "operationId": "updatePermissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "permissions",
                        "description": "Collection of Permission to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Permissions not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "permissions"
                ],
                "summary": "Deletes some permissions",
                "description": "",
                "operationId": "deletePermissions",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of permissions to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid permissions value"
                    }
                }
            }
        },
        "/permissionsByQuery": {
            "post": {
                "tags": [
                    "permissions"
                ],
                "summary": "Find permissions by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Permission",
                "operationId": "readPermissionsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Permissions not found"
                    }
                }
            }
        },
        "/alias/{aliasId}": {
            "get": {
                "tags": [
                    "aliases"
                ],
                "summary": "Find Alias by ID",
                "description": "Returns a single Alias",
                "operationId": "readAliasById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "aliasId",
                        "in": "path",
                        "description": "The unique identifier the the of Alias",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Alias"
                        }
                    },
                    "404": {
                        "description": "Alias not found"
                    }
                }
            }
        },
        "/alias": {
            "post": {
                "tags": [
                    "aliases"
                ],
                "summary": "Creates a new Alias to the system",
                "description": "",
                "operationId": "createAlias",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "alias",
                        "description": "The instance ofAlias that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Alias"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "aliases"
                ],
                "summary": "Update an existing Alias",
                "description": "",
                "operationId": "updateAlias",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "alias",
                        "description": "The Alias instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Alias"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Alias not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "aliases"
                ],
                "summary": "Deletes a Alias",
                "description": "",
                "operationId": "deleteAlias",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "aliasId",
                        "in": "path",
                        "description": "The identifier of the Alias to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Alias value"
                    }
                }
            }
        },
        "/aliases": {
            "post": {
                "tags": [
                    "aliases"
                ],
                "summary": "Create aliases to the system",
                "description": "",
                "operationId": "createAliases",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "aliases",
                        "description": "Collection of Alias that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Alias"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "aliases"
                ],
                "summary": "Find aliases by ID",
                "description": "Returns a collection of Alias",
                "operationId": "readAliasesByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the aliases to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Alias"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Aliases not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "aliases"
                ],
                "summary": "Update an existing Alias",
                "description": "",
                "operationId": "updateAliases",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "aliases",
                        "description": "Collection of Alias to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Alias"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Aliases not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "aliases"
                ],
                "summary": "Deletes some aliases",
                "description": "",
                "operationId": "deleteAliases",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of aliases to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid aliases value"
                    }
                }
            }
        },
        "/aliasesByQuery": {
            "post": {
                "tags": [
                    "aliases"
                ],
                "summary": "Find aliases by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Alias",
                "operationId": "readAliasesByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Alias"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Aliases not found"
                    }
                }
            }
        },
        "/trigger/{triggerId}": {
            "get": {
                "tags": [
                    "triggers"
                ],
                "summary": "Find Trigger by ID",
                "description": "Returns a single Trigger",
                "operationId": "readTriggerById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "triggerId",
                        "in": "path",
                        "description": "The unique identifier the the of Trigger",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Trigger"
                        }
                    },
                    "404": {
                        "description": "Trigger not found"
                    }
                }
            }
        },
        "/trigger": {
            "post": {
                "tags": [
                    "triggers"
                ],
                "summary": "Creates a new Trigger to the system",
                "description": "",
                "operationId": "createTrigger",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "trigger",
                        "description": "The instance ofTrigger that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Trigger"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "triggers"
                ],
                "summary": "Update an existing Trigger",
                "description": "",
                "operationId": "updateTrigger",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "trigger",
                        "description": "The Trigger instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Trigger"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Trigger not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "triggers"
                ],
                "summary": "Deletes a Trigger",
                "description": "",
                "operationId": "deleteTrigger",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "triggerId",
                        "in": "path",
                        "description": "The identifier of the Trigger to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Trigger value"
                    }
                }
            }
        },
        "/triggers": {
            "post": {
                "tags": [
                    "triggers"
                ],
                "summary": "Create triggers to the system",
                "description": "",
                "operationId": "createTriggers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "triggers",
                        "description": "Collection of Trigger that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Trigger"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "triggers"
                ],
                "summary": "Find triggers by ID",
                "description": "Returns a collection of Trigger",
                "operationId": "readTriggersByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the triggers to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Trigger"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Triggers not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "triggers"
                ],
                "summary": "Update an existing Trigger",
                "description": "",
                "operationId": "updateTriggers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "triggers",
                        "description": "Collection of Trigger to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Trigger"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Triggers not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "triggers"
                ],
                "summary": "Deletes some triggers",
                "description": "",
                "operationId": "deleteTriggers",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of triggers to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid triggers value"
                    }
                }
            }
        },
        "/triggersByQuery": {
            "post": {
                "tags": [
                    "triggers"
                ],
                "summary": "Find triggers by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Trigger",
                "operationId": "readTriggersByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Trigger"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Triggers not found"
                    }
                }
            }
        },
        "/baseObject/{baseObjectId}": {
            "get": {
                "tags": [
                    "baseObjects"
                ],
                "summary": "Find BaseObject by ID",
                "description": "Returns a single BaseObject",
                "operationId": "readBaseObjectById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "baseObjectId",
                        "in": "path",
                        "description": "The unique identifier the the of BaseObject",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/BaseObject"
                        }
                    },
                    "404": {
                        "description": "BaseObject not found"
                    }
                }
            }
        },
        "/baseObject": {
            "post": {
                "tags": [
                    "baseObjects"
                ],
                "summary": "Creates a new BaseObject to the system",
                "description": "",
                "operationId": "createBaseObject",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "baseObject",
                        "description": "The instance ofBaseObject that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BaseObject"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "baseObjects"
                ],
                "summary": "Update an existing BaseObject",
                "description": "",
                "operationId": "updateBaseObject",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "baseObject",
                        "description": "The BaseObject instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BaseObject"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "BaseObject not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "baseObjects"
                ],
                "summary": "Deletes a BaseObject",
                "description": "",
                "operationId": "deleteBaseObject",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "baseObjectId",
                        "in": "path",
                        "description": "The identifier of the BaseObject to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid BaseObject value"
                    }
                }
            }
        },
        "/baseObjects": {
            "post": {
                "tags": [
                    "baseObjects"
                ],
                "summary": "Create baseObjects to the system",
                "description": "",
                "operationId": "createBaseObjects",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "baseObjects",
                        "description": "Collection of BaseObject that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BaseObject"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "baseObjects"
                ],
                "summary": "Find baseObjects by ID",
                "description": "Returns a collection of BaseObject",
                "operationId": "readBaseObjectsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the baseObjects to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BaseObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "BaseObjects not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "baseObjects"
                ],
                "summary": "Update an existing BaseObject",
                "description": "",
                "operationId": "updateBaseObjects",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "baseObjects",
                        "description": "Collection of BaseObject to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BaseObject"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "BaseObjects not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "baseObjects"
                ],
                "summary": "Deletes some baseObjects",
                "description": "",
                "operationId": "deleteBaseObjects",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of baseObjects to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid baseObjects value"
                    }
                }
            }
        },
        "/baseObjectsByQuery": {
            "post": {
                "tags": [
                    "baseObjects"
                ],
                "summary": "Find baseObjects by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of BaseObject",
                "operationId": "readBaseObjectsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BaseObject"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "BaseObjects not found"
                    }
                }
            }
        },
        "/objectError/{objectErrorId}": {
            "get": {
                "tags": [
                    "objectErrors"
                ],
                "summary": "Find ObjectError by ID",
                "description": "Returns a single ObjectError",
                "operationId": "readObjectErrorById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "objectErrorId",
                        "in": "path",
                        "description": "The unique identifier the the of ObjectError",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ObjectError"
                        }
                    },
                    "404": {
                        "description": "ObjectError not found"
                    }
                }
            }
        },
        "/objectError": {
            "post": {
                "tags": [
                    "objectErrors"
                ],
                "summary": "Creates a new ObjectError to the system",
                "description": "",
                "operationId": "createObjectError",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "objectError",
                        "description": "The instance ofObjectError that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ObjectError"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "objectErrors"
                ],
                "summary": "Update an existing ObjectError",
                "description": "",
                "operationId": "updateObjectError",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "objectError",
                        "description": "The ObjectError instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/ObjectError"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "ObjectError not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "objectErrors"
                ],
                "summary": "Deletes a ObjectError",
                "description": "",
                "operationId": "deleteObjectError",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "objectErrorId",
                        "in": "path",
                        "description": "The identifier of the ObjectError to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ObjectError value"
                    }
                }
            }
        },
        "/objectErrors": {
            "post": {
                "tags": [
                    "objectErrors"
                ],
                "summary": "Create objectErrors to the system",
                "description": "",
                "operationId": "createObjectErrors",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "objectErrors",
                        "description": "Collection of ObjectError that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ObjectError"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "objectErrors"
                ],
                "summary": "Find objectErrors by ID",
                "description": "Returns a collection of ObjectError",
                "operationId": "readObjectErrorsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the objectErrors to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ObjectError"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "ObjectErrors not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "objectErrors"
                ],
                "summary": "Update an existing ObjectError",
                "description": "",
                "operationId": "updateObjectErrors",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "objectErrors",
                        "description": "Collection of ObjectError to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ObjectError"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "ObjectErrors not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "objectErrors"
                ],
                "summary": "Deletes some objectErrors",
                "description": "",
                "operationId": "deleteObjectErrors",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of objectErrors to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid objectErrors value"
                    }
                }
            }
        },
        "/objectErrorsByQuery": {
            "post": {
                "tags": [
                    "objectErrors"
                ],
                "summary": "Find objectErrors by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of ObjectError",
                "operationId": "readObjectErrorsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ObjectError"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "ObjectErrors not found"
                    }
                }
            }
        },
        "/baseRegistryMetadata/{baseRegistryMetadataId}": {
            "get": {
                "tags": [
                    "baseRegistryMetadatas"
                ],
                "summary": "Find BaseRegistryMetadata by ID",
                "description": "Returns a single BaseRegistryMetadata",
                "operationId": "readBaseRegistryMetadataById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "baseRegistryMetadataId",
                        "in": "path",
                        "description": "The unique identifier the the of BaseRegistryMetadata",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/BaseRegistryMetadata"
                        }
                    },
                    "404": {
                        "description": "BaseRegistryMetadata not found"
                    }
                }
            }
        },
        "/baseRegistryMetadata": {
            "post": {
                "tags": [
                    "baseRegistryMetadatas"
                ],
                "summary": "Creates a new BaseRegistryMetadata to the system",
                "description": "",
                "operationId": "createBaseRegistryMetadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "baseRegistryMetadata",
                        "description": "The instance ofBaseRegistryMetadata that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BaseRegistryMetadata"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "baseRegistryMetadatas"
                ],
                "summary": "Update an existing BaseRegistryMetadata",
                "description": "",
                "operationId": "updateBaseRegistryMetadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "baseRegistryMetadata",
                        "description": "The BaseRegistryMetadata instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BaseRegistryMetadata"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "BaseRegistryMetadata not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "baseRegistryMetadatas"
                ],
                "summary": "Deletes a BaseRegistryMetadata",
                "description": "",
                "operationId": "deleteBaseRegistryMetadata",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "baseRegistryMetadataId",
                        "in": "path",
                        "description": "The identifier of the BaseRegistryMetadata to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid BaseRegistryMetadata value"
                    }
                }
            }
        },
        "/baseRegistryMetadatas": {
            "post": {
                "tags": [
                    "baseRegistryMetadatas"
                ],
                "summary": "Create baseRegistryMetadatas to the system",
                "description": "",
                "operationId": "createBaseRegistryMetadatas",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "baseRegistryMetadatas",
                        "description": "Collection of BaseRegistryMetadata that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BaseRegistryMetadata"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "baseRegistryMetadatas"
                ],
                "summary": "Find baseRegistryMetadatas by ID",
                "description": "Returns a collection of BaseRegistryMetadata",
                "operationId": "readBaseRegistryMetadatasByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the baseRegistryMetadatas to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BaseRegistryMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "BaseRegistryMetadatas not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "baseRegistryMetadatas"
                ],
                "summary": "Update an existing BaseRegistryMetadata",
                "description": "",
                "operationId": "updateBaseRegistryMetadatas",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "baseRegistryMetadatas",
                        "description": "Collection of BaseRegistryMetadata to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BaseRegistryMetadata"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "BaseRegistryMetadatas not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "baseRegistryMetadatas"
                ],
                "summary": "Deletes some baseRegistryMetadatas",
                "description": "",
                "operationId": "deleteBaseRegistryMetadatas",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of baseRegistryMetadatas to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid baseRegistryMetadatas value"
                    }
                }
            }
        },
        "/baseRegistryMetadatasByQuery": {
            "post": {
                "tags": [
                    "baseRegistryMetadatas"
                ],
                "summary": "Find baseRegistryMetadatas by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of BaseRegistryMetadata",
                "operationId": "readBaseRegistryMetadatasByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BaseRegistryMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "BaseRegistryMetadatas not found"
                    }
                }
            }
        },
        "/baseCollectionMetadatum/{baseCollectionMetadatumId}": {
            "get": {
                "tags": [
                    "baseCollectionMetadata"
                ],
                "summary": "Find BaseCollectionMetadatum by ID",
                "description": "Returns a single BaseCollectionMetadatum",
                "operationId": "readBaseCollectionMetadatumById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "baseCollectionMetadatumId",
                        "in": "path",
                        "description": "The unique identifier the the of BaseCollectionMetadatum",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/BaseCollectionMetadatum"
                        }
                    },
                    "404": {
                        "description": "BaseCollectionMetadatum not found"
                    }
                }
            }
        },
        "/baseCollectionMetadatum": {
            "post": {
                "tags": [
                    "baseCollectionMetadata"
                ],
                "summary": "Creates a new BaseCollectionMetadatum to the system",
                "description": "",
                "operationId": "createBaseCollectionMetadatum",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "baseCollectionMetadatum",
                        "description": "The instance ofBaseCollectionMetadatum that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BaseCollectionMetadatum"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "baseCollectionMetadata"
                ],
                "summary": "Update an existing BaseCollectionMetadatum",
                "description": "",
                "operationId": "updateBaseCollectionMetadatum",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "baseCollectionMetadatum",
                        "description": "The BaseCollectionMetadatum instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/BaseCollectionMetadatum"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "BaseCollectionMetadatum not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "baseCollectionMetadata"
                ],
                "summary": "Deletes a BaseCollectionMetadatum",
                "description": "",
                "operationId": "deleteBaseCollectionMetadatum",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "baseCollectionMetadatumId",
                        "in": "path",
                        "description": "The identifier of the BaseCollectionMetadatum to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid BaseCollectionMetadatum value"
                    }
                }
            }
        },
        "/baseCollectionMetadata": {
            "post": {
                "tags": [
                    "baseCollectionMetadata"
                ],
                "summary": "Create baseCollectionMetadata to the system",
                "description": "",
                "operationId": "createBaseCollectionMetadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "baseCollectionMetadata",
                        "description": "Collection of BaseCollectionMetadatum that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BaseCollectionMetadatum"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "baseCollectionMetadata"
                ],
                "summary": "Find baseCollectionMetadata by ID",
                "description": "Returns a collection of BaseCollectionMetadatum",
                "operationId": "readBaseCollectionMetadataByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the baseCollectionMetadata to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BaseCollectionMetadatum"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "BaseCollectionMetadata not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "baseCollectionMetadata"
                ],
                "summary": "Update an existing BaseCollectionMetadatum",
                "description": "",
                "operationId": "updateBaseCollectionMetadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "baseCollectionMetadata",
                        "description": "Collection of BaseCollectionMetadatum to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BaseCollectionMetadatum"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "BaseCollectionMetadata not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "baseCollectionMetadata"
                ],
                "summary": "Deletes some baseCollectionMetadata",
                "description": "",
                "operationId": "deleteBaseCollectionMetadata",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of baseCollectionMetadata to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid baseCollectionMetadata value"
                    }
                }
            }
        },
        "/baseCollectionMetadataByQuery": {
            "post": {
                "tags": [
                    "baseCollectionMetadata"
                ],
                "summary": "Find baseCollectionMetadata by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of BaseCollectionMetadatum",
                "operationId": "readBaseCollectionMetadataByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/BaseCollectionMetadatum"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "BaseCollectionMetadata not found"
                    }
                }
            }
        },
        "/locker/{lockerId}": {
            "get": {
                "tags": [
                    "lockers"
                ],
                "summary": "Find Locker by ID",
                "description": "Returns a single Locker",
                "operationId": "readLockerById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "lockerId",
                        "in": "path",
                        "description": "The unique identifier the the of Locker",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Locker"
                        }
                    },
                    "404": {
                        "description": "Locker not found"
                    }
                }
            }
        },
        "/locker": {
            "post": {
                "tags": [
                    "lockers"
                ],
                "summary": "Creates a new Locker to the system",
                "description": "",
                "operationId": "createLocker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "locker",
                        "description": "The instance ofLocker that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Locker"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "lockers"
                ],
                "summary": "Update an existing Locker",
                "description": "",
                "operationId": "updateLocker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "locker",
                        "description": "The Locker instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Locker"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Locker not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "lockers"
                ],
                "summary": "Deletes a Locker",
                "description": "",
                "operationId": "deleteLocker",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "lockerId",
                        "in": "path",
                        "description": "The identifier of the Locker to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Locker value"
                    }
                }
            }
        },
        "/lockers": {
            "post": {
                "tags": [
                    "lockers"
                ],
                "summary": "Create lockers to the system",
                "description": "",
                "operationId": "createLockers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "lockers",
                        "description": "Collection of Locker that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Locker"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "lockers"
                ],
                "summary": "Find lockers by ID",
                "description": "Returns a collection of Locker",
                "operationId": "readLockersByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the lockers to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Locker"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Lockers not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "lockers"
                ],
                "summary": "Update an existing Locker",
                "description": "",
                "operationId": "updateLockers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "lockers",
                        "description": "Collection of Locker to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Locker"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Lockers not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "lockers"
                ],
                "summary": "Deletes some lockers",
                "description": "",
                "operationId": "deleteLockers",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of lockers to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid lockers value"
                    }
                }
            }
        },
        "/lockersByQuery": {
            "post": {
                "tags": [
                    "lockers"
                ],
                "summary": "Find lockers by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Locker",
                "operationId": "readLockersByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Locker"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Lockers not found"
                    }
                }
            }
        }
    },
    "securityDefinitions": [],
    "externalDocs": {
        "description": "Find out more about Bartleby",
        "url": "http://www.pereira-da-silva.com/projects/bartleby/"
    }
}