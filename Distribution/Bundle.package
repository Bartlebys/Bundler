#BMS#->{"filename":"app.json","checksum":1543431083,"relativePath":"App.flexions\/App\/datasources\/app.json","size":5071}<-#BME#
{
    "swagger": "2.0 ++ Bartleby Metadata",
    "info": {
        "description": "... [https://www.bartleby.org/](https://www.bartleby.org/) ",
        "version": "0.9.beta1",
        "title": "Bartleby",
        "termsOfService": "https://www.bartleby.org/terms/",
        "contact": {
            "email": "nobody@bartleby.org"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0"
        }
    },
    "host": "https://www.bartleby.org/",
    "basePath": "/api/v1",
    "tags": [],
    "schemes": [
        "https"
    ],
    "definitions": {
        "Message": {
            "description": "A message is a small piece of text associated to a communication context",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "creationDate": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "title": {
                            "type": "String"
                        },
                        "body": {
                            "type": "String"
                        },
                        "parent": {
                            "$ref": "#/definitions/ExternalReference"
                        },
                        "childrens": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "",
                                    "explicitType": "ExternalReference<Message>",
                                    "default": "ExternalReference<Message>()"
                                }
                            }
                        },
                        "tags": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "The tags",
                                    "explicitType": "ExternalReference<Tag>",
                                    "default": "ExternalReference<Tag>()"
                                }
                            }
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,


            }
        },
        "AbstractContext": {
            "description": "A bunch of properties shared between multiple Entities used (DO NOT use allOF there is a Bug on Composition of Composition in SwaggerToFlexions)",
            "type": "object",
            "properties": {
                "name": {
                    "type": "String"
                },
                "informativeString": {
                    "type": "String"
                },
                "creationDate": {
                    "type": "string",
                    "format": "date-time"
                },
                "tags": {
                    "schema": {
                        "type": "array",
                        "items": {
                            "description": "The tags ExternalReferencees",
                            "explicitType": "ExternalReference<Tag>",
                            "default": "[ExternalReference<Tag>]()"
                        }
                    }
                }
            },
            "metadata": {
                "urdMode": false
            }
        },
        "Sample": {
            "description": "An Sample",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "firstName": {
                            "type": "string"
                        },
                        "lastName": {
                            "type": "string"
                        },
                        "status": {
                            "type": "string",
                            "description": "User Status",
                            "enum": [
                                "active",
                                "suspended"
                            ]
                        },
                        "tags": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "The tags of the user",
                                    "explicitType": "ExternalReference<Tag>",
                                    "default": "[ExternalReference<Tag>]()"
                                }
                            }
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,


            }
        }
    },
    "paths":{},
    "securityDefinitions": [],
    "externalDocs": {
        "description": "Find out more about Bartleby",
        "url": "https://www.bartleby.org/"
    }
}#BMS#->{"filename":"post-processor.php","checksum":4208046175,"relativePath":"App.flexions\/App\/post-processor.php","size":2814}<-#BME#
<?php


/* @var $h Hypotypose */

// /////////////////////////////////////////
// #1 Save the hypotypose to files
// /////////////////////////////////////////

hypotyposeToFiles();

// /////////////////////////////////////////
// #2 generate some post generation files
// /////////////////////////////////////////

if(file_exists(realpath($destination))==false){
	throw new Exception("Unexisting destination ".realpath($destination));
}

$generated='';
$h=Hypotypose::Instance();

// Let's write the list of the files we have created
// We could iterate of each loop ( $h->flexedList)
$list = $h->getFlatFlexedList();
$counter = 0;

foreach ( $list as $flexed ) {
    /* @var $flexed Flexed */
	if ($flexed->exclude === false) {
		// Let's add a human readable log.
		$counter ++;
        $line='';
		if (VERBOSE_FLEXIONS)
			fLog ( $counter . " " . $flexed->fileName. cr() , false );
		// Let's list the file name
		$line .= $counter.'-> We have created "'.$flexed->package.$flexed->fileName . '"' . "".cr();
		$generated .= $line;
	}
}

// We save the file
$filePath= $destination .'ReadMe.txt';
$c='Those files that are recreated by YouDubApi-flexions-App should not be modified directly.'.cr().cr();
$c.=$generated;
file_put_contents ( $filePath, $c );


// /////////////////////////////////////////
// #3 Deploy
// /////////////////////////////////////////


// We can deploy the files per version and stage
// And keep a copy in the out.YouDubApi-flexions-App folder.

require_once FLEXIONS_MODULES_DIR . '/Deploy/FTPDeploy.php';
require_once FLEXIONS_MODULES_DIR . '/Deploy/LocalDeploy.php';

// DEVELOPMENT
if ($h->stage==DefaultStages::STAGE_DEVELOPMENT){
    $deploy=new LocalDeploy($h);

    $www=dirname(dirname(__DIR__)).'/'.APP_PUBLIC_ROOT_FOLDER.'/';
    $deploy->rmPath($www.'/api/v1/_generated/');
    $deploy->copyFiles('/php/api/v1/_generated/',$www,true);
    $deploy->copyFiles('/php/generated_destructiveInstaller.php',$www,true);
    
    // We want to copy the package 'ios/' files to the iOS sources
    $deploy->rmPath(xOS_APP_EXPORT_PATH);
    $deploy->copyFiles('/xOS/',xOS_APP_EXPORT_PATH,true);
}

// PRODUCTION
// Replace Host + <USER> & <PASSWORD>
if ($h->stage==DefaultStages::STAGE_BETA){
    // We want to copy the package 'php/' files to a valid FTP.
    $ftpDeploy=new FTPDeploy($h);
    $ftpDeploy->setUp("api.domain.com");
    if($ftpDeploy->login("xxx","xxx")==true){
        //$ftpDeploy->deleteFiles('php/','/home/dev/public_html/');
        $ftpDeploy->copyFiles('php/','/home/xxx/public_html/');
    }else{
        // There is may be an issue
    }
    // Local copies
    $deploy=new LocalDeploy($h);
    // We want to copy the package 'ios/' files to the iOS sources
    $deploy->rmPath(xOS_APP_EXPORT_PATH);
    $deploy->copyFiles('/xOS/',xOS_APP_EXPORT_PATH,true);
}#BMS#->{"filename":"pre-processor.php","checksum":1527417323,"relativePath":"App.flexions\/App\/pre-processor.php","size":1351}<-#BME#
<?php

// we load the shared variables
include  FLEXIONS_SOURCE_DIR.'/Shared.php';
require_once FLEXIONS_MODULES_DIR . 'SwaggerToFlexions/SwaggerToFlexionsRepresentations.php';
require_once FLEXIONS_MODULES_DIR . 'SwaggerToFlexions/SwaggerDelegate.php';

// we instanciate the Hypotypose singleton
$h = Hypotypose::instance();
$h->stage=DefaultStages::STAGE_DEVELOPMENT;
$h->version='1.0';
$h->classPrefix=$prefix;
if(isset($doNotGenerate)){
    $h->excludePath=$doNotGenerate;
}

$transformer=new SwaggerToFlexionsRepresentations();
$delegate=new SWaggerDelegate();
$r = $transformer->projectRepresentationFromSwaggerJson($descriptorFilePath, $prefix, $delegate);


/// Associate the entities to the loop name
if(! $h->setLoopDescriptor($r->entities,DefaultLoops::ENTITIES)){
    throw new Exception('Error when setting the loop descriptor '.DefaultLoops::ENTITIES);
}

/// Associate the global descriptor to the loop name
// Yoy must wrap it in an array
if(! $h->setLoopDescriptor($r->actions,DefaultLoops::ACTIONS)){
    throw new Exception('Error when setting the loop descriptor '.DefaultLoops::ACTIONS);
}

/// Associate the global descriptor to the loop name
// Yoy must wrap it in an array
if(! $h->setLoopDescriptor(array($r),DefaultLoops::PROJECT)){
    throw new Exception('Error when setting the loop descriptor '.DefaultLoops::PROJECT);
}#BMS#->{"filename":"run.php","checksum":115342129,"relativePath":"App.flexions\/App\/run.php","size":677}<-#BME#
<?php
/**
 * Created by PhpStorm.
 * User: bpds
 * Date: 09/07/15
 * Time: 14:56
 * You can call this little script from command line
 * php -f run.php
 * it is  equivalent to . globalflexions.sh
 * its main advantage is that it can be debugged directly more easily
 */

$arguments=array();
$arguments['source']="./";
$arguments['destination']="out.flexions/";
$arguments['descriptor']="datasources/youdub.json";
$arguments['templates']="*";
$arguments['preProcessors']="pre-processor.php";
$arguments['postProcessors']="post-processor.php";

define ( "COMMANDLINE_MODE", true );

// Invoke flexions
include_once dirname(dirname(__DIR__)).'/BartlebyFlexions/src/flexions.php';
#BMS#->{"filename":"Shared.php","checksum":828567861,"relativePath":"App.flexions\/App\/Shared.php","size":1276}<-#BME#
<?php

// DEFINE IN THIS FILE ANY SHARED GLOBAL SETUPS
// THIS FILE SHOULD BE INCLUDED IN YOUR TEMPLATES

/* @var $f Flexed */

require_once FLEXIONS_MODULES_DIR . 'Utils/Pluralization.php';
include_once dirname(dirname(__DIR__)). '/GenerativeConstants.php';

$isIncludeInBartlebysCommons=false;

$prefix = "";// No prefix
$modelsShouldConformToNSCoding=false; // (!) you can opt for NSCoding support (the model will not be pure swift models)
$excludeEntitiesWith=array("AbstractContext");//
$xOSIncludeCollectionControllerForEntityNamed=array();
$excludeActionsWith=array("LinkedDocument","Asset","AbstractContext","Reference","Tag","Scene","Shot","Sentence","TextPart","Sign","StringAttribute","TimeCode","TimeRange","MovieCharacter","Actor");//We generate only the entity
$unDeletableEntitiesWith=array();
$unModifiableEntitiesWith=array();
$doNotGenerate=array();


if (isset ( $f )) {
	$f->company = "LyLo Media group";
	$f->prefix = $prefix;
	$f->author = "benoit@pereira-da-silva.com";
	$f->projectName = "YouDub";
	//$f->license = FLEXIONS_MODULES_DIR."Licenses/LGPL.template.php";
}


/*
$parentClass = "";
$collectionParentClass="";
$protocols="";
$imports = "\n#import \"$parentClass.h\"\n"; // NOT NEEDED FOR SWIFT
$markAsDynamic = false;
$allowScalars = true;
*/
#BMS#->{"filename":"endpoint.cuds.swift.template.php","checksum":1357419024,"relativePath":"App.flexions\/App\/templates\/actions\/endpoint.cuds.swift.template.php","size":212}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/actions/cuds.withWeakLogic.swift.template.php';#BMS#->{"filename":"endpoint.php.template.php","checksum":2196702646,"relativePath":"App.flexions\/App\/templates\/actions\/endpoint.php.template.php","size":200}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/actions/endpoint.php.template.php';#BMS#->{"filename":"endpoint.swift.template.php","checksum":89320255,"relativePath":"App.flexions\/App\/templates\/actions\/endpoint.swift.template.php","size":202}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/actions/endpoint.swift.template.php';#BMS#->{"filename":"model.php.template.php","checksum":2736040291,"relativePath":"App.flexions\/App\/templates\/entities\/model.php.template.php","size":198}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/entities/model.php.template.php';#BMS#->{"filename":"model.swift.template.php","checksum":645731421,"relativePath":"App.flexions\/App\/templates\/entities\/model.swift.template.php","size":200}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/entities/model.swift.template.php';#BMS#->{"filename":"modelCollectionController.swift.template.php","checksum":279416835,"relativePath":"App.flexions\/App\/templates\/entities\/modelCollectionController.swift.template.php","size":220}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/entities/modelCollectionController.swift.template.php';#BMS#->{"filename":"baseDocument.swift.template.php","checksum":3185882183,"relativePath":"App.flexions\/App\/templates\/project\/baseDocument.swift.template.php","size":676}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';

// Configuration
require_once FLEXIONS_MODULES_DIR . 'Bartleby/templates/project/SwiftDocumentConfigurator.php';
$configurator=new SwiftDocumentConfigurator();
$configurator->filename="BaseDocument.swift";
$configurator->includeCollectionControllerForEntityContainingString=array("Episode","User","Group","Permission","Operation","Workspace","Project","Fragment","Note","Trigger");
$configurator->excludeCollectionControllerForEntityContainingString=array();
// Invocation
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/project/document.swift.template.php';#BMS#->{"filename":"configuration.php.template.php","checksum":2686118568,"relativePath":"App.flexions\/App\/templates\/project\/configuration.php.template.php","size":207}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/project/configuration.php.template  .php';#BMS#->{"filename":"destructiveInstaller.template.php","checksum":1069868788,"relativePath":"App.flexions\/App\/templates\/project\/project\/destructiveInstaller.template.php","size":208}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/project/destructiveInstaller.template.php';#BMS#->{"filename":"endPoints.json.template.php","checksum":1409133785,"relativePath":"App.flexions\/App\/templates\/project\/project\/endPoints.json.template.php","size":216}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/modeling-meta-templates/project/endPoints.json.template.php';#BMS#->{"filename":"post-processor.php","checksum":658985932,"relativePath":"App.flexions\/EndPointsFromDefinitions\/post-processor.php","size":1475}<-#BME#
<?php

require_once FLEXIONS_MODULES_DIR . '/Deploy/FTPDeploy.php';
require_once FLEXIONS_MODULES_DIR . '/Deploy/LocalDeploy.php';

/* @var $h Hypotypose */

// /////////////////////////////////////////
// #1 Save the hypotypose to files
// /////////////////////////////////////////

hypotyposeToFiles();

// DEVELOPMENT
if ($h->stage==DefaultStages::STAGE_DEVELOPMENT){
    $deploy=new LocalDeploy($h);
    $deploy->copyFiles('/php/',dirname(dirname(__DIR__)).'/'.APP_PUBLIC_ROOT_FOLDER.'/',true);

    // AGGREGATE THE PATHS IN youdub.json
    $decodedPaths=null;
    $fl=$h->flexedList[DefaultLoops::PROJECT];
    /* @var $flexed Flexed */
    foreach ($fl as $flexed) {
        if($flexed->fileName=='pathsFragment.json'){
            $json=$flexed->source;
            $decodedPaths=json_decode($json,true);
        }
    }
    if(isset($decodedPaths)){
        // We gonna update the json
        $dataSourcePath= dirname(__DIR__) . '/App/datasources/app.json';
        $dataSourceJSON=json_decode(file_get_contents($dataSourcePath),true);
        // $paths=$dataSourceJSON['paths']; <- if you want to preserve the paths
        $paths=array();
        
        foreach ($decodedPaths['paths'] as $path => $contentAtPath ) {
            $paths[$path]=$contentAtPath;
        }
        $dataSourceJSON['paths']=$paths;
        $encoded=json_encode($dataSourceJSON,JSON_UNESCAPED_SLASHES|JSON_PRETTY_PRINT);
        file_put_contents($dataSourcePath,$encoded);

    }


}#BMS#->{"filename":"pre-processor.php","checksum":1527417323,"relativePath":"App.flexions\/EndPointsFromDefinitions\/pre-processor.php","size":1351}<-#BME#
<?php

// we load the shared variables
include  FLEXIONS_SOURCE_DIR.'/Shared.php';
require_once FLEXIONS_MODULES_DIR . 'SwaggerToFlexions/SwaggerToFlexionsRepresentations.php';
require_once FLEXIONS_MODULES_DIR . 'SwaggerToFlexions/SwaggerDelegate.php';

// we instanciate the Hypotypose singleton
$h = Hypotypose::instance();
$h->stage=DefaultStages::STAGE_DEVELOPMENT;
$h->version='1.0';
$h->classPrefix=$prefix;
if(isset($doNotGenerate)){
    $h->excludePath=$doNotGenerate;
}

$transformer=new SwaggerToFlexionsRepresentations();
$delegate=new SWaggerDelegate();
$r = $transformer->projectRepresentationFromSwaggerJson($descriptorFilePath, $prefix, $delegate);


/// Associate the entities to the loop name
if(! $h->setLoopDescriptor($r->entities,DefaultLoops::ENTITIES)){
    throw new Exception('Error when setting the loop descriptor '.DefaultLoops::ENTITIES);
}

/// Associate the global descriptor to the loop name
// Yoy must wrap it in an array
if(! $h->setLoopDescriptor($r->actions,DefaultLoops::ACTIONS)){
    throw new Exception('Error when setting the loop descriptor '.DefaultLoops::ACTIONS);
}

/// Associate the global descriptor to the loop name
// Yoy must wrap it in an array
if(! $h->setLoopDescriptor(array($r),DefaultLoops::PROJECT)){
    throw new Exception('Error when setting the loop descriptor '.DefaultLoops::PROJECT);
}#BMS#->{"filename":"run.php","checksum":5835851,"relativePath":"App.flexions\/EndPointsFromDefinitions\/run.php","size":702}<-#BME#
<?php
/**
 * Created by PhpStorm.
 * User: bpds
 * Date: 09/07/15
 * Time: 14:56
 * You can call this little script from command line
 * php -f run.php
 * it is  equivalent to . globalflexions.sh
 * its main advantage is that it can be debugged directly more easily
 */

$arguments=array();
$arguments['source']="./";
$arguments['destination']="out.flexions/";
$arguments['descriptor']= dirname(__DIR__) . '/App/datasources/youdub.json';
$arguments['templates']="*";
$arguments['preProcessors']="pre-processor.php";
$arguments['postProcessors']="post-processor.php";

define ( "COMMANDLINE_MODE", true );

// Invoke flexions
include_once dirname(dirname(__DIR__)).'/BartlebyFlexions/src/flexions.php';
#BMS#->{"filename":"Shared.php","checksum":1889940453,"relativePath":"App.flexions\/EndPointsFromDefinitions\/Shared.php","size":1131}<-#BME#
<?php


// DEFINE IN THIS FILE ANY SHARED GLOBAL SETUPS
// THIS FILE SHOULD BE INCLUDED IN YOUR TEMPLATES

/* @var $f Flexed */

require_once FLEXIONS_MODULES_DIR . 'Utils/Pluralization.php';
include_once dirname(dirname(__DIR__)). '/GenerativeConstants.php';

$prefix = "Swagger";
$excludeEntitiesWith=array("AbstractContext");//
$excludeActionsWith=array("Asset","Datum","AbstractContext","Reference","Tag","Scene","Shot","Sentence","TextPart","Sign","StringAttribute","TimeCode","TimeRange","MovieCharacter","Actor");//We generate only the entity
$unDeletableEntitiesWith=array();
$unModifiableEntitiesWith=array();
$doNotGenerate=array("AbstractContext");// Used by the flexions script to reject a flexed content

if (isset ( $f )) {
	$f->package = "Models/";
	$f->company = "Chaosmos";
	$f->prefix = $prefix;
	$f->author = "benoit@chaosmos.fr";
	$f->projectName = "YouDub";
	//$f->license = FLEXIONS_MODULES_DIR."Licenses/LGPL.template.php";
}

/*
$parentClass = "";
$collectionParentClass="";
$protocols="";
$imports = "\n#import \"$parentClass.h\"\n"; // NOT NEEDED FOR SWIFT
$markAsDynamic = false;
$allowScalars = true;
*/#BMS#->{"filename":"README.md","checksum":3947348978,"relativePath":"App.flexions\/README.md","size":853}<-#BME#
## YouDub Api Generator

+ Generation of the server side api.
+ Generation of the xOS client side library 

## How to ? ##

Pre-generate the api descriptor 

    cd <path>/EndPointsFromDefinitions/
    php -f run.php


Generate the app

    cd <path>/App/
    php -f run.php

The generated files will be available in the folder out.flexions/
The logs will be written in BarltebyFlexions folder /out/

## Regenerate all the stack ##

You can create a global flexions script.

    #!/usr/bin/env bash
    
    cd ./Bartleby/Commons.flexions/EndPointsFromDefinitions/
    php -f run.php
    
    cd ../../../
    
    cd ./Bartleby/Commons.flexions/App/
    php -f run.php
    
    cd ../../../
    
    cd ./App.flexions/EndPointsFromDefinitions/
    php -f run.php
    
    cd ../../
    
    cd ./App.flexions/App/
    php -f run.php
    
    cd ../../
#BMS#->{"filename":"Auth.php","checksum":1921288361,"relativePath":"Bartleby\/Commons\/EndPoints\/Auth.php","size":7224}<-#BME#
<?php

namespace Bartleby\EndPoints;
require_once BARTLEBY_ROOT_FOLDER .'Core/Configuration.php';
require_once BARTLEBY_ROOT_FOLDER .'Commons/_generated/Models/User.php';
require_once BARTLEBY_ROOT_FOLDER. 'Mongo/MongoEndPoint.php';
require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoCallDataRawWrapper.php';

use Bartleby\mongo\MongoCallDataRawWrapper;
use Bartleby\Mongo\MongoEndPoint;
use Bartleby\Core\JsonResponse;
use Bartleby\Models\User;
use \MongoCursorException;
use \MongoClient;
use Bartleby\Configuration;


final class AuthCallData extends MongoCallDataRawWrapper {
    
    /**
     * The user instance
     */
    const userUID = 'userUID';
    
    /**
     * The spaceUID
     */
    const spaceUID = 'spaceUID';

    /**@
     * The sent password should be always salted with the shared salt key client side.
     * You should never transmit or store clear passwords.
     */
    const password = 'password';


    /***
     * The standard indentification mode is by "keys".
     *
     *  Auth::identificationByKey (the preferred method to permit massive multi-micro-auth on a same node.)
     *  or
     *  Auth::identificationByCookie (implicit this is the value if the method is undefined)
     */
    const identification = 'identification';

}

final class Auth extends MongoEndPoint{

    const identificationByKey = 'Key';
    const identificationByCookie = 'Cookie';
    const kvidKey = 'kvid';
    
    private $issues=array();

    function POST(AuthCallData $parameters){

        $configuration=$this->getConfiguration();
        $currentUserUID = $parameters->getValueForKey(AuthCallData::userUID);
        $password = $parameters->getValueForKey(AuthCallData::password);
        $identification = $parameters->getValueForKey(AuthCallData::identification);
        if (!isset($identification)){
            $identification=Auth::identificationByCookie;
        }

        if (!isset($password) || strlen($password)<3 ){
            return new JsonResponse("Password is not valid",400);
        }
        $spaceUID=$this->getSpaceUID();

        // MongoDB
        $db=$this->getDB();

        $usersCollection= $configuration->MONGO_USERS_COLLECTION();

        if (!isset($currentUserUID) || strlen($currentUserUID)<3  || !isset($spaceUID) || strlen($spaceUID)<3){
            return new JsonResponse(VOID_RESPONSE,400);
        }

        $spaceUIDKey= $configuration->MONGO_SPACE_UID_KEY_PATH();
        $users = $db->{$usersCollection};

        try {
            $q = array (
                "_id" => $currentUserUID,
                $spaceUIDKey => $spaceUID
            );

            $user = $users->findOne( $q );
            if (isset($user)){

                    $passwordKey=$configuration->MONGO_USER_PASSWORD_KEY_PATH();
                    $savedPassword=$user[$passwordKey];
                    $saltedPassword=$configuration->salt($password);
                    $passwordMatches=(isset($password) && strlen($password)>1 && $savedPassword === $saltedPassword );

                    if ($passwordMatches){

                        // Is the user "suspended" ?
                        if (array_key_exists('status',$user)){
                            if ($user['status']==User::Status_Suspended){
                                $this->issues[]='This user is suspended';
                                return new JsonResponse($this->issues,423);
                            }
                        }

                        // Verify the conformity of the Dataspaces.
                        if (array_key_exists('spaceUID',$user)){
                            if ($user['spaceUID']!=$spaceUID){
                                $this->issues[]='DataSpace conflict the space UID are not matching';
                                return new JsonResponse($this->issues,409);
                            }
                        }else{
                            $this->issues[]='DataSpace conflict the space UID of the user is not defined';
                            return new JsonResponse($this->issues,409);
                        }

                        // Everything is OK
                        if ($identification==Auth::identificationByCookie){
                            // by Cookies
                            $cookieUID=$this->_openSessionWithCookies($spaceUID,$currentUserUID);
                            return new JsonResponse(VOID_RESPONSE,200);
                        }else{
                            // by Keys
                            // There is no need to open a session
                            // The caller will resent this key value pair in a header on any identified call.
                            $identification=array($configuration->getCryptedKEYForSpaceUID($spaceUID),$configuration->encryptIdentificationValue($spaceUID,$currentUserUID));
                            return new JsonResponse($identification,200);
                        }

                    }

                return new JsonResponse(VOID_RESPONSE,401);
            } else {
                if ($this->_configuration->DEVELOPER_DEBUG_MODE()==true){
                    return new JsonResponse(array("credentials"=>$parameters),404);
                }else{
                    return new JsonResponse(VOID_RESPONSE,404);
                }

            }
        } catch ( MongoCursorException $e ) {
            return new JsonResponse('MongoCursorException' . $e->getCode() . ' ' . $e->getMessage(), 417);
        }
    }


    function DELETE(AuthCallData $parameters) {
        $spaceUID=$this->getSpaceUID();
        if($this->_removeCookiesFor($spaceUID)) {
            return new JsonResponse(VOID_RESPONSE, 202);
        }else{
            return new JsonResponse(VOID_RESPONSE, 200);
        }
    }




    /////////////////////////
    // Session
    /////////////////////////

    /////////////
    // COOKIES
    ////////////

    /**
     * Open the session
     * @param $spaceUID
     * @param $userID
     * @return string
     */
    protected function _openSessionWithCookies($spaceUID,$userID){
        return $this->_setCookie($spaceUID,$userID);
    }


    private function _removeCookiesFor($spaceUID){
        $configuration=$this->getConfiguration();
        $cookieKey=$configuration->getCryptedKEYForSpaceUID($spaceUID);
        if(array_key_exists($cookieKey,$_COOKIE)) {
            // Cookie expiration
            setcookie($cookieKey,'',time()-60,'/', null, false, false);
            return true;
        }else{
            return false;
        }
    }

    private function _setCookie($spaceUID,$userID,$nbOfHours=240){
        $time=time();
        $configuration=$this->getConfiguration();
        $cookieKey=$configuration->getCryptedKEYForSpaceUID($spaceUID);
        $cookieValue=$configuration->encryptIdentificationValue($spaceUID,$userID);
        $expires=$time+$nbOfHours*60*60;
        //setcookie ($name, $value = null, $expire = null, $path = null, $domain = null, $secure = null, $httponly = null) {}
        if (setcookie($cookieKey,$cookieValue,$expires, '/', null, false, false)===false){
            $this->issues[]='The setcookie call has failed!';
        }
        return $cookieValue;
    }

}#BMS#->{"filename":"Infos.php","checksum":953472970,"relativePath":"Bartleby\/Commons\/EndPoints\/Infos.php","size":2469}<-#BME#
<?php

namespace Bartleby\EndPoints;

require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoEndPoint.php';
require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoCallDataRawWrapper.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/KeyPath.php';

use Bartleby\Core\Configuration;
use Bartleby\Core\JsonResponse;
use Bartleby\Core\Mode;
use Bartleby\mongo\MongoCallDataRawWrapper;
use Bartleby\Mongo\MongoEndPoint;
use Bartleby\Core\KeyPath;


final class InfosCallData extends MongoCallDataRawWrapper {

    // Set a key if you want only that key.
    const k = "k";
}

/**
 * Class Infos
 *
 * You can grab :
 *
 * All the infos
 * http://yd.local/api/v1/infos
 *
 * Unique key
 * http://yd.local/api/v1/infos?k=acl_is_disabled
 *
 * Nested key path
 * http://yd.local/api/v1/infos?k=configuration.STAGE
 * http://yd.local/api/v1/infos?k=configuration.getPagesSearchPaths.0
 *
 *
 * @package Bartleby\EndPoints
 */
final class Infos extends MongoEndPoint {

    function GET(InfosCallData $parameters){
        $infos=array();

        // Configuration

        $infos["version_of_Bartleby"]=Configuration::BARTLEBY_VERSION.'.'.Configuration::BARTLEBY_RELEASE;
        $infos["acl_is_disabled"] = $this->_configuration->DISABLE_ACL();
        $infos["configuration"]=array();
        $infos["configuration"]["STAGE"]=$this->_configuration->STAGE();
        $infos["configuration"]["VERSION"]=$this->_configuration->VERSION();
        $infos["configuration"]["getBartlebyRootDirectory"]=$this->_configuration->getBartlebyRootDirectory();
        $infos["configuration"]["getEndpointsSearchPaths"]=$this->_configuration->getEndpointsSearchPaths();
        $infos["configuration"]["getPagesSearchPaths"]=$this->_configuration->getPagesSearchPaths();
        $infos["configuration"]["getPermissionsRules"]=$this->_configuration->getPermissionsRules();
        $infos["configuration"]["getRouteAliases(API)"]=$this->_configuration->getRouteAliases(Mode::API)->getMapping();
        $infos["configuration"]["getRouteAliases(PAGES)"]=$this->_configuration->getRouteAliases(Mode::PAGES)->getMapping();

        $key = $parameters->getValueForKey(InfosCallData::k);
        if (isset($key)) {
            $value = KeyPath::valueForKeyPath($infos, $key);
            if (isset($value)) {
                $infos = array($key => $value);
            } else {
                $infos = 'Key not found "' . $key . '"';
            }
        }

        return new JsonResponse($infos, 200);
    }


}#BMS#->{"filename":"Reachable.php","checksum":2670873950,"relativePath":"Bartleby\/Commons\/EndPoints\/Reachable.php","size":1163}<-#BME#
<?php

namespace Bartleby\EndPoints;

require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoEndPoint.php';
require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoCallDataRawWrapper.php';

use Bartleby\Core\JsonResponse;
use Bartleby\mongo\MongoCallDataRawWrapper;
use Bartleby\Mongo\MongoEndPoint;


final class ReachableCallData extends MongoCallDataRawWrapper {

}

final class Reachable extends MongoEndPoint {

    /**
     * Return 200 if the api is reachable
     * Permission is set to: 'Reachable->GET'=> array('level'=> PERMISSION_NO_RESTRICTION)
     * @param ReachableCallData $parameters
     * @return JsonResponse
     */
    function GET(ReachableCallData $parameters){
        return new JsonResponse(VOID_RESPONSE, 200);
    }

    // Auth is required
    /***
     * Return 200 if the api is reachable and the credentials of the user valid for the current context.
     * Permission  is set to: 'Reachable->verify'=> array('level'=> PERMISSION_BY_IDENTIFICATION),
     * @param ReachableCallData $parameters
     * @return JsonResponse
     */
    function verify(ReachableCallData $parameters){
        return new JsonResponse(VOID_RESPONSE, 200);
    }


}#BMS#->{"filename":"SSETime.php","checksum":3869692020,"relativePath":"Bartleby\/Commons\/EndPoints\/SSETime.php","size":935}<-#BME#
<?php


namespace Bartleby\EndPoints;
require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoEndPoint.php';
require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoCallDataRawWrapper.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/ServerSentEvent.php';


use Bartleby\mongo\MongoCallDataRawWrapper;
use Bartleby\Mongo\MongoEndPoint;
use Bartleby\Core\ServerSentEvent;

final class SSETimeCallData extends MongoCallDataRawWrapper {
}

final class SSETime extends MongoEndPoint {

    function GET(SSETimeCallData $parameters) {
        // Creation of the SSE
        $sse = new ServerSentEvent(3600); // 1 time per second
        $s=$this;
        // Definition of the closure
        $f=function() use ($s,$sse,$parameters) {
            //$s->getDB();
            $serverTime = time();
            $sse->sendMsg($serverTime,'tic', '{"serverTime":"' . date("h:i:s", time()).'"}');
        };
        $sse->callBack=$f;
        return $sse;
    }

}

#BMS#->{"filename":"SSETriggers.php","checksum":2124290622,"relativePath":"Bartleby\/Commons\/EndPoints\/SSETriggers.php","size":4273}<-#BME#
<?php


namespace Bartleby\EndPoints;
require_once BARTLEBY_ROOT_FOLDER . 'Core/JsonResponse.php';
require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoEndPoint.php';
require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoCallDataRawWrapper.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/ServerSentEvent.php';


use Bartleby\Core\JsonResponse;
use Bartleby\mongo\MongoCallDataRawWrapper;
use Bartleby\Mongo\MongoEndPoint;
use Bartleby\Core\ServerSentEvent;
use MongoDB;
use MongoCollection;

final class SSETriggersCallData extends MongoCallDataRawWrapper {

    const spaceUID = 'spaceUID';

    const lastIndex = 'lastIndex';

    const  runUID = 'runUID';

    const showDetails ='showDetails';

}

final class SSETriggers extends MongoEndPoint {

    private $_counter = 0;

    /* @var \MongoDB */
    private $_db;

    /* @var MongoCollection */
    private  $_triggers;

    private $_lastIndex = -1;

    private $_spaceUID = NULL;

    private $_runUID = NULL;

    private $_showDetails = false;

    function GET(SSETriggersCallData $parameters) {

        $s=$this;

        $this->_lastIndex = $parameters->getValueForKey(SSETriggersCallData::lastIndex);
        if (!isset($this->_lastIndex)){
            $this->_lastIndex = -1;
        }
        $this->_spaceUID = $parameters->getValueForKey(SSETriggersCallData::spaceUID);
        $this->_runUID = $parameters->getValueForKey(SSETriggersCallData::runUID);

        if ($parameters->keyExists(SSETriggersCallData::showDetails)){
           $showDetailsValue = $parameters->getValueForKey(SSETriggersCallData::showDetails);
            $this->_showDetails = (strtolower($showDetailsValue)=='true');
        }

        $this->_db=$this->getDB();
        $this->_triggers=$this->_db->triggers;

        // Creation of the SSE
        $sse = new ServerSentEvent(60*60); // 1 time per second

        // Definition of the closure
        $f=function() use ($s,$sse,$parameters) {

            try {

                $q = array();
                $q ['index'] = array(
                    '$gte' => $this->_lastIndex + 1
                );
                // Filter by SpaceUID.
                if (isset($this->_spaceUID)) {
                    $q['spaceUID'] = $this->_spaceUID;
                }

                // Filter by runUID (is essential to prevent data larsen).
                if (isset($this->_runUID)) {
                    $q ['runUID'] = [
                        // Not equal
                        '$ne' => $this->_runUID
                    ];
                }

                $cursor = $this->_triggers->find($q);
                foreach ($cursor as $trigger) {
                    $serverTime = time();
                    $this->_counter++;
                    $this->_lastIndex = $trigger['index'];
                    $sender = $trigger['senderUID'];
                    $runUID = $trigger['runUID'];
                    $origin = $trigger['origin'];
                    $action = $trigger['action'];
                    $uids = $trigger['UIDS'];
                    $collectionName = $trigger['collectionName'];
                    $dataSpace = $trigger['spaceUID'];
                    if ($this->_showDetails == false) {
                        // Used by clients
                        $sse->sendMsg($serverTime, 'relay', '{"i":' . $this->_lastIndex . ',"d":"' . $dataSpace . '","r":"' . $runUID . '","c":"' . $collectionName . '","a":"' . $action . '","u":"' . $uids . '"}');
                    } else {
                        // Used to display the trigger
                        $sse->sendMsg($serverTime, 'relay', '{"i":' . $this->_lastIndex . ',"d":"' . $dataSpace . '","r":"' . $runUID . '","c":"' . $collectionName . '","s":"' . $sender . '","o":"' . $origin . '","a":"' . $action . '","u":"' . $uids . '"}');
                    }
                }

            } catch (\Exception $e) {
                $serverTime = time();
                $result=["e"=>$e->getMessage()];
                $sse->sendMsg($serverTime, 'exception', json_encode($result));
            }

        };

        $sse->callBack=$f;
        return $sse;
    }

    function encodeTrigger($trigger){
        $jsonEncoded=json_encode($trigger);
        return str_replace('"','',$jsonEncoded);
    }

}

#BMS#->{"filename":"TriggerAfterIndex.php","checksum":3122045175,"relativePath":"Bartleby\/Commons\/EndPoints\/TriggerAfterIndex.php","size":2339}<-#BME#
<?php

namespace Bartleby\EndPoints;

require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoEndPoint.php';
require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoCallDataRawWrapper.php';

use Bartleby\Mongo\MongoEndPoint;
use Bartleby\Mongo\MongoCallDataRawWrapper;
use Bartleby\Core\JsonResponse;
use \MongoCollection;

class  TriggerAfterIndexsCallData extends MongoCallDataRawWrapper {
    const lastIndex = 'lastIndex';
}

class  TriggerAfterIndex extends MongoEndPoint {

    function call(TriggerAfterIndexCallData $parameters) {
        $db = $this->getDB();
        /* @var \MongoCollection */

        $lastIndex = $parameters->getValueForKey(SSETriggersCallData::lastIndex);
        if (!isset($lastIndex)) {
            return new JsonResponse("lastIndex is undefined", 412);
        }

        $collection = $db->triggers;

        $q ['index'] = [
            '$gte' => ($lastIndex + 1)
        ];

        ////////////////////////////////////////////
        // SpaceUID confinement and runUID eviction
        ////////////////////////////////////////////
        try {
            // Restrict to this spaceUID
            $q['spaceUID'] = $this->getSpaceUID();
        } catch (\Exception $e) {
            return new JsonResponse("spaceUID is undefined", 412);
        }
        try {
            // Filter owned Triggers
            $q ['runUID'] = [
                // Not equal
                '$ne' => $this->getRunUID()
            ];
        } catch (\Exception $e) {
            return new JsonResponse("runUID is undefined", 412);
        }

        try {
            $r = array();
            $cursor = $collection->find($q);
            // Sort ?
            if ($cursor->count(TRUE) > 0) {
                foreach ($cursor as $obj) {
                    $r[] = $obj;
                }
            }

            if (count($r) > 0) {
                return new JsonResponse($r, 200);
            } else {
                return new JsonResponse(VOID_RESPONSE, 404);
            }
        } catch (\Exception $e) {
            return new JsonResponse(['code' => $e->getCode(),
                'message' => $e->getMessage(),
                'file' => $e->getFile(),
                'line' => $e->getLine(),
                'trace' => $e->getTraceAsString()
            ],
                417
            );
        }
    }
}

?>#BMS#->{"filename":"TriggerForIndexes.php","checksum":2983913061,"relativePath":"Bartleby\/Commons\/EndPoints\/TriggerForIndexes.php","size":2594}<-#BME#
<?php

namespace Bartleby\EndPoints;

require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoEndPoint.php';
require_once BARTLEBY_PUBLIC_FOLDER . 'Configuration.php';

use Bartleby\Mongo\MongoEndPoint;
use Bartleby\Mongo\MongoCallDataRawWrapper;
use Bartleby\Core\JsonResponse;
use \MongoCollection;
use Bartleby\Configuration;

class  TriggerForIndexesCallData extends MongoCallDataRawWrapper {
    const indexes='ids';
    const ignoreHoles='ignoreHoles';
}

class  TriggerAfterIndex extends MongoEndPoint {

    function call(TriggerForIndexesCallData $parameters) {
        $db=$this->getDB();
        /* @var \MongoCollection */
        $collection = $db->triggers;
        $indexes=$parameters->getValueForKey(TriggerForIndexesCallData::indexes);
        $ignoreHoles=$parameters->getValueForKey(TriggerForIndexesCallData::ignoreHoles);

        // TODO support ignoreHoles

        if(isset ($indexes) && is_array($indexes) && count($indexes)){

            $q = array( 'indexes'=>array( '$in' => $indexes ));

            ////////////////////////////////////////////
            // SpaceUID confinement and runUID eviction
            ////////////////////////////////////////////

            try {
                // Restrict to this spaceUID
                $q['spaceUID'] = $this->getSpaceUID();
            } catch (\Exception $e) {
                return new JsonResponse("spaceUID is undefined", 412);
            }
            try {
                // Filter owned Triggers
                $q ['runUID'] = [
                    // Not equal
                    '$ne' => $this->getRunUID()
                ];
            } catch (\Exception $e) {
                return new JsonResponse("runUID is undefined", 412);
            }

        }else{
            return new JsonResponse(VOID_RESPONSE,204);
        }
        try {
            
            $r=array();
            $cursor = $collection->find($q);
            if ($cursor->count ( TRUE ) > 0) {
                foreach ( $cursor as $obj ) {
                    $r[] = $obj;
                }
            }
            if (count($r)>0 ) {
                return new JsonResponse($r,200);
            } else {
                return new JsonResponse(VOID_RESPONSE,404);
            }
        } catch ( \Exception $e ) {
            return new JsonResponse( array ('code'=>$e->getCode(),
                'message'=>$e->getMessage(),
                'file'=>$e->getFile(),
                'line'=>$e->getLine(),
                'trace'=>$e->getTraceAsString()
            ),
                417
            );
        }
    }
}

?>#BMS#->{"filename":"TriggersByIds.php","checksum":1386792737,"relativePath":"Bartleby\/Commons\/EndPoints\/TriggersByIds.php","size":2505}<-#BME#
<?php

namespace Bartleby\EndPoints;

require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoEndPoint.php';
require_once BARTLEBY_PUBLIC_FOLDER . 'Configuration.php';

use Bartleby\Mongo\MongoEndPoint;
use Bartleby\Mongo\MongoCallDataRawWrapper;
use Bartleby\Core\JsonResponse;
use \MongoCollection;
use Bartleby\Configuration;

class  TriggersByIdsCallData extends MongoCallDataRawWrapper {
    const ids = 'ids';
}

class  TriggersByIds extends MongoEndPoint {

    function call(TriggersByIdsCallData $parameters) {
        $db = $this->getDB();
        /* @var \MongoCollection */
        $collection = $db->triggers;
        $ids = $parameters->getValueForKey(TriggersByIdsCallData::ids);
        if (isset ($ids) && is_array($ids) && count($ids)) {
            $q = array('_id' => array('$in' => $ids));

            ////////////////////////////////////////////
            // SpaceUID confinement and runUID eviction
            ////////////////////////////////////////////

            try {
                // Restrict to this spaceUID
                $q['spaceUID'] = $this->getSpaceUID();
            } catch (\Exception $e) {
                return new JsonResponse("spaceUID is undefined", 412);
            }
            try {
                // Filter owned Triggers
                $q ['runUID'] = [
                    // Not equal
                    '$ne' => $this->getRunUID()
                ];
            } catch (\Exception $e) {
                return new JsonResponse("runUID is undefined", 412);
            }


        } else {
            return new JsonResponse(VOID_RESPONSE, 204);
        }

        ////////////////////////////////////////////
        // Query
        ////////////////////////////////////////////

        try {
            $r = array();
            $cursor = $collection->find($q);
            if ($cursor->count(TRUE) > 0) {
                foreach ($cursor as $obj) {
                    $r[] = $obj;
                }
            }

            if (count($r) > 0) {
                return new JsonResponse($r, 200);
            } else {
                return new JsonResponse(VOID_RESPONSE, 404);
            }
        } catch (\Exception $e) {
            return new JsonResponse(['code' => $e->getCode(),
                'message' => $e->getMessage(),
                'file' => $e->getFile(),
                'line' => $e->getLine(),
                'trace' => $e->getTraceAsString()
            ],
                417
            );
        }
    }
}

?>#BMS#->{"filename":"VerifyLocker.php","checksum":1184131196,"relativePath":"Bartleby\/Commons\/EndPoints\/VerifyLocker.php","size":3704}<-#BME#
<?php

namespace Bartleby\EndPoints;
require_once BARTLEBY_ROOT_FOLDER. 'Mongo/MongoEndPoint.php';
require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoCallDataRawWrapper.php';

use Bartleby\mongo\MongoCallDataRawWrapper;
use Bartleby\Mongo\MongoEndPoint;
use Bartleby\Core\JsonResponse;
use Bartleby\Models\User;
use \MongoCursorException;
use \MongoClient;
use Bartleby\Configuration;

final class VerifyLockerCallData extends MongoCallDataRawWrapper {

    /**
     * The locker UID
     */
    const lockerUID = 'lockerUID';

    /**
     * The sent code should be allways salted with the shared salt key client side.
     * You should never transmit or store clear codes.
     */
    const code = 'code';


}

final class VerifyLocker extends MongoEndPoint{

    function POST(VerifyLockerCallData $parameters) {

        $currentLockerUID = $parameters->getValueForKey(VerifyLockerCallData::lockerUID);
        $proposedCode = $parameters->getValueForKey(VerifyLockerCallData::code);

        $db=$this->getDB();
        /* @var \MongoCollection */
        $collection = $db->lockers;
        if (!isset($currentLockerUID)){
            return new JsonResponse('Query is void',412);
        }
        $q = array ('_id' =>$currentLockerUID);
        try {
            $locker = $collection->findOne($q);
            if (isset($locker)) {
                if (array_key_exists('userUID',$locker) &&
                    array_key_exists('code',$locker)&&
                    array_key_exists('startDate',$locker)&&
                    array_key_exists('endDate',$locker)){
                    $userUID=$locker['userUID'];
                    // We should be able to grab the current user
                    // The verification require a valid logged user
                    $currentUser=$parameters->getCurrentUser();
                    if (array_key_exists('_id',$currentUser)){
                        // User UID
                        if ($currentUser['_id']==$userUID){
                            // CODE
                            $code=$locker['code'];
                            if ($proposedCode!=$code){
                                return new JsonResponse('Code Missmatch',401);
                            }
                            // TIME
                            $startDate=new \DateTime($locker['startDate']);
                            $endDate=new \DateTime($locker['endDate']);
                            $now=new \DateTime('now');
                            if ($now->getTimestamp() > $startDate->getTimestamp() &&
                                $now->getTimestamp() < $endDate->getTimestamp()){
                                return new JsonResponse($locker,200);
                            }else{
                                return new JsonResponse('Locker is not actually usable (date issue)',401);
                            }
                        }else{
                            return new JsonResponse('User UID missmatch', 403);
                        }
                    }else {
                        return new JsonResponse('Current user is not valid', 412);
                    }
                }else{
                    return new JsonResponse('Found Locker is not valid',401);
                }
            } else {
                return new JsonResponse(VOID_RESPONSE,404);
            }
        } catch ( \Exception $e ) {
            return new JsonResponse( array ('code'=>$e->getCode(),
                'message'=>$e->getMessage(),
                'file'=>$e->getFile(),
                'line'=>$e->getLine(),
                'trace'=>$e->getTraceAsString()
            ),
                417
            );
        }

    }



}#BMS#->{"filename":"FilterCollectionOfEntityPasswordsRemover.php","checksum":416266611,"relativePath":"Bartleby\/Commons\/Filters\/FilterCollectionOfEntityPasswordsRemover.php","size":1194}<-#BME#
<?php

namespace Bartleby\Filters;

require_once dirname(dirname(__DIR__)) . '/Core/IFilter.php';
require_once dirname(dirname(__DIR__)). '/Core/KeyPath.php';

use Bartleby\Core\IFilter;
use Bartleby\Core\KeyPath;


class FilterCollectionOfEntityPasswordsRemover implements IFilter {

    /**
     * You should set the relevant keyPath if necessary
     * @var string
     */
    var $iterableCollectionKeyPath=NULL;

    /**
     * You should set the relevant keyPath if necessary
     * @var string
     */
    var $passwordKeyPath="password";


    function filterData($data){
        if (isset($data)){
            if(isset($this->iterableCollectionKeyPath)){
                $collection=KeyPath::valueForKeyPath($data,$this->iterableCollectionKeyPath);
            }else{
                $collection=$data;
            }
            if (isset($collection) && is_array($collection)){
                foreach ($collection as &$entity) {
                    KeyPath::setValueByReferenceForKeyPath($entity,$this->passwordKeyPath,"");
                }
                // Return the filtered collection
                return $collection;
            }
        }
        return $data;
    }


}#BMS#->{"filename":"FilterEntityPasswordRemover.php","checksum":1564614970,"relativePath":"Bartleby\/Commons\/Filters\/FilterEntityPasswordRemover.php","size":582}<-#BME#
<?php

namespace Bartleby\Filters;

require_once dirname(dirname(__DIR__)) . '/Core/IFilter.php';
require_once dirname(dirname(__DIR__)) . '/Core/KeyPath.php';

use Bartleby\Core\IFilter;
use Bartleby\Core\KeyPath;

class FilterEntityPasswordRemover implements IFilter {

    /**
     * You should set the relevant key if necessary
     * @var string
     */
    var $passwordKeyPath="password";

    function filterData($data){
        if (isset($data)){
            KeyPath::setValueByReferenceForKeyPath($data,$this->passwordKeyPath,"");
        }
        return $data;
    }


}#BMS#->{"filename":"FilterHookByClosure.php","checksum":393212266,"relativePath":"Bartleby\/Commons\/Filters\/FilterHookByClosure.php","size":800}<-#BME#
<?php

namespace Bartleby\Filters;

require_once dirname(dirname(__DIR__)) . '/Core/IFilter.php';

use Closure;
use Bartleby\Core\IFilter;


/**
 * Class FilterHookByClosure
 *  Allows to filter data using a closure.
 * @package Bartleby\Filters
 */
class FilterHookByClosure implements IFilter {

    /* @var $closure Closure */
    var $closure;

    function filterData($data){
        if (isset($data)){
            if(isset($this->closure) && $this->_is_closure($this->closure)){
                return  $this->closure->__invoke($data);
            }else{
                throw new \Exception("Closure expected in FilterHookByClosure");
            }
        }
        return $data;
    }

    private function _is_closure($t) {
        return is_object($t) && ($t instanceof Closure);
    }


}#BMS#->{"filename":"UpdateUser.php","checksum":3463455225,"relativePath":"Bartleby\/Commons\/Overloads\/EndPoints\/UpdateUser.php","size":2182}<-#BME#
<?php

namespace Bartleby\EndPoints\Overloads;

require_once BARTLEBY_ROOT_FOLDER.'Commons/_generated/EndPoints/UpdateUser.php';

use Bartleby\Core\KeyPath;
use Bartleby\Core\CallDataRawWrapper;
use Bartleby\EndPoints\UpdateUserCallData;
use Bartleby\Core\JsonResponse;

class UpdateUser extends \Bartleby\EndPoints\UpdateUser {

    function call(UpdateUserCallData $parameters) {
        $spaceUID=$this->getSpaceUID();
        $user=$parameters->getValueForKey(UpdateUserCallData::user);
        $userID=KeyPath::valueForKeyPath($user,"_id");
        $foundSpaceUID=KeyPath::valueForKeyPath($user,SPACE_UID_KEY);

        if($foundSpaceUID!=$spaceUID){
            return new JsonResponse('Attempt to move a user to another Dataspace has been blocked by'.__FILE__,403);
        }
        
        ////////////////////////////////
        // VERIFY THE PREVIOUS SPACEUID
        /////////////////////////////////
        
        $db=$this->getDB();
        /* @var \MongoCollection */
        $collection = $db->users;
        $q = array ('_id' =>$userID);
        if (isset($q)&& count($q)>0){
        }else{
            return new JsonResponse('Query is void',412);
        }
        try {
            $r = $collection->findOne($q);
            if (isset($r)) {
       
                $previousSpaceUID=KeyPath::valueForKeyPath($r,SPACE_UID_KEY);
                if($previousSpaceUID!=$spaceUID){
                    return new JsonResponse('Attempt to move a user to another Dataspace has been blocked by'.__FILE__,403);
                }
                ///////////////////////////
                // CALL THE PARENT LOGIC
                ///////////////////////////
                
                return parent::call($parameters);
            } else {
                return new JsonResponse(VOID_RESPONSE,404);
            }
        } catch ( \Exception $e ) {
            return new JsonResponse( array ('code'=>$e->getCode(),
                'message'=>$e->getMessage(),
                'file'=>$e->getFile(),
                'line'=>$e->getLine(),
                'trace'=>$e->getTraceAsString()
            ),
                417
            );
        }



    }

}#BMS#->{"filename":"UpdateUsers.php","checksum":755355300,"relativePath":"Bartleby\/Commons\/Overloads\/EndPoints\/UpdateUsers.php","size":1084}<-#BME#
<?php

namespace Bartleby\EndPoints\Overloads; // (!) Important  

require_once BARTLEBY_ROOT_FOLDER.'Commons/_generated/EndPoints/UpdateUsers.php';

use Bartleby\Core\KeyPath;
use Bartleby\Core\CallDataRawWrapper;
use Bartleby\EndPoints\UpdateUsersCallData;

class UpdateUsers extends \Bartleby\EndPoints\UpdateUsers {

    function call(UpdateUsersCallData $parameters) {
        $spaceUID=$this->getSpaceUID();
        $users=$arrayOfObject=$parameters->getValueForKey(UpdateUsersCallData::users);
        foreach ($users as $user) {
            $foundSpaceUID=KeyPath::valueForKeyPath($user,SPACE_UID_KEY);
            if($foundSpaceUID!=$spaceUID){
                return new JsonResponse('Attempt to move a user to another Dataspace has been blocked by'.__FILE__,403);
            }
        }

        ////////////////////////////////
        // VERIFY THE PREVIOUS SPACEUID ?
        /////////////////////////////////

        // We currently donnot verify previous UID has the Multi update requires super admins privileges.


        return parent::call($parameters);
    }

}#BMS#->{"filename":"Bootstrap3XPage.php","checksum":4195849294,"relativePath":"Bartleby\/Commons\/Pages\/Bootstrap3XPage.php","size":4977}<-#BME#
<?php

namespace Bartleby\Commons\Pages;

require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoHTML5Page.php';
require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoCallDataRawWrapper.php';

use Bartleby\Core\HTMLResponse;
use Bartleby\mongo\MongoCallDataRawWrapper;
use Bartleby\Mongo\MongoHTML5Page;


/**
 * Class Bootstrap3XPage
 *
 * A base page class with all the required resources to be able to use Bootstrap 3.X
 * You should expose a www/static/css/style.css
 * @package Bartleby\Commons\Pages
 */
abstract class Bootstrap3XPage extends MongoHTML5Page{

    /////////////////////////
    //
    // * PAGE LAYOUT *
    //
    // <head>
    //   <!-- metas -->
    // </head>
    // <body>
    //  <!--mainContent-->
    //  <!--scripts -->
    // </body>
    //
    //////////////////////////

    protected $_useCdn=false;

    /***
     * Setup method is called
     */
    function setup(){
        $this->_addJQuery();
        $this->_addBootstrapJS();
    }


    /**
     * Returns the global HTML5 response
     * @return HTMLResponse
     */
    function getDocument() {
        $this->setup();
        $r=new HTMLResponse();
        $r->statusCode=200;
        $r->document='<!DOCTYPE html>
<html lang="'.$this->_lang.'">
  <head>
    <meta charset="'.$this->_charset.'">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->
    '.$this->_metas().'
    <title>'.$this->_title.'</title>'
            .$this->_BootStrap()
            .$this->_top_scripts().'
    <!-- CSS -->'
            .$this->_CSSLink()
            .$this->_IE_Block().
            '
  </head>
  <body>
  <!--main content -->'
            .$this->mainContent().'
  <!-scripts-->'
            .$this->_bottom_scripts() .'
  </body>
</html>';

        return $r;
    }

    /***
     * Called to render the main content.
     * @return string
     */
    function mainContent(){
        return '';
    }


    ////////////////
    // JS and CSS
    ////////////////


    private  function _addBootstrapJS(){
        if ($this->_useCdn==true){
            $this->addTopScript('
        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/js/bootstrap.min.js" integrity="sha384-0mSbJDEHialfmuBBQP6A4Qrprq5OVfW37PRR3j5ELqxss1yVqOtnepnHVP9aJ7xS" crossorigin="anonymous"></script>');
        }else{
            $this->addTopScript('
    <script src="'.$this->absoluteUrl('static/vendors/bootstrap/3.3.6/js/bootstrap.min.js').'"></script>');
        }
    }


    private  function _addJQuery(){
        if ($this->_useCdn==true){
            $this->addTopScript('
    <!-- jQuery (necessary for Bootstrap\'s JavaScript plugins) -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>');
        }else{
            $this->addTopScript('
    <!-- jQuery (necessary for Bootstrap\'s JavaScript plugins) -->
    <script src="'.$this->absoluteUrl('static/vendors/jquery/jquery-1.12.4.min.js').'"></script>');
        }
    }

    private  function _IE_Block() {
        if ($this->_useCdn == true) {
            return '
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn\'t work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->';
        } else {
            return '
    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->
    <!-- WARNING: Respond.js doesn\'t work if you view the page via file:// -->
    <!--[if lt IE 9]>
      <script src="' . $this->absoluteUrl('static/vendors/html5shiv/3.7.3/html5shiv.min.js') . '"></script>
      <script src="' . $this->absoluteUrl('static/vendors/respond/1.4.2/html5shiv.min.js') . '"></script>
    <![endif]-->';
        }
    }

    /**
     * @return string return a CDN link for bootstrap
     */
    private function _BootStrap(){
        if ($this->_useCdn==true){
            return'
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css" integrity="sha384-1q8mTJOASx8j1Au+a5WDVnPi2lkFfwwEAa8hDDdjZlpLegxhjVME1fgjWPGmkzs7" crossorigin="anonymous">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap-theme.min.css" integrity="sha384-fLW2N01lMqjakBkx3l/M9EahuwpSfeNvV63J5ezn3uZzapT0u7EYsXMjQV+0En5r" crossorigin="anonymous">';
        }else{
            return'
    <link rel="stylesheet" href="'.$this->absoluteUrl('static/vendors/bootstrap/3.3.6/css/bootstrap.min.css').'">
    <link rel="stylesheet" href="'.$this->absoluteUrl('static/vendors/bootstrap/3.3.6/css/bootstrap-theme.min.css').'">';
        }
    }

}#BMS#->{"filename":"PostInstaller.php","checksum":3842710519,"relativePath":"Bartleby\/Commons\/Tools\/PostInstaller.php","size":1160}<-#BME#
<?php
/**
 * Created by PhpStorm.
 * User: bpds
 * Date: 04/06/2016
 * Time: 07:52
 */

namespace Bartleby\Tools;

require_once BARTLEBY_PUBLIC_FOLDER . 'Configuration.php';

use \MongoClient;
use Bartleby\Core\Stages;

class PostInstaller {

    function logMessage($message=""){
        echo ($message."<br>\n");
    }

    /*@var MongoDb */
    protected $_db;

    function run($configuration){
        
        $this->logMessage ("");
        $this->logMessage ("Running Bartleby's POST INSTALLER");
        try {
            $this->logMessage("Connecting to MONGO");
            $m = new MongoClient();
        } catch (Exception $e) {
            $this->logMessage("Mongo client must be installed ". $e->getMessage());
        }
        $this->logMessage("Selecting the database  ".$configuration->MONGO_DB_NAME());
        $db = $m->selectDB($configuration->MONGO_DB_NAME());// Selecting  base

        // INDEXES

        $this->logMessage("Creating 'spaceUID' Index");
        $db->triggers->createIndex(array('spaceUID' => 1));
        $this->logMessage("Creating 'index'");
        $db->triggers->createIndex(array('index' => 1), array());
    }

}#BMS#->{"filename":"bartleby.json","checksum":152564510,"relativePath":"Bartleby\/Commons.flexions\/App\/datasources\/bartleby.json","size":216842}<-#BME#
{
    "bartleby-json-modeling": "1.0",
    "info": {
        "description": "This is Bartleby commons API",
        "version": "0.9.beta1",
        "title": "Bartleby",
        "license": {
            "name": "Proprietary",
            "url": "http://www.chaosmos.fr/license.html"
        }
    },
    "host": "pereira-da-silva.com/clients/lylo/",
    "basePath": "/api/v1",
    "tags": [],
    "schemes": [
        "https"
    ],
    "definitions": {
        "CollectionMetadatum": {
            "description": "Bartleby's Core: Collection Metadatum. Complete implementation in CollectionMetadatum",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "storage": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "CollectionMetadatum.Storage",
                            "description": "the used file storage",
                            "enum": [
                                "MonolithicFileStorage",
                                "SQLiteIncrementalStore"
                            ],
                            "default": ".MonolithicFileStorage",
                            "observable": false
                        },
                        "collectionName": {
                            "type": "string",
                            "description": "The holding collection name",
                            "default": "\\(Default.NO_NAME)",
                            "dynamic": false,
                            "observable": false
                        },
                        "proxy": {
                            "explicitType": "JObject",
                            "description": "The proxy object (not serializable, not observable)",
                            "dynamic": false,
                            "serializable": false,
                            "observable": false
                        },
                        "allowDistantPersistency": {
                            "type": "boolean",
                            "description": "Allow distant persistency?",
                            "default": "true",
                            "dynamic": false,
                            "observable": false
                        },
                        "inMemory": {
                            "type": "Boolean",
                            "description": "In Memory?",
                            "default": "true",
                            "dynamic": false,
                            "observable": false
                        },
                        "observableViaUID": {
                            "type": "string",
                            "description": "The observable UID",
                            "default": "\\(Default.NO_UID)",
                            "dynamic": true,
                            "observable": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "groupable": true
            }
        },
        "Task": {
            "description": "Bartleby's Commons A task (abstract)",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "group": {
                            "description": "The Task group. External reference to a TaskGroup instance",
                            "$ref": "#/definitions/ExternalReference",
                            "required": false,
                            "observable": false
                        },
                        "status": {
                            "type": "enum",
                            "instanceOf": "integer",
                            "emumPreciseType": "Task.Status",
                            "description": "Task Status",
                            "enum": [
                                "runnable",
                                "running",
                                "completed"
                            ],
                            "default": ".Runnable",
                            "observable": false
                        },
                        "parent": {
                            "description": "The Task parent. ",
                            "$ref": "#/definitions/ExternalReference",
                            "required": false,
                            "observable": false
                        },
                        "children": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "A collection of children Task external references (in the same group)",
                                    "$ref": "#/definitions/ExternalReference",
                                    "required": false,
                                    "default": "[ExternalReference]()",
                                    "dynamic": false,
                                    "observable": false
                                }
                            }
                        },
                        "progressionState": {
                            "schema": {
                                "description": "The progression state of the task",
                                "$ref": "#/definitions/Progression",
                                "observable": false
                            }
                        },
                        "completionState": {
                            "schema": {
                                "description": "The completion state of the task",
                                "$ref": "#/definitions/Completion",
                                "observable": false
                            }
                        },
                        "argumentsData": {
                            "type": "data",
                            "description": "The serialized arguments",
                            "observable": false,
                            "required": false,
                            "dynamic": false
                        },
                        "resultData": {
                            "type": "data",
                            "description": "The serialized result",
                            "required": false,
                            "dynamic": false,
                            "observable": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "persistsLocallyOnlyInMemory": false,
                "allowDistantPersistency": false,
                "undoable": false
            }
        },
        "TasksGroup": {
            "description": "Bartleby's TasksGroup its property are not autocommitted (not observable)",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "document": {
                            "explicitType": "BartlebyDocument",
                            "description": "A non serializable reference to the hosting document",
                            "dynamic": false,
                            "serializable": false,
                            "observable": false
                        },
                        "status": {
                            "type": "enum",
                            "instanceOf": "integer",
                            "emumPreciseType": "TasksGroup.Status",
                            "description": "TasksGroup Status",
                            "enum": [
                                "paused",
                                "running"
                            ],
                            "default": ".Paused",
                            "observable": false
                        },
                        "priority": {
                            "type": "enum",
                            "instanceOf": "integer",
                            "emumPreciseType": "TasksGroup.Priority",
                            "description": "The priority is equal to the parent task.",
                            "enum": [
                                "Background",
                                "Low",
                                "Default",
                                "High"
                            ],
                            "default": ".Default",
                            "observable": false
                        },
                        "spaceUID": {
                            "type": "string",
                            "description": "The group dataspace",
                            "required": true,
                            "default": "\\(Default.NO_UID)",
                            "dynamic": false,
                            "observable": false
                        },
                        "tasks": {
                            "type": "array",
                            "items": {
                                "description": "The root group Tasks (external references)",
                                "$ref": "#/definitions/ExternalReference",
                                "required": false,
                                "default": "[ExternalReference]()",
                                "observable": false,
                                "dynamic": false
                            }
                        },
                        "lastChainedTask": {
                            "description": "The last chained (sequential) task external reference. ",
                            "$ref": "#/definitions/ExternalReference",
                            "required": false,
                            "observable": false
                        },
                        "progressionState": {
                            "schema": {
                                "description": "The progression state of the group",
                                "$ref": "#/definitions/Progression",
                                "observable": false
                            }
                        },
                        "completionState": {
                            "schema": {
                                "description": "The completion state of the group",
                                "$ref": "#/definitions/Completion",
                                "observable": false
                            }
                        },
                        "name": {
                            "type": "string",
                            "description": "The group name",
                            "required": true,
                            "default": "\\(Default.NO_NAME)",
                            "dynamic": false,
                            "observable": false
                        },
                        "handlers": {
                            "explicitType": "Handlers",
                            "description": "A void handler to allow subscribers to register their own handlers",
                            "default": "Handlers.withoutCompletion()",
                            "dynamic": false,
                            "serializable": false,
                            "observable": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "persistsLocallyOnlyInMemory": false,
                "allowDistantPersistency": false,
                "undoable": false
            }
        },
        "Progression": {
            "description": "Bartleby's Commons: A progression state",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "currentTaskIndex": {
                            "type": "integer",
                            "description": "Index of the task",
                            "default": 0,
                            "required": true,
                            "dynamic": false
                        },
                        "totalTaskCount": {
                            "type": "integer",
                            "description": "Total number of tasks",
                            "default": 0,
                            "required": true,
                            "dynamic": false
                        },
                        "currentTaskProgress": {
                            "type": "double",
                            "description": "0 to 1",
                            "default": 0,
                            "required": true,
                            "dynamic": true
                        },
                        "message": {
                            "type": "string",
                            "description": "The Message",
                            "default": "",
                            "required": true,
                            "dynamic": true
                        },
                        "data": {
                            "type": "data",
                            "description": "The associated data",
                            "required": false,
                            "dynamic": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "Completion": {
            "description": "Bartleby's Commons: A completion state",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "success": {
                            "type": "boolean",
                            "description": "Success if set to true",
                            "default": "true",
                            "required": true,
                            "dynamic": false
                        },
                        "statusCode": {
                            "type": "integer",
                            "description": "The status",
                            "default": "CompletionStatus.Undefined.rawValue",
                            "required": true,
                            "dynamic": false
                        },
                        "message": {
                            "type": "string",
                            "description": "The Message",
                            "default": "",
                            "required": true,
                            "dynamic": false
                        },
                        "data": {
                            "type": "data",
                            "description": "completion data",
                            "required": false,
                            "dynamic": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "RegistryMetadata": {
            "description": "Bartleby's Core: Complete implementation in JRegistryMetadata. All its properties are not observable.",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "spaceUID": {
                            "type": "string",
                            "description": "The data space UID can be shared between multiple registries.",
                            "default": "\\(Default.NO_UID)",
                            "dynamic": true,
                            "observable": false
                        },
                        "currentUser": {
                            "schema": {
                                "description": "The user currently associated to the local instance of the registry",
                                "$ref": "#/definitions/User",
                                "observable": false,
                                "cryptable": false
                            }
                        },
                        "identificationMethod": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "RegistryMetadata.IdentificationMethod",
                            "description": "The identification method (By cookie or by Key - kvid)",
                            "enum": [
                                "Key",
                                "Cookie"
                            ],
                            "default": ".Key",
                            "observable": false
                        },
                        "identificationValue": {
                            "type": "string",
                            "description": "The current kvid identification value (injected in HTTP headers)",
                            "dynamic": false,
                            "observable": false
                        },
                        "rootObjectUID": {
                            "type": "string",
                            "description": "The rootObject UID",
                            "default": "\\(Default.NO_UID)",
                            "dynamic": true,
                            "observable": false
                        },
                        "collaborationServerURL": {
                            "type": "url",
                            "description": "The url of the collaboration server",
                            "dynamic": true,
                            "observable": false
                        },
                        "collectionsMetadata": {
                            "schema": {
                                "description": "The collection of CollectionMetadatum ",
                                "type": "array",
                                "items": {
                                    "description": "A collection of CollectionMetadatum",
                                    "explicitType": "CollectionMetadatum",
                                    "default": "[CollectionMetadatum]()",
                                    "dynamic": false,
                                    "observable": false
                                }
                            }
                        },
                        "online": {
                            "type": "boolean",
                            "description": "is the user performing Online",
                            "dynamic": true,
                            "default": "Bartleby.configuration.ONLINE_BY_DEFAULT",
                            "observable": false
                        },
                        "stateDictionary": {
                            "type": "dictionary",
                            "description": "The State dictionary to insure registry persistency ",
                            "default": "[String:AnyObject]()",
                            "dynamic": false,
                            "observable": false
                        },
                        "URLBookmarkData": {
                            "type": "dictionary",
                            "description": "The collection of serialized Security-Scoped Bookmarks (you should store NSData)",
                            "default": "[String:AnyObject]()",
                            "dynamic": false,
                            "observable": false
                        },
                        "saveThePassword": {
                            "type": "boolean",
                            "description": "Save the password or not?",
                            "default": "Bartleby.configuration.SAVE_PASSWORD_DEFAULT_VALUE",
                            "dynamic": true,
                            "observable": false
                        },
                        "assetsFolderURL": {
                            "type": "url",
                            "description": "The url of the assets folder",
                            "dynamic": false,
                            "observable": false
                        },
                        "triggersIndexes": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "A collection of trigger Indexes (used to detect data holes) the first entry should be equal to lastIntegratedTriggerIndex",
                                    "instanceOf": "integer",
                                    "default": "[Int]()",
                                    "dynamic": false,
                                    "observable": false
                                }
                            }
                        },
                        "ownedTriggersIndexes": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "The persistentcollection of triggers indexes owned by the current user (allows local distinctive analytics even on cloned documents)",
                                    "instanceOf": "integer",
                                    "default": "[Int]()",
                                    "dynamic": false,
                                    "observable": false
                                }
                            }
                        },
                        "missingTriggersIndexes": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "A collection of trigger Indexes that are missings (data holes)",
                                    "instanceOf": "integer",
                                    "default": "[Int]()",
                                    "dynamic": false,
                                    "observable": false
                                }
                            }
                        },
                        "lastIntegratedTriggerIndex": {
                            "type": "integer",
                            "description": "The index of the last trigger that has been integrated",
                            "default": -1,
                            "dynamic": false,
                            "observable": false
                        },
                        "receivedTriggers": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "A collection Triggers that are temporarly stored before integration",
                                    "$ref": "#/definitions/Trigger",
                                    "default": "[Trigger]()",
                                    "dynamic": false,
                                    "observable": false
                                }
                            }
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "User": {
            "description": "Bartleby's Core: a user in a specified data Space",
            "allOf": [
                {
                    "type": "object",
                    "required": [
                        "spaceUID",
                        "phoneNumber",
                        "password"
                    ],
                    "properties": {
                        "spaceUID": {
                            "type": "string",
                            "description": "The spaceUID. A user with the same credentials can exists within multiple Data space.",
                            "default": "\\(Bartleby.createUID())"
                        },
                        "verificationMethod": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "User.VerificationMethod",
                            "description": "the verification method",
                            "enum": [
                                "None",
                                "ByPhoneNumber",
                                "ByEmail"
                            ],
                            "default": ".ByPhoneNumber"
                        },
                        "firstname": {
                            "type": "string",
                            "default": "\\(Bartleby.randomStringWithLength(5))"
                        },
                        "lastname": {
                            "type": "string",
                            "default": "\\(Bartleby.randomStringWithLength(5))"
                        },
                        "email": {
                            "description": "The user's email. Can be the secondary Identification source ",
                            "type": "string"
                        },
                        "phoneNumber": {
                            "description": "The user's phone number. Can be the secondary Identification source ",
                            "type": "string"
                        },
                        "password": {
                            "description": "The hashed version of the user password",
                            "type": "string",
                            "default": "\\(Bartleby.randomStringWithLength(8,signs:Bartleby.configuration.PASSWORD_CHAR_CART))",
                            "cryptable": false
                        },
                        "activationCode": {
                            "description": "An activation code",
                            "type": "string",
                            "default": "\\(Bartleby.randomStringWithLength(8,signs:Bartleby.configuration.PASSWORD_CHAR_CART))"
                        },
                        "status": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "User.Status",
                            "description": "User Status",
                            "enum": [
                                "new",
                                "actived",
                                "suspended"
                            ],
                            "default": ".New"
                        },
                        "tags": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "The user Tags. External reference to Tags instances",
                                    "$ref": "#/definitions/ExternalReference",
                                    "required": true,
                                    "default": "[ExternalReference]()"
                                }
                            }
                        },
                        "groups": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "description": "The user Groups. External reference to Group instances",
                                    "$ref": "#/definitions/ExternalReference",
                                    "required": true,
                                    "default": "[ExternalReference]()"
                                }
                            }
                        },
                        "notes": {
                            "type": "string",
                            "description": "Notes"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "groupable": false
            }
        },
        "Locker": {
            "description": "Bartleby's Core: a locker",
            "allOf": [
                {
                    "type": "object",
                    "required": [
                        "spaceUID",
                        "username",
                        "password"
                    ],
                    "properties": {
                        "spaceUID": {
                            "type": "string",
                            "description": "The spaceUID is the data space UID."
                        },
                        "subjectUID": {
                            "description": "The subject UID you want to lock",
                            "type": "string",
                            "default": "\\(Default.NO_UID)"
                        },
                        "userUID": {
                            "description": "The userUID that can unlock the locker",
                            "type": "string",
                            "default": "\\(Default.NO_UID)"
                        },
                        "mode": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "Locker.Mode",
                            "description": "the locker mode",
                            "enum": [
                                "AutoDestructive",
                                "Persistent"
                            ],
                            "default": ".AutoDestructive"
                        },
                        "verificationMethod": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "Locker.VerificationMethod",
                            "description": "the locker mode",
                            "enum": [
                                "Online",
                                "Offline"
                            ],
                            "default": ".Online"
                        },
                        "code": {
                            "description": "This code should be crypted / decrypted",
                            "type": "string",
                            "default": "\\(Bartleby.randomStringWithLength(6,signs:\"0123456789ABCDEFGHJKMNPQRZTUVW\"))"
                        },
                        "numberOfAttempt": {
                            "description": "The number of attempts",
                            "type": "integer",
                            "default": 3
                        },
                        "startDate": {
                            "type": "date",
                            "definition": "the starting date. If Locker.verifyed.online The server date will be used as reference",
                            "default": "NSDate.distantPast()"
                        },
                        "endDate": {
                            "type": "date",
                            "definition": "the ending date. If Locker.verifyed.online The server date will be used as reference",
                            "default": "NSDate.distantFuture()"
                        },
                        "cake": {
                            "description": "This cake will be return on success",
                            "type": "string",
                            "default": "\\(Default.NO_CAKE)"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "groupable": false
            }
        },
        "Group": {
            "description": "Bartleby's Core: a group of user",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "creationDate": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "color": {
                            "type": "string"
                        },
                        "icon": {
                            "type": "string"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "groupable": false
            }
        },
        "ExternalReference": {
            "description": "Bartleby's Core: an ExternalReference stores all the necessary data to find a unique resource.",
            "allOf": [
                {
                    "type": "object",
                    "required": [
                        "iUID"
                    ],
                    "properties": {
                        "iUID": {
                            "description": "The UID of the referred instance",
                            "type": "string",
                            "default": "\\(Default.NO_UID)"
                        },
                        "iTypeName": {
                            "description": "The typeName of the referred instance",
                            "type": "string",
                            "default": "\\(Default.NO_UID)"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "Operation": {
            "description": "Bartleby's Core: an object used to provision serialized operation. All its properties are not observable",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "toDictionary": {
                            "description": "The dictionary representation of a serialized action call",
                            "type": "dictionary",
                            "observable": false
                        },
                        "responseDictionary": {
                            "description": "The dictionary representation of the last response serialized data",
                            "type": "dictionary",
                            "observable": false
                        },
                        "baseUrl": {
                            "definition": "The base url is stored to support operations shifting (from a server to another, from clients, ...)",
                            "type": "url",
                            "observable": false
                        },
                        "status": {
                            "type": "enum",
                            "instanceOf": "string",
                            "emumPreciseType": "Operation.Status",
                            "description": "The invocation Status",
                            "enum": [
                                "none",
                                "pending",
                                "inProgress",
                                "successful",
                                "unsucessful"
                            ],
                            "default": ".None",
                            "observable": false
                        },
                        "spaceUID": {
                            "type": "string",
                            "description": "The data space UID can be shared between multiple registries.",
                            "default": "\\(Default.NO_UID)",
                            "dynamic": true,
                            "observable": false
                        },
                        "counter": {
                            "description": "The invocation counter",
                            "type": "integer",
                            "observable": false
                        },
                        "creationDate": {
                            "description": "The creationdate",
                            "type": "date",
                            "observable": false
                        },
                        "lastInvocationDate": {
                            "description": "The last invocation date",
                            "type": "date",
                            "observable": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "persistsLocallyOnlyInMemory": false,
                "allowDistantPersistency": false,
                "undoable": false
            }
        },
        "Permission": {
            "description": "Bartleby's Core: a dynamic permission (Bartleby's base ACL is static)",
            "allOf": [
                {
                    "type": "object",
                    "required": [],
                    "properties": {
                        "callString": {
                            "type": "string",
                            "description": "The call string e.g : DeleteOperation->call",
                            "required": false,
                            "observable": true
                        },
                        "level": {
                            "type": "integer",
                            "description": "The level of the permission (check Bartleby's doc)",
                            "required": false,
                            "observable": true
                        },
                        "rule": {
                            "description": "The permission rule  (check Bartleby's doc)",
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "default": "[String]()"
                                }
                            },
                            "required": false,
                            "observable": true
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "persistsLocallyOnlyInMemory": false,
                "allowDistantPersistency": true,
                "undoable": false
            }
        },
        "Trigger": {
            "description": "Bartleby's Core: a Trigger encapsulates a bunch of ExternalReferencees that's modelizes a state transformation",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "index": {
                            "description": "The index is injected server side (each dataspace-registry) has it own counter)",
                            "type": "integer",
                            "format": "int64",
                            "observable": false,
                            "default": -1
                        },
                        "senderUID": {
                            "description": "The user.UID of the sender",
                            "type": "string",
                            "observable": false
                        },
                        "spaceUID": {
                            "description": "The dataSpace UID",
                            "type": "string",
                            "observable": false
                        },
                        "runUID": {
                            "description": "The UID of the instance of Bartleby client that has created the trigger.",
                            "type": "string",
                            "observable": false
                        },
                        "origin": {
                            "description": "The action that has initiated the trigger",
                            "type": "string",
                            "required": false,
                            "observable": false
                        },
                        "collectionName": {
                            "description": "The targetted collection name",
                            "type": "string",
                            "required": true,
                            "default": "",
                            "observable": false
                        },
                        "creationDate": {
                            "description": "The server side creation date ( informative, use index for ranking)",
                            "type": "date",
                            "required": false,
                            "observable": false
                        },
                        "action": {
                            "description": "The action name",
                            "type": "string",
                            "required": true,
                            "default": "",
                            "observable": false
                        },
                        "UIDS": {
                            "description": "A coma separated UIDS list",
                            "type": "string",
                            "required": true,
                            "default": "",
                            "observable": false
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false,
                "persistsLocallyOnlyInMemory": false,
                "allowDistantPersistency": false,
                "undoable": false,
                "groupable": false
            }
        },
        "Tag": {
            "description": "Bartleby's Core: a tag can be used to classify instances.",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "creationDate": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "color": {
                            "type": "string"
                        },
                        "icon": {
                            "type": "string"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "JString": {
            "description": "Bartleby's Core: String Primitive Wrapper. (Used for example to pass task Arguments)",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "string": {
                            "type": "string",
                            "description": "the embedded String"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        },
        "JData": {
            "description": "Bartleby's Core: Data Primitive Wrapper. (Used for example to pass task Arguments)",
            "allOf": [
                {
                    "type": "object",
                    "properties": {
                        "data": {
                            "type": "data",
                            "description": "the data"
                        }
                    }
                }
            ],
            "metadata": {
                "urdMode": false
            }
        }
    },
    "paths": {
        "/collectionMetadatum/{collectionMetadatumId}": {
            "get": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Find CollectionMetadatum by ID",
                "description": "Returns a single CollectionMetadatum",
                "operationId": "readCollectionMetadatumById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "collectionMetadatumId",
                        "in": "path",
                        "description": "The unique identifier the the of CollectionMetadatum",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/CollectionMetadatum"
                        }
                    },
                    "404": {
                        "description": "CollectionMetadatum not found"
                    }
                }
            }
        },
        "/collectionMetadatum": {
            "post": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Creates a new CollectionMetadatum to the system",
                "description": "",
                "operationId": "createCollectionMetadatum",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "collectionMetadatum",
                        "description": "The instance ofCollectionMetadatum that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CollectionMetadatum"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Update an existing CollectionMetadatum",
                "description": "",
                "operationId": "updateCollectionMetadatum",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "collectionMetadatum",
                        "description": "The CollectionMetadatum instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CollectionMetadatum"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "CollectionMetadatum not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Deletes a CollectionMetadatum",
                "description": "",
                "operationId": "deleteCollectionMetadatum",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "collectionMetadatumId",
                        "in": "path",
                        "description": "The identifier of the CollectionMetadatum to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid CollectionMetadatum value"
                    }
                }
            }
        },
        "/collectionMetadata": {
            "post": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Create collectionMetadata to the system",
                "description": "",
                "operationId": "createCollectionMetadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "collectionMetadata",
                        "description": "Collection of CollectionMetadatum that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CollectionMetadatum"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Find collectionMetadata by ID",
                "description": "Returns a collection of CollectionMetadatum",
                "operationId": "readCollectionMetadataByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the collectionMetadata to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CollectionMetadatum"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "CollectionMetadata not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Update an existing CollectionMetadatum",
                "description": "",
                "operationId": "updateCollectionMetadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "collectionMetadata",
                        "description": "Collection of CollectionMetadatum to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CollectionMetadatum"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "CollectionMetadata not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Deletes some collectionMetadata",
                "description": "",
                "operationId": "deleteCollectionMetadata",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of collectionMetadata to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid collectionMetadata value"
                    }
                }
            }
        },
        "/collectionMetadataByQuery": {
            "get": {
                "tags": [
                    "collectionMetadata"
                ],
                "summary": "Find collectionMetadata by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of CollectionMetadatum",
                "operationId": "readCollectionMetadataByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/CollectionMetadatum"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "CollectionMetadata not found"
                    }
                }
            }
        },
        "/task/{taskId}": {
            "get": {
                "tags": [
                    "tasks"
                ],
                "summary": "Find Task by ID",
                "description": "Returns a single Task",
                "operationId": "readTaskById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "description": "The unique identifier the the of Task",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    },
                    "404": {
                        "description": "Task not found"
                    }
                }
            }
        },
        "/task": {
            "post": {
                "tags": [
                    "tasks"
                ],
                "summary": "Creates a new Task to the system",
                "description": "",
                "operationId": "createTask",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "task",
                        "description": "The instance ofTask that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "tasks"
                ],
                "summary": "Update an existing Task",
                "description": "",
                "operationId": "updateTask",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "task",
                        "description": "The Task instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Task"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Task not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tasks"
                ],
                "summary": "Deletes a Task",
                "description": "",
                "operationId": "deleteTask",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "taskId",
                        "in": "path",
                        "description": "The identifier of the Task to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Task value"
                    }
                }
            }
        },
        "/tasks": {
            "post": {
                "tags": [
                    "tasks"
                ],
                "summary": "Create tasks to the system",
                "description": "",
                "operationId": "createTasks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "tasks",
                        "description": "Collection of Task that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Task"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "tasks"
                ],
                "summary": "Find tasks by ID",
                "description": "Returns a collection of Task",
                "operationId": "readTasksByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the tasks to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Task"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Tasks not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "tasks"
                ],
                "summary": "Update an existing Task",
                "description": "",
                "operationId": "updateTasks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "tasks",
                        "description": "Collection of Task to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Task"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Tasks not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tasks"
                ],
                "summary": "Deletes some tasks",
                "description": "",
                "operationId": "deleteTasks",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of tasks to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid tasks value"
                    }
                }
            }
        },
        "/tasksByQuery": {
            "get": {
                "tags": [
                    "tasks"
                ],
                "summary": "Find tasks by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Task",
                "operationId": "readTasksByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Task"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Tasks not found"
                    }
                }
            }
        },
        "/tasksGroup/{tasksGroupId}": {
            "get": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Find TasksGroup by ID",
                "description": "Returns a single TasksGroup",
                "operationId": "readTasksGroupById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tasksGroupId",
                        "in": "path",
                        "description": "The unique identifier the the of TasksGroup",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/TasksGroup"
                        }
                    },
                    "404": {
                        "description": "TasksGroup not found"
                    }
                }
            }
        },
        "/tasksGroup": {
            "post": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Creates a new TasksGroup to the system",
                "description": "",
                "operationId": "createTasksGroup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "tasksGroup",
                        "description": "The instance ofTasksGroup that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TasksGroup"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Update an existing TasksGroup",
                "description": "",
                "operationId": "updateTasksGroup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "tasksGroup",
                        "description": "The TasksGroup instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TasksGroup"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "TasksGroup not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Deletes a TasksGroup",
                "description": "",
                "operationId": "deleteTasksGroup",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tasksGroupId",
                        "in": "path",
                        "description": "The identifier of the TasksGroup to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid TasksGroup value"
                    }
                }
            }
        },
        "/tasksGroups": {
            "post": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Create tasksGroups to the system",
                "description": "",
                "operationId": "createTasksGroups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "tasksGroups",
                        "description": "Collection of TasksGroup that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TasksGroup"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Find tasksGroups by ID",
                "description": "Returns a collection of TasksGroup",
                "operationId": "readTasksGroupsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the tasksGroups to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TasksGroup"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "TasksGroups not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Update an existing TasksGroup",
                "description": "",
                "operationId": "updateTasksGroups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "tasksGroups",
                        "description": "Collection of TasksGroup to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TasksGroup"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "TasksGroups not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Deletes some tasksGroups",
                "description": "",
                "operationId": "deleteTasksGroups",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of tasksGroups to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid tasksGroups value"
                    }
                }
            }
        },
        "/tasksGroupsByQuery": {
            "get": {
                "tags": [
                    "tasksGroups"
                ],
                "summary": "Find tasksGroups by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of TasksGroup",
                "operationId": "readTasksGroupsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/TasksGroup"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "TasksGroups not found"
                    }
                }
            }
        },
        "/progression/{progressionId}": {
            "get": {
                "tags": [
                    "progressions"
                ],
                "summary": "Find Progression by ID",
                "description": "Returns a single Progression",
                "operationId": "readProgressionById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "progressionId",
                        "in": "path",
                        "description": "The unique identifier the the of Progression",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Progression"
                        }
                    },
                    "404": {
                        "description": "Progression not found"
                    }
                }
            }
        },
        "/progression": {
            "post": {
                "tags": [
                    "progressions"
                ],
                "summary": "Creates a new Progression to the system",
                "description": "",
                "operationId": "createProgression",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "progression",
                        "description": "The instance ofProgression that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Progression"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "progressions"
                ],
                "summary": "Update an existing Progression",
                "description": "",
                "operationId": "updateProgression",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "progression",
                        "description": "The Progression instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Progression"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Progression not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "progressions"
                ],
                "summary": "Deletes a Progression",
                "description": "",
                "operationId": "deleteProgression",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "progressionId",
                        "in": "path",
                        "description": "The identifier of the Progression to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Progression value"
                    }
                }
            }
        },
        "/progressions": {
            "post": {
                "tags": [
                    "progressions"
                ],
                "summary": "Create progressions to the system",
                "description": "",
                "operationId": "createProgressions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "progressions",
                        "description": "Collection of Progression that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Progression"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "progressions"
                ],
                "summary": "Find progressions by ID",
                "description": "Returns a collection of Progression",
                "operationId": "readProgressionsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the progressions to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Progression"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Progressions not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "progressions"
                ],
                "summary": "Update an existing Progression",
                "description": "",
                "operationId": "updateProgressions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "progressions",
                        "description": "Collection of Progression to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Progression"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Progressions not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "progressions"
                ],
                "summary": "Deletes some progressions",
                "description": "",
                "operationId": "deleteProgressions",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of progressions to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid progressions value"
                    }
                }
            }
        },
        "/progressionsByQuery": {
            "get": {
                "tags": [
                    "progressions"
                ],
                "summary": "Find progressions by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Progression",
                "operationId": "readProgressionsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Progression"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Progressions not found"
                    }
                }
            }
        },
        "/completion/{completionId}": {
            "get": {
                "tags": [
                    "completions"
                ],
                "summary": "Find Completion by ID",
                "description": "Returns a single Completion",
                "operationId": "readCompletionById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "completionId",
                        "in": "path",
                        "description": "The unique identifier the the of Completion",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Completion"
                        }
                    },
                    "404": {
                        "description": "Completion not found"
                    }
                }
            }
        },
        "/completion": {
            "post": {
                "tags": [
                    "completions"
                ],
                "summary": "Creates a new Completion to the system",
                "description": "",
                "operationId": "createCompletion",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "completion",
                        "description": "The instance ofCompletion that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Completion"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "completions"
                ],
                "summary": "Update an existing Completion",
                "description": "",
                "operationId": "updateCompletion",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "completion",
                        "description": "The Completion instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Completion"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Completion not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "completions"
                ],
                "summary": "Deletes a Completion",
                "description": "",
                "operationId": "deleteCompletion",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "completionId",
                        "in": "path",
                        "description": "The identifier of the Completion to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Completion value"
                    }
                }
            }
        },
        "/completions": {
            "post": {
                "tags": [
                    "completions"
                ],
                "summary": "Create completions to the system",
                "description": "",
                "operationId": "createCompletions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "completions",
                        "description": "Collection of Completion that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Completion"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "completions"
                ],
                "summary": "Find completions by ID",
                "description": "Returns a collection of Completion",
                "operationId": "readCompletionsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the completions to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Completion"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Completions not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "completions"
                ],
                "summary": "Update an existing Completion",
                "description": "",
                "operationId": "updateCompletions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "completions",
                        "description": "Collection of Completion to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Completion"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Completions not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "completions"
                ],
                "summary": "Deletes some completions",
                "description": "",
                "operationId": "deleteCompletions",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of completions to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid completions value"
                    }
                }
            }
        },
        "/completionsByQuery": {
            "get": {
                "tags": [
                    "completions"
                ],
                "summary": "Find completions by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Completion",
                "operationId": "readCompletionsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Completion"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Completions not found"
                    }
                }
            }
        },
        "/registryMetadata/{registryMetadataId}": {
            "get": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Find RegistryMetadata by ID",
                "description": "Returns a single RegistryMetadata",
                "operationId": "readRegistryMetadataById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "registryMetadataId",
                        "in": "path",
                        "description": "The unique identifier the the of RegistryMetadata",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/RegistryMetadata"
                        }
                    },
                    "404": {
                        "description": "RegistryMetadata not found"
                    }
                }
            }
        },
        "/registryMetadata": {
            "post": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Creates a new RegistryMetadata to the system",
                "description": "",
                "operationId": "createRegistryMetadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "registryMetadata",
                        "description": "The instance ofRegistryMetadata that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RegistryMetadata"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Update an existing RegistryMetadata",
                "description": "",
                "operationId": "updateRegistryMetadata",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "registryMetadata",
                        "description": "The RegistryMetadata instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/RegistryMetadata"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "RegistryMetadata not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Deletes a RegistryMetadata",
                "description": "",
                "operationId": "deleteRegistryMetadata",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "registryMetadataId",
                        "in": "path",
                        "description": "The identifier of the RegistryMetadata to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid RegistryMetadata value"
                    }
                }
            }
        },
        "/registryMetadatas": {
            "post": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Create registryMetadatas to the system",
                "description": "",
                "operationId": "createRegistryMetadatas",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "registryMetadatas",
                        "description": "Collection of RegistryMetadata that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RegistryMetadata"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Find registryMetadatas by ID",
                "description": "Returns a collection of RegistryMetadata",
                "operationId": "readRegistryMetadatasByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the registryMetadatas to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RegistryMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "RegistryMetadatas not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Update an existing RegistryMetadata",
                "description": "",
                "operationId": "updateRegistryMetadatas",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "registryMetadatas",
                        "description": "Collection of RegistryMetadata to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RegistryMetadata"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "RegistryMetadatas not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Deletes some registryMetadatas",
                "description": "",
                "operationId": "deleteRegistryMetadatas",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of registryMetadatas to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid registryMetadatas value"
                    }
                }
            }
        },
        "/registryMetadatasByQuery": {
            "get": {
                "tags": [
                    "registryMetadatas"
                ],
                "summary": "Find registryMetadatas by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of RegistryMetadata",
                "operationId": "readRegistryMetadatasByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RegistryMetadata"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "RegistryMetadatas not found"
                    }
                }
            }
        },
        "/user/{userId}": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Find User by ID",
                "description": "Returns a single User",
                "operationId": "readUserById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The unique identifier the the of User",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/user": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Creates a new User to the system",
                "description": "",
                "operationId": "createUser",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "user",
                        "description": "The instance ofUser that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update an existing User",
                "description": "",
                "operationId": "updateUser",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "user",
                        "description": "The User instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "User not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Deletes a User",
                "description": "",
                "operationId": "deleteUser",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The identifier of the User to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid User value"
                    }
                }
            }
        },
        "/users": {
            "post": {
                "tags": [
                    "users"
                ],
                "summary": "Create users to the system",
                "description": "",
                "operationId": "createUsers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "users",
                        "description": "Collection of User that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Find users by ID",
                "description": "Returns a collection of User",
                "operationId": "readUsersByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the users to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Users not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "users"
                ],
                "summary": "Update an existing User",
                "description": "",
                "operationId": "updateUsers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "users",
                        "description": "Collection of User to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Users not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "users"
                ],
                "summary": "Deletes some users",
                "description": "",
                "operationId": "deleteUsers",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of users to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid users value"
                    }
                }
            }
        },
        "/usersByQuery": {
            "get": {
                "tags": [
                    "users"
                ],
                "summary": "Find users by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of User",
                "operationId": "readUsersByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Users not found"
                    }
                }
            }
        },
        "/locker/{lockerId}": {
            "get": {
                "tags": [
                    "lockers"
                ],
                "summary": "Find Locker by ID",
                "description": "Returns a single Locker",
                "operationId": "readLockerById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "lockerId",
                        "in": "path",
                        "description": "The unique identifier the the of Locker",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Locker"
                        }
                    },
                    "404": {
                        "description": "Locker not found"
                    }
                }
            }
        },
        "/locker": {
            "post": {
                "tags": [
                    "lockers"
                ],
                "summary": "Creates a new Locker to the system",
                "description": "",
                "operationId": "createLocker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "locker",
                        "description": "The instance ofLocker that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Locker"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "lockers"
                ],
                "summary": "Update an existing Locker",
                "description": "",
                "operationId": "updateLocker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "locker",
                        "description": "The Locker instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Locker"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Locker not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "lockers"
                ],
                "summary": "Deletes a Locker",
                "description": "",
                "operationId": "deleteLocker",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "lockerId",
                        "in": "path",
                        "description": "The identifier of the Locker to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Locker value"
                    }
                }
            }
        },
        "/lockers": {
            "post": {
                "tags": [
                    "lockers"
                ],
                "summary": "Create lockers to the system",
                "description": "",
                "operationId": "createLockers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "lockers",
                        "description": "Collection of Locker that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Locker"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "lockers"
                ],
                "summary": "Find lockers by ID",
                "description": "Returns a collection of Locker",
                "operationId": "readLockersByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the lockers to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Locker"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Lockers not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "lockers"
                ],
                "summary": "Update an existing Locker",
                "description": "",
                "operationId": "updateLockers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "lockers",
                        "description": "Collection of Locker to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Locker"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Lockers not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "lockers"
                ],
                "summary": "Deletes some lockers",
                "description": "",
                "operationId": "deleteLockers",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of lockers to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid lockers value"
                    }
                }
            }
        },
        "/lockersByQuery": {
            "get": {
                "tags": [
                    "lockers"
                ],
                "summary": "Find lockers by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Locker",
                "operationId": "readLockersByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Locker"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Lockers not found"
                    }
                }
            }
        },
        "/group/{groupId}": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Find Group by ID",
                "description": "Returns a single Group",
                "operationId": "readGroupById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "The unique identifier the the of Group",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    },
                    "404": {
                        "description": "Group not found"
                    }
                }
            }
        },
        "/group": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Creates a new Group to the system",
                "description": "",
                "operationId": "createGroup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "group",
                        "description": "The instance ofGroup that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "groups"
                ],
                "summary": "Update an existing Group",
                "description": "",
                "operationId": "updateGroup",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "group",
                        "description": "The Group instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Group"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Group not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "groups"
                ],
                "summary": "Deletes a Group",
                "description": "",
                "operationId": "deleteGroup",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "groupId",
                        "in": "path",
                        "description": "The identifier of the Group to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Group value"
                    }
                }
            }
        },
        "/groups": {
            "post": {
                "tags": [
                    "groups"
                ],
                "summary": "Create groups to the system",
                "description": "",
                "operationId": "createGroups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "groups",
                        "description": "Collection of Group that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Group"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Find groups by ID",
                "description": "Returns a collection of Group",
                "operationId": "readGroupsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the groups to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Group"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Groups not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "groups"
                ],
                "summary": "Update an existing Group",
                "description": "",
                "operationId": "updateGroups",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "groups",
                        "description": "Collection of Group to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Group"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Groups not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "groups"
                ],
                "summary": "Deletes some groups",
                "description": "",
                "operationId": "deleteGroups",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of groups to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid groups value"
                    }
                }
            }
        },
        "/groupsByQuery": {
            "get": {
                "tags": [
                    "groups"
                ],
                "summary": "Find groups by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Group",
                "operationId": "readGroupsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Group"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Groups not found"
                    }
                }
            }
        },
        "/operation/{operationId}": {
            "get": {
                "tags": [
                    "operations"
                ],
                "summary": "Find Operation by ID",
                "description": "Returns a single Operation",
                "operationId": "readOperationById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "operationId",
                        "in": "path",
                        "description": "The unique identifier the the of Operation",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Operation"
                        }
                    },
                    "404": {
                        "description": "Operation not found"
                    }
                }
            }
        },
        "/operation": {
            "post": {
                "tags": [
                    "operations"
                ],
                "summary": "Creates a new Operation to the system",
                "description": "",
                "operationId": "createOperation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "operation",
                        "description": "The instance ofOperation that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Operation"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "operations"
                ],
                "summary": "Update an existing Operation",
                "description": "",
                "operationId": "updateOperation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "operation",
                        "description": "The Operation instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Operation"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Operation not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "operations"
                ],
                "summary": "Deletes a Operation",
                "description": "",
                "operationId": "deleteOperation",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "operationId",
                        "in": "path",
                        "description": "The identifier of the Operation to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Operation value"
                    }
                }
            }
        },
        "/operations": {
            "post": {
                "tags": [
                    "operations"
                ],
                "summary": "Create operations to the system",
                "description": "",
                "operationId": "createOperations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "operations",
                        "description": "Collection of Operation that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Operation"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "operations"
                ],
                "summary": "Find operations by ID",
                "description": "Returns a collection of Operation",
                "operationId": "readOperationsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the operations to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Operation"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Operations not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "operations"
                ],
                "summary": "Update an existing Operation",
                "description": "",
                "operationId": "updateOperations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "operations",
                        "description": "Collection of Operation to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Operation"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Operations not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "operations"
                ],
                "summary": "Deletes some operations",
                "description": "",
                "operationId": "deleteOperations",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of operations to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid operations value"
                    }
                }
            }
        },
        "/operationsByQuery": {
            "get": {
                "tags": [
                    "operations"
                ],
                "summary": "Find operations by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Operation",
                "operationId": "readOperationsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Operation"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Operations not found"
                    }
                }
            }
        },
        "/permission/{permissionId}": {
            "get": {
                "tags": [
                    "permissions"
                ],
                "summary": "Find Permission by ID",
                "description": "Returns a single Permission",
                "operationId": "readPermissionById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "permissionId",
                        "in": "path",
                        "description": "The unique identifier the the of Permission",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    },
                    "404": {
                        "description": "Permission not found"
                    }
                }
            }
        },
        "/permission": {
            "post": {
                "tags": [
                    "permissions"
                ],
                "summary": "Creates a new Permission to the system",
                "description": "",
                "operationId": "createPermission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "permission",
                        "description": "The instance ofPermission that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "permissions"
                ],
                "summary": "Update an existing Permission",
                "description": "",
                "operationId": "updatePermission",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "permission",
                        "description": "The Permission instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Permission"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Permission not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "permissions"
                ],
                "summary": "Deletes a Permission",
                "description": "",
                "operationId": "deletePermission",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "permissionId",
                        "in": "path",
                        "description": "The identifier of the Permission to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Permission value"
                    }
                }
            }
        },
        "/permissions": {
            "post": {
                "tags": [
                    "permissions"
                ],
                "summary": "Create permissions to the system",
                "description": "",
                "operationId": "createPermissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "permissions",
                        "description": "Collection of Permission that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "permissions"
                ],
                "summary": "Find permissions by ID",
                "description": "Returns a collection of Permission",
                "operationId": "readPermissionsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the permissions to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Permissions not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "permissions"
                ],
                "summary": "Update an existing Permission",
                "description": "",
                "operationId": "updatePermissions",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "permissions",
                        "description": "Collection of Permission to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Permissions not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "permissions"
                ],
                "summary": "Deletes some permissions",
                "description": "",
                "operationId": "deletePermissions",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of permissions to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid permissions value"
                    }
                }
            }
        },
        "/permissionsByQuery": {
            "get": {
                "tags": [
                    "permissions"
                ],
                "summary": "Find permissions by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Permission",
                "operationId": "readPermissionsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Permission"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Permissions not found"
                    }
                }
            }
        },
        "/trigger/{triggerId}": {
            "get": {
                "tags": [
                    "triggers"
                ],
                "summary": "Find Trigger by ID",
                "description": "Returns a single Trigger",
                "operationId": "readTriggerById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "triggerId",
                        "in": "path",
                        "description": "The unique identifier the the of Trigger",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Trigger"
                        }
                    },
                    "404": {
                        "description": "Trigger not found"
                    }
                }
            }
        },
        "/trigger": {
            "post": {
                "tags": [
                    "triggers"
                ],
                "summary": "Creates a new Trigger to the system",
                "description": "",
                "operationId": "createTrigger",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "trigger",
                        "description": "The instance ofTrigger that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Trigger"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "triggers"
                ],
                "summary": "Update an existing Trigger",
                "description": "",
                "operationId": "updateTrigger",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "trigger",
                        "description": "The Trigger instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Trigger"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Trigger not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "triggers"
                ],
                "summary": "Deletes a Trigger",
                "description": "",
                "operationId": "deleteTrigger",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "triggerId",
                        "in": "path",
                        "description": "The identifier of the Trigger to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid Trigger value"
                    }
                }
            }
        },
        "/triggers": {
            "post": {
                "tags": [
                    "triggers"
                ],
                "summary": "Create triggers to the system",
                "description": "",
                "operationId": "createTriggers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "triggers",
                        "description": "Collection of Trigger that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Trigger"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "triggers"
                ],
                "summary": "Find triggers by ID",
                "description": "Returns a collection of Trigger",
                "operationId": "readTriggersByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the triggers to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Trigger"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Triggers not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "triggers"
                ],
                "summary": "Update an existing Trigger",
                "description": "",
                "operationId": "updateTriggers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "triggers",
                        "description": "Collection of Trigger to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Trigger"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Triggers not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "triggers"
                ],
                "summary": "Deletes some triggers",
                "description": "",
                "operationId": "deleteTriggers",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of triggers to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid triggers value"
                    }
                }
            }
        },
        "/triggersByQuery": {
            "get": {
                "tags": [
                    "triggers"
                ],
                "summary": "Find triggers by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of Trigger",
                "operationId": "readTriggersByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Trigger"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "Triggers not found"
                    }
                }
            }
        },
        "/jString/{jStringId}": {
            "get": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Find JString by ID",
                "description": "Returns a single JString",
                "operationId": "readJStringById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "jStringId",
                        "in": "path",
                        "description": "The unique identifier the the of JString",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/JString"
                        }
                    },
                    "404": {
                        "description": "JString not found"
                    }
                }
            }
        },
        "/jString": {
            "post": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Creates a new JString to the system",
                "description": "",
                "operationId": "createJString",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jString",
                        "description": "The instance ofJString that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/JString"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Update an existing JString",
                "description": "",
                "operationId": "updateJString",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jString",
                        "description": "The JString instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/JString"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "JString not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Deletes a JString",
                "description": "",
                "operationId": "deleteJString",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "jStringId",
                        "in": "path",
                        "description": "The identifier of the JString to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid JString value"
                    }
                }
            }
        },
        "/jStrings": {
            "post": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Create jStrings to the system",
                "description": "",
                "operationId": "createJStrings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jStrings",
                        "description": "Collection of JString that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JString"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Find jStrings by ID",
                "description": "Returns a collection of JString",
                "operationId": "readJStringsByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the jStrings to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JString"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "JStrings not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Update an existing JString",
                "description": "",
                "operationId": "updateJStrings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jStrings",
                        "description": "Collection of JString to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JString"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "JStrings not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Deletes some jStrings",
                "description": "",
                "operationId": "deleteJStrings",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of jStrings to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid jStrings value"
                    }
                }
            }
        },
        "/jStringsByQuery": {
            "get": {
                "tags": [
                    "jStrings"
                ],
                "summary": "Find jStrings by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of JString",
                "operationId": "readJStringsByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JString"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "JStrings not found"
                    }
                }
            }
        },
        "/jData/{jDataId}": {
            "get": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Find JData by ID",
                "description": "Returns a single JData",
                "operationId": "readJDataById",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "jDataId",
                        "in": "path",
                        "description": "The unique identifier the the of JData",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/JData"
                        }
                    },
                    "404": {
                        "description": "JData not found"
                    }
                }
            }
        },
        "/jData": {
            "post": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Creates a new JData to the system",
                "description": "",
                "operationId": "createJData",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jData",
                        "description": "The instance ofJData that needs to be added",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/JData"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "put": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Update an existing JData",
                "description": "",
                "operationId": "updateJData",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jData",
                        "description": "The JData instance to update",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/JData"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "JData not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Deletes a JData",
                "description": "",
                "operationId": "deleteJData",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "jDataId",
                        "in": "path",
                        "description": "The identifier of the JData to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid JData value"
                    }
                }
            }
        },
        "/jDatas": {
            "post": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Create jDatas to the system",
                "description": "",
                "operationId": "createJDatas",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jDatas",
                        "description": "Collection of JData that needs to be added",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JData"
                            }
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "metadata": {
                    "urdMode": false
                }
            },
            "get": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Find jDatas by ID",
                "description": "Returns a collection of JData",
                "operationId": "readJDatasByIds",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The IDS of the jDatas to return",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JData"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "JDatas not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Update an existing JData",
                "description": "",
                "operationId": "updateJDatas",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "jDatas",
                        "description": "Collection of JData to update",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JData"
                            }
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "JDatas not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                }
            },
            "delete": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Deletes some jDatas",
                "description": "",
                "operationId": "deleteJDatas",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "ids",
                        "in": "path",
                        "description": "The ids of jDatas to delete",
                        "required": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid jDatas value"
                    }
                }
            }
        },
        "/jDatasByQuery": {
            "get": {
                "tags": [
                    "jDatas"
                ],
                "summary": "Find jDatas by query (check $q, $s, $f in Bartleby's MongoCallDataRawWrapper)",
                "description": "Returns a collection of JData",
                "operationId": "readJDatasByQuery",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "result_fields",
                        "description": "the result fields (MONGO DB)",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "in": "body",
                        "name": "sort",
                        "description": "the sort (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    },
                    {
                        "in": "body",
                        "name": "query",
                        "description": "the query (MONGO DB)",
                        "required": false,
                        "type": "dictionary"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/JData"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid IDS supplied"
                    },
                    "404": {
                        "description": "JDatas not found"
                    }
                }
            }
        }
    },
    "securityDefinitions": [],
    "externalDocs": {
        "description": "Find out more about Bartleby",
        "url": "http://www.pereira-da-silva.com/projects/bartleby/"
    }
}#BMS#->{"filename":"post-processor.php","checksum":4236769726,"relativePath":"Bartleby\/Commons.flexions\/App\/post-processor.php","size":3041}<-#BME#
<?php


/* @var $h Hypotypose */

// /////////////////////////////////////////
// #1 Save the hypotypose to files
// /////////////////////////////////////////

hypotyposeToFiles();

// /////////////////////////////////////////
// #2 generate some post generation files
// /////////////////////////////////////////


if(file_exists(realpath($destination))==false){
	throw new Exception("Unexisting destination ".realpath($destination));
}

$generated='';
$h=Hypotypose::Instance();

// Let's write the list of the files we have created
// We could iterate of each loop ( $h->flexedList)
$list = $h->getFlatFlexedList();
$counter = 0;

foreach ( $list as $flexed ) {
    /* @var $flexed Flexed */
	if ($flexed->exclude === false) {
		// Let's add a human readable log.
		$counter ++;
        $line='';
		if (VERBOSE_FLEXIONS)
			fLog ( $counter . " " . $flexed->fileName. cr() , false );
		// Let's list the file name
		$line .= $counter.'-> We have created "'.$flexed->package.$flexed->fileName . '"' . "".cr();
		$generated .= $line;
	}
}

// We save the file
$filePath= $destination .'ReadMe.txt';
$c='Those files that are recreated by YouDubApi-flexions-App should not be modified directly.'.cr().cr();
$c.=$generated;
file_put_contents ( $filePath, $c );


// /////////////////////////////////////////
// #3 Deploy
// /////////////////////////////////////////


// We can deploy the files per version and stage
// And keep a copy in the out.YouDubApi-flexions-App folder.

require_once FLEXIONS_MODULES_DIR . '/Deploy/FTPDeploy.php';
require_once FLEXIONS_MODULES_DIR . '/Deploy/LocalDeploy.php';



// DEVELOPMENT
if ($h->stage==DefaultStages::STAGE_DEVELOPMENT){
    $deploy=new LocalDeploy($h);

    $generatedFolder=dirname(dirname(__DIR__)).'/Commons/_generated/';
    // WE DELETE THE GENERATED FOLDER BEFORE TO REGENERATE
    $deploy->rmPath($generatedFolder);
    $deploy->flatCopyFiles('/php/api/v1/_generated/Endpoints/',$generatedFolder.'EndPoints/',true);
    $deploy->flatCopyFiles('/php/api/v1/_generated/Models/',$generatedFolder.'Models/',true);
	$deploy->flatCopyFiles('/php/_generated/',$generatedFolder,true);

    // We want to copy the package 'ios/' files to the iOS sources
    // WE DELETE THE GENERATED FOLDER BEFORE TO REGENERATE
    $deploy->rmPath(xOS_BARTLEBYS_COMMONS_EXPORT_PATH);
    $deploy->copyFiles('/xOS/',xOS_BARTLEBYS_COMMONS_EXPORT_PATH,true);
}

// PRODUCTION
// Replace Host + <USER> & <PASSWORD>
if ($h->stage==DefaultStages::STAGE_BETA){
	// We want to copy the package 'php/' files to a valid FTP.
	$ftpDeploy=new FTPDeploy($h);
    $ftpDeploy->setUp("dev.api.lylo.tv");
    if($ftpDeploy->login("www.dev","uburoi1972danse")==true){
        $ftpDeploy->copyFiles('php/','/home/dev/public_html/');
    }else{
        // There is may be an issue
    }
    // Local copies
    $deploy=new LocalDeploy($h);
	// We want to copy the package 'ios/' files to the iOS sources
    $deploy->rmPath(xOS_BARTLEBYS_COMMONS_EXPORT_PATH);
	$deploy->copyFiles('/xOS/',xOS_BARTLEBYS_COMMONS_EXPORT_PATH,true);
}#BMS#->{"filename":"pre-processor.php","checksum":1527417323,"relativePath":"Bartleby\/Commons.flexions\/App\/pre-processor.php","size":1351}<-#BME#
<?php

// we load the shared variables
include  FLEXIONS_SOURCE_DIR.'/Shared.php';
require_once FLEXIONS_MODULES_DIR . 'SwaggerToFlexions/SwaggerToFlexionsRepresentations.php';
require_once FLEXIONS_MODULES_DIR . 'SwaggerToFlexions/SwaggerDelegate.php';

// we instanciate the Hypotypose singleton
$h = Hypotypose::instance();
$h->stage=DefaultStages::STAGE_DEVELOPMENT;
$h->version='1.0';
$h->classPrefix=$prefix;
if(isset($doNotGenerate)){
    $h->excludePath=$doNotGenerate;
}

$transformer=new SwaggerToFlexionsRepresentations();
$delegate=new SWaggerDelegate();
$r = $transformer->projectRepresentationFromSwaggerJson($descriptorFilePath, $prefix, $delegate);


/// Associate the entities to the loop name
if(! $h->setLoopDescriptor($r->entities,DefaultLoops::ENTITIES)){
    throw new Exception('Error when setting the loop descriptor '.DefaultLoops::ENTITIES);
}

/// Associate the global descriptor to the loop name
// Yoy must wrap it in an array
if(! $h->setLoopDescriptor($r->actions,DefaultLoops::ACTIONS)){
    throw new Exception('Error when setting the loop descriptor '.DefaultLoops::ACTIONS);
}

/// Associate the global descriptor to the loop name
// Yoy must wrap it in an array
if(! $h->setLoopDescriptor(array($r),DefaultLoops::PROJECT)){
    throw new Exception('Error when setting the loop descriptor '.DefaultLoops::PROJECT);
}#BMS#->{"filename":"ReadMe.md","checksum":158670892,"relativePath":"Bartleby\/Commons.flexions\/App\/ReadMe.md","size":213}<-#BME#
## YouDub Api Generator

Generation  to various templates.

## How to ?

```
php -f run.php
```

The generated files will be available in the folder out.flexions/
The logs will be written in Flexions folder /out/
#BMS#->{"filename":"run.php","checksum":2970387975,"relativePath":"Bartleby\/Commons.flexions\/App\/run.php","size":426}<-#BME#
<?php


$arguments=array();
$arguments['source']="./";
$arguments['destination']="out.flexions/";
$arguments['descriptor']="datasources/bartleby.json";
$arguments['templates']="*";
$arguments['preProcessors']="pre-processor.php";
$arguments['postProcessors']="post-processor.php";

define ( "COMMANDLINE_MODE", true );

// Invoke Flexions
include_once dirname(dirname(dirname(__DIR__))).'/BartlebyFlexions/src/flexions.php';

#BMS#->{"filename":"Shared.php","checksum":2761048853,"relativePath":"Bartleby\/Commons.flexions\/App\/Shared.php","size":1694}<-#BME#
<?php

// DEFINE IN THIS FILE ANY SHARED GLOBAL SETUPS
// THIS FILE SHOULD BE INCLUDED IN YOUR TEMPLATES

/* @var $f Flexed */

require_once FLEXIONS_MODULES_DIR . 'Utils/Pluralization.php';
include_once dirname(dirname(dirname(__DIR__))) . '/GenerativeConstants.php';

$isIncludeInBartlebysCommons = true;
$prefix = "";// No prefix


$modelsShouldConformToNSCoding = true; // (!) you can opt for NSCoding support (the model will not be pure swift models)

$excludeEntitiesWith = ["AbstractContext"]; //

$xOSIncludeCollectionControllerForEntityNamed = [
    "Operation",
    "TasksGroup",
    "Task"
];

$excludeActionsWith = ["TaskArguments",// Base name for any task arguments.
    "JString", "JDictionary", "JData", // Primitive Wrapper
    "Trigger",
    "Operation",
    "TasksGroup",
    "Task",
    "Abstract", // Any abstract entity should be ignored
    "ExternalReference",
    "Progression",
    "Completion",
    "BaseObject",
    "Tag",
    "CollectionMetadatum",
    "HTTPResponse",
    "RegistryMetadata",
    "CollectionMetadata",
    "CollectionMetadatum"//

];//We will generate only the entity ( On client and server side)
$excludeFromServerActionsWith = [""];

$unDeletableEntitiesWith = [];
$unModifiableEntitiesWith = [];
$doNotGenerate = [];

if (isset ($f)) {
    $f->company = "Bartleby's | https://bartlebys.org";
    $f->prefix = $prefix;
    $f->author = "b@bartlebys.org";
    $f->projectName = "Bartleby";
    //$f->license = FLEXIONS_MODULES_DIR."Licenses/LGPL.template.php";
}


/*
$parentClass = "";
$collectionParentClass="";
$protocols="";
$imports = "\n#import \"$parentClass.h\"\n"; // NOT NEEDED FOR SWIFT
$markAsDynamic = false;
$allowScalars = true;
*/
#BMS#->{"filename":"endpoint.cuds.swift.template.php","checksum":1357419024,"relativePath":"Bartleby\/Commons.flexions\/App\/templates\/actions\/endpoint.cuds.swift.template.php","size":212}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/actions/cuds.withWeakLogic.swift.template.php';#BMS#->{"filename":"endpoint.php.template.php","checksum":2196702646,"relativePath":"Bartleby\/Commons.flexions\/App\/templates\/actions\/endpoint.php.template.php","size":200}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/actions/endpoint.php.template.php';#BMS#->{"filename":"endpoint.swift.template.php","checksum":89320255,"relativePath":"Bartleby\/Commons.flexions\/App\/templates\/actions\/endpoint.swift.template.php","size":202}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/actions/endpoint.swift.template.php';#BMS#->{"filename":"model.php.template.php","checksum":2736040291,"relativePath":"Bartleby\/Commons.flexions\/App\/templates\/entities\/model.php.template.php","size":198}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/entities/model.php.template.php';#BMS#->{"filename":"model.swift.template.php","checksum":645731421,"relativePath":"Bartleby\/Commons.flexions\/App\/templates\/entities\/model.swift.template.php","size":200}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/entities/model.swift.template.php';#BMS#->{"filename":"modelCollectionController.swift.template.php","checksum":279416835,"relativePath":"Bartleby\/Commons.flexions\/App\/templates\/entities\/modelCollectionController.swift.template.php","size":220}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/entities/modelCollectionController.swift.template.php';#BMS#->{"filename":"bartlebyDocument.swift.template.php","checksum":1952539172,"relativePath":"Bartleby\/Commons.flexions\/App\/templates\/project\/bartlebyDocument.swift.template.php","size":650}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';

// Configuration
require_once FLEXIONS_MODULES_DIR . 'Bartleby/templates/project/SwiftDocumentConfigurator.php';
$configurator=new SwiftDocumentConfigurator();
$configurator->filename="BartlebyDocument.swift";
$configurator->includeCollectionControllerForEntityContainingString=array("TasksGroup","Task","User","Group","Permission","Operation","Locker");
$configurator->excludeCollectionControllerForEntityContainingString=array();

// Invocation
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/project/document.swift.template.php';#BMS#->{"filename":"commons.configuration.php.template.php","checksum":4152905103,"relativePath":"Bartleby\/Commons.flexions\/App\/templates\/project\/commons.configuration.php.template.php","size":213}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/project/commons.configuration.php.template.php';#BMS#->{"filename":"post-processor.php","checksum":2785060727,"relativePath":"Bartleby\/Commons.flexions\/EndPointsFromDefinitions\/post-processor.php","size":1436}<-#BME#
<?php

require_once FLEXIONS_MODULES_DIR.'/Deploy/FTPDeploy.php';
require_once FLEXIONS_MODULES_DIR.'/Deploy/LocalDeploy.php';


/* @var $h Hypotypose */

// /////////////////////////////////////////
// #1 Save the hypotypose to files
// /////////////////////////////////////////

hypotyposeToFiles();

// DEVELOPMENT
if ($h->stage==DefaultStages::STAGE_DEVELOPMENT){
    $deploy=new LocalDeploy($h);
    $deploy->copyFiles('/php/',dirname(__DIR__).'/www/',true);

    // AGGREGATE THE PATHS IN youdub.json
    $decodedPaths=null;
    $fl=$h->flexedList[DefaultLoops::PROJECT];
    /* @var $flexed Flexed */
    foreach ($fl as $flexed) {
        if($flexed->fileName=='pathsFragment.json'){
            $json=$flexed->source;
            $decodedPaths=json_decode($json,true);
        }
    }
    if(isset($decodedPaths)){
        // We gonna update the json
        $dataSourcePath= dirname(__DIR__) . '/App/datasources/bartleby.json';
        $dataSourceJSON=json_decode(file_get_contents($dataSourcePath),true);
        // $paths=$dataSourceJSON['paths']; <- if you want to preserve the paths
        $paths=array();
        foreach ($decodedPaths['paths'] as $path => $contentAtPath ) {
            $paths[$path]=$contentAtPath;
        }
        $dataSourceJSON['paths']=$paths;
        $encoded=json_encode($dataSourceJSON,JSON_UNESCAPED_SLASHES|JSON_PRETTY_PRINT);
        file_put_contents($dataSourcePath,$encoded);

    }


}#BMS#->{"filename":"pre-processor.php","checksum":1527417323,"relativePath":"Bartleby\/Commons.flexions\/EndPointsFromDefinitions\/pre-processor.php","size":1351}<-#BME#
<?php

// we load the shared variables
include  FLEXIONS_SOURCE_DIR.'/Shared.php';
require_once FLEXIONS_MODULES_DIR . 'SwaggerToFlexions/SwaggerToFlexionsRepresentations.php';
require_once FLEXIONS_MODULES_DIR . 'SwaggerToFlexions/SwaggerDelegate.php';

// we instanciate the Hypotypose singleton
$h = Hypotypose::instance();
$h->stage=DefaultStages::STAGE_DEVELOPMENT;
$h->version='1.0';
$h->classPrefix=$prefix;
if(isset($doNotGenerate)){
    $h->excludePath=$doNotGenerate;
}

$transformer=new SwaggerToFlexionsRepresentations();
$delegate=new SWaggerDelegate();
$r = $transformer->projectRepresentationFromSwaggerJson($descriptorFilePath, $prefix, $delegate);


/// Associate the entities to the loop name
if(! $h->setLoopDescriptor($r->entities,DefaultLoops::ENTITIES)){
    throw new Exception('Error when setting the loop descriptor '.DefaultLoops::ENTITIES);
}

/// Associate the global descriptor to the loop name
// Yoy must wrap it in an array
if(! $h->setLoopDescriptor($r->actions,DefaultLoops::ACTIONS)){
    throw new Exception('Error when setting the loop descriptor '.DefaultLoops::ACTIONS);
}

/// Associate the global descriptor to the loop name
// Yoy must wrap it in an array
if(! $h->setLoopDescriptor(array($r),DefaultLoops::PROJECT)){
    throw new Exception('Error when setting the loop descriptor '.DefaultLoops::PROJECT);
}#BMS#->{"filename":"run.php","checksum":649653290,"relativePath":"Bartleby\/Commons.flexions\/EndPointsFromDefinitions\/run.php","size":449}<-#BME#
<?php

$arguments=array();
$arguments['source']="./";
$arguments['destination']="out.flexions/";
$arguments['descriptor']= dirname(__DIR__) . '/App/datasources/bartleby.json';
$arguments['templates']="*";
$arguments['preProcessors']="pre-processor.php";
$arguments['postProcessors']="post-processor.php";

define ( "COMMANDLINE_MODE", true );

// Invoke flexions
include_once dirname(dirname(dirname(__DIR__))).'/BartlebyFlexions/src/flexions.php';
#BMS#->{"filename":"Shared.php","checksum":1515705902,"relativePath":"Bartleby\/Commons.flexions\/EndPointsFromDefinitions\/Shared.php","size":1249}<-#BME#
<?php


// DEFINE IN THIS FILE ANY SHARED GLOBAL SETUPS
// THIS FILE SHOULD BE INCLUDED IN YOUR TEMPLATES

/* @var $f Flexed */

require_once FLEXIONS_MODULES_DIR . 'Utils/Pluralization.php';
include_once dirname(dirname(dirname(__DIR__))) . '/GenerativeConstants.php';

$prefix = "Swagger";
$excludeEntitiesWith = array("AbstractContext");//

$excludeActionsWith = [
    "Asset",
    "Datum",
    "AbstractContext",
    "Reference",
    "Tag",
    "Scene",
    "Shot",
    "Sentence",
    "TextPart",
    "Sign",
    "StringAttribute",
    "TimeCode",
    "TimeRange",
    "MovieCharacter",
    "Actor"
];//We generate only the entity
$unDeletableEntitiesWith = [];
$unModifiableEntitiesWith = [];
$doNotGenerate = ["AbstractContext"];// Used by the flexions script to reject a flexed content

if (isset ($f)) {
    $f->package = "Models/";
    $f->company = "Bartleby's | https://bartlebys.org";
    $f->prefix = $prefix;
    $f->author = "b@bartlebys.org";
    $f->projectName = "Bartleby";
    //$f->license = FLEXIONS_MODULES_DIR."Licenses/LGPL.template.php";
}

/*
$parentClass = "";
$collectionParentClass="";
$protocols="";
$imports = "\n#import \"$parentClass.h\"\n"; // NOT NEEDED FOR SWIFT
$markAsDynamic = false;
$allowScalars = true;
*/#BMS#->{"filename":"endPoints.json.template.php","checksum":1409133785,"relativePath":"Bartleby\/Commons.flexions\/EndPointsFromDefinitions\/templates\/project\/endPoints.json.template.php","size":216}<-#BME#
<?php
/**
 * Injects the variable and injects the module template.
 */
include FLEXIONS_SOURCE_DIR.'/Shared.php';
include FLEXIONS_MODULES_DIR . 'Bartleby/modeling-meta-templates/project/endPoints.json.template.php';#BMS#->{"filename":"BackgroundExecution.php","checksum":3779582768,"relativePath":"Bartleby\/Core\/BackgroundExecution.php","size":1072}<-#BME#
<?php

namespace Bartleby\Core;

/**
 * A simple back ground execution process
 * Usage sample : 
 *				$process = new BackgroundExecution();
 *				$process->runPHP('
 *							$generator=new HashMapGenerator();
 *							$generator->HashMapForRelativePaths('.$relativePaths.');
 *						');
 *						
 *  @author bpds
 */
class BackgroundExecution{

	private $_pid=NULL;
	
	public  function runPHP($phpString,$outputFile = '/dev/null'){
		return $this->_pid = shell_exec( 'php -r \''.$phpString.'\' > ' .$outputFile.' 2>&1 &\; echo $! ' );
	}
	public  function runPHPFile($phpFile,$outputFile = '/dev/null'){
		return $this->_pid = shell_exec( 'php -f \''.$phpFile.'\' > ' .$outputFile.' 2>&1 &\; echo $! ' );
	}
	
	public function isRunning() {
		try {
			$result = shell_exec('ps '. $this->_pid);
			if(count(preg_split("/\n/", $result)) > 2) {
				return TRUE;
			}
		} catch(Exception $e) {		
		}
		return FALSE;
	}

	public function getPid(){
		return $this->_pid;
	}
	
	public function kill(){
		if (isset($this->_pid)){
			shell_exec('kill '. $this->_pid);
		}
	}
	
}
#BMS#->{"filename":"CallData.php","checksum":988584544,"relativePath":"Bartleby\/Core\/CallData.php","size":840}<-#BME#
<?php

namespace Bartleby\Core;

require_once __DIR__.'/IAuthentified.php';
require_once __DIR__.'/Model.php';



/**
 * Class CallData
 * You can use CallData to build strongly typed calls
 *
 * And you can use a CallDataRawWrapper
 * when #the code is generated#
 * you can bypass serialization/deserialization
 *
 * @package Bartleby\Core
 */
class CallData extends Model implements IAuthentified{
    
    ////////////////////
    // IAuthentified
    ////////////////////
    
    /* @var array the current User*/
    private $_current_user=NULL;

    /**
     * @return array|null
     */
    public function getCurrentUser() {
        return $this->_current_user;
    }

    /**
     * @param array $current_user
     */
    public function setCurrentUser($current_user) {
        $this->_current_user = $current_user;
    }
    
}

#BMS#->{"filename":"CallDataRawWrapper.php","checksum":2538262837,"relativePath":"Bartleby\/Core\/CallDataRawWrapper.php","size":1670}<-#BME#
<?php

namespace Bartleby\Core;
require_once __DIR__.'/IAuthentified.php';


/**
 * Class CallDataRawWrapper
 * You can use CallData to build strongly typed calls
 *
 * And you can use a CallDataRawWrapper
 * when the code is generated or intensively tested
 * it will bypass serialization/deserialization
 *
 * @package Bartleby\Core
 */
class CallDataRawWrapper implements IAuthentified {

    const dID=SPACE_UID_KEY;

    private $_storage;
    private $_isArray=true;

    /**
     * CallData constructor.
     * @param array $data
     */
    public function __construct($data) {
        $this->_isArray=is_array($data);
        $this->_storage = $data;
    }

    public function getValueForKey($key){
        if($this->_isArray){
            if(array_key_exists($key,$this->_storage)){
                return $this->_storage[$key];
            }
        }else{
            return $this->_storage->{$key};
        }
        return null;
    }


    public function keyExists($key){
        if($this->_isArray) {
            return array_key_exists($key, $this->_storage);
        }else{
            return property_exists($this->_storage,$key);
        }

    }


    public function getDictionary(){
        return $this->_storage;
    }

    ////////////////////
    // IAuthentified
    ////////////////////

    /* @var array the current User*/
    private $_current_user=NULL;

    /**
     * @return array|null
     */
    public function getCurrentUser() {
        return $this->_current_user;
    }

    /**
     * @param array $current_user
     */
    public function setCurrentUser($current_user) {
        $this->_current_user = $current_user;
    }
}#BMS#->{"filename":"Configuration.php","checksum":2566713751,"relativePath":"Bartleby\/Core\/Configuration.php","size":17653}<-#BME#
<?php


namespace Bartleby\Core;

require_once __DIR__ . '/Stages.php';
require_once BARTLEBY_ROOT_FOLDER.'/Commons/EndPoints/Auth.php';

use  Bartleby\EndPoints\Auth;

if (!defined('PERMISSION_IS_STATIC')) {

    define('PERMISSION_IS_STATIC', 0);

    // PERMISSION_RESTRICTED_TO_ENUMERATED_USERS is equivalent
    // to PERMISSION_IS_STATIC+PERMISSION_RESTRICTED_TO_ENUMERATED_USERS

    define('PERMISSION_NO_RESTRICTION', 1);
    define('PERMISSION_BY_TOKEN', 2);
    define('PERMISSION_PRESENCE_OF_A_COOKIE', 3);
    define('PERMISSION_BY_IDENTIFICATION', 4); // Two approachs are possible byKeys (using a key value pair on each call) or by Cookies
    define('PERMISSION_RESTRICTED_TO_ENUMERATED_USERS', 5);
    define('PERMISSION_RESTRICTED_BY_QUERIES', 6);
    define('PERMISSION_RESTRICTED_TO_GROUP_MEMBERS', 7);

    // Explicit you need to PERMISSION_IS_DYNAMIC
    define('PERMISSION_IS_DYNAMIC', 32768);// We reserve the ability to add new permission types

    define('PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY', 65536);
    define('PERMISSION_IS_BLOCKED', 131072);// For security purpose we can decide to lock the super admin

    define('TOKEN_CONTEXT', 'context');

    define('UID_KEY', 'UID');
    define('MONGO_ID_KEY', '_id'); // For example : PERMISSION_RESTRICTED_TO_ENUMERATED_USERS the ids of the users
    define('SPACE_UID_KEY', 'spaceUID');
    define('RUN_UID_KEY', 'runUID');
    define('LEVEL_KEY', 'level'); // The permission level.
    define('KEY_NAME', 'name'); // For example : when PERMISSION_PRESENCE_OF_A_TOKEN the name == the token key
    define('IDS_KEY', 'ids'); // For example : PERMISSION_RESTRICTED_TO_ENUMERATED_USERS the ids of the users

    // SYNTAX FOR PERMISSION_RESTRICTED_BY_QUERIES
    define('ARRAY_OF_QUERIES', 'queries');
    define('SELECT_COLLECTION_NAME', 'collectionName');
    define('WHERE_VALUE_OF_ENTITY_KEY', 'entitySelectionKey');
    define('EQUALS_VALUE_OF_PARAMETERS_KEY_PATH', 'paramKeyPath');
    define('COMPARE_WITH_OPERATOR', 'operator');
    define('RESULT_ENTITY_KEY', 'entityKey');
    define('AND_PARAMETER_KEY', 'parameterkey'); // CHOOSE AND_PARAMETER_KEY or  AND_CURRENT_USERID
    define('AND_CURRENT_USERID', 'currentUserId'); // There is a precedence for AND_CURRENT_USERID

    define('TOKEN_CONTEXT_KEY', 'context');

    define('NOT_OBSERVABLE', 'NO');
    define('NO_UID', 'NU');

    define('DEFAULT_SPACE_UID', '0');  //used when there no dID by the GateKeeper

    // TOKEN KEYS
    define('DEFAULT_APP_TOKEN_KEY', 'apptoken');    // Generaly Required to secure non authenticated operations
    define('DEFAULT_AUTH_COOKIE_KEY', 'authtoken');  // Set on sign in

    // SOME CLIENT IMPLEMENTATION MAY CONSIDER NULL as a FAULT
    // SO WE PREFER TO RETURN A VOID JSON DICTIONARY instead of a void
    define('VOID_RESPONSE', "{}");

}


/**
 * Class Configuration
 * This configuration is central in Bartleby's architecture.
 *
 * It defines or implements :
 * 
 * - SearchPaths
 * - Versionning
 * - ACL rules aka. Permissions
 * - Token Cryptographic facilities
 * - Data filters.
 * - APN push confs.
 *
 * @package Bartleby\Core
 */
class Configuration {

    // APP

    // Bartleby's version
    const BARTLEBY_VERSION = "1.0";
    const BARTLEBY_RELEASE = "beta2";
    const INFORMATIONS_KEY = 'informations';
    const ANONYMOUS = 'anonymous';
    const APP_TOKEN_KEY = DEFAULT_APP_TOKEN_KEY;

    protected $_executionDirectory;
    protected $_bartlebyRootDirectory;

    protected $_HOST = NULL;
    protected $_STAGE = Stages::DEVELOPMENT;
    protected $_VERSION = 'v1';
    protected $_SECRET_KEY = 'You should define a salt to make good code soup'; // PRIVATE SALT 32BYTES MIN
    protected $_SHARED_SALT = "You should define this salt and share it with the app clients"; // SALT SHARED BY CLIENTS

    protected $_superAdmins = array();// The super admin ids are declarative
    protected $_permissionsRules = array();// Will be setup first in BartlebyCommonsConfiguration

    private $_filtersIn = array();
    private $_filtersOut = array();

    /**
     * @var array of overloaded paths.
     */
    private $_fixedPaths = array();
    
    /**
     * Defines the HOST and the _STAGE
     * If necessary the _HOST and _STAGE can be declared
     */
    protected function _autoDefineHostAndStage(array $hosts){
        $serverName=$_SERVER['SERVER_NAME'];
        foreach ($hosts as $stage => $host) {
            if (strpos($host,$serverName)!==false){
                $this->_STAGE=$stage;
            }
        }
        if (!isset($this->_STAGE)){
            $this->_STAGE = Stages::LOCAL;
        }
        $stage = $this->_STAGE;
        if (array_key_exists($this->_STAGE,$hosts)){
            $this->_HOST= $hosts[$this->_STAGE];
        }else{
            throw \Exception('Unexisting Host for stage'.$this->_STAGE);
        }
    }

    /**
     * An array of issues used for analysis
     * @var array
     */
    public $issues=array();

    /**
     * @return The Host
     */
    public function HOST() {
        return $this->_HOST;
    }


    //////////////////////////////////
    // Behavioural const + getters
    ///////////////////////////////////

    // The getters allows overload of the consts.

    /**
     * Disable the ACL to perform Dev tests.
     */
    const DISABLE_ACL = false;

    /**
     * @return bool
     */
    public function DISABLE_ACL() {
        return $this::DISABLE_ACL;
    }

    /**
     * Can be used during development to simplify the tests.
     */
    const BY_PASS_SALTED_TOKENS = false;  // Should be set to false !

    /**
     * @return bool
     */
    public function BY_PASS_SALTED_TOKENS() {
        return $this::BY_PASS_SALTED_TOKENS;
    }


    /*
    * Should be used once to call destructive installer.
    */
    const ALLOW_DESTRUCTIVE_INSTALLER = false;  // Should be set to false (!)

    /**
     * @return bool
     */
    public function ALLOW_DESTRUCTIVE_INSTALLER() {
        return $this::ALLOW_DESTRUCTIVE_INSTALLER;
    }

    /**
     * Used to get more verbose response on Core issues
     */
    const DEVELOPER_DEBUG_MODE = true; // Should be set to false (!)

    /**
     * @return bool
     */
    public function DEVELOPER_DEBUG_MODE() {
        return $this::DEVELOPER_DEBUG_MODE;
    }


    /**
     * You stop encrypting cookies to search key - and crypto error during development.
     */
    const USE_ENCRYPTION_FOR_IDENTIFICATION_VALUES = true;  // Should be set to true (!)

    /**
     * @return bool
     */
    public function USE_ENCRYPTION_FOR_IDENTIFICATION_VALUES() {
        return $this::USE_ENCRYPTION_FOR_IDENTIFICATION_VALUES;
    }

    /**
     * If set to true on multiple creation attempts
     * The exception thrown by the creation will be catched
     */
    const IGNORE_MULTIPLE_CREATION_IN_CRUD_MODE = true;

    /**
     * @return bool
     */
    public function IGNORE_MULTIPLE_CREATION_IN_CRUD_MODE() {
        return $this::IGNORE_MULTIPLE_CREATION_IN_CRUD_MODE;
    }

    /**
     * If set to true on multiple deletion attempts
     * The exception thrown by the creation will be catched
     */
    const IGNORE_MULTIPLE_DELETION_ATTEMPT = true;

    /**
     * @return bool
     */
    public function IGNORE_MULTIPLE_DELETION_ATTEMPT() {
        return $this::IGNORE_MULTIPLE_DELETION_ATTEMPT;
    }


    ////////////////////
    // APP
    ///////////////////


    /**
     * Constructor
     *
     * @param $executionDirectory string
     * @param $bartlebyRootDirectory string
     */
    public function __construct($executionDirectory, $bartlebyRootDirectory) {
        $this->_executionDirectory = $executionDirectory;
        $this->_bartlebyRootDirectory = $bartlebyRootDirectory;
    }

    /**
     * @return string
     */
    public function getExecutionDirectory() {
        return $this->_executionDirectory;
    }

    /**
     * @return mixed
     */
    public function getBartlebyRootDirectory() {
        return $this->_bartlebyRootDirectory;
    }

    /**
     * @return string
     */
    public function STAGE() {
        return $this->_STAGE;
    }

    /**
     * @return string
     */
    public function VERSION() {
        return $this->_VERSION;
    }


    public function getEntitiesName($runMode) {
        if ($runMode == Mode::PAGES) {
            return 'Pages';
        } else {
            return 'EndPoints';
        }
    }


    ////////////////////
    // Routes
    ///////////////////


    function getRouteAliases($runMode) {
        if ($runMode == Mode::PAGES) {
            return $this->_getPagesRouteAliases();
        } else {
            return $this->_getEndPointsRouteAliases();
        }
    }

    /**
     * Returns a Routes aliases
     * Should be setup first in BartlebyCommonsConfiguration
     * @return RoutesAliases
     */
    protected function _getEndPointsRouteAliases() {
        $mapping = array();// This message should never appear
        return new RoutesAliases($mapping);
    }

    /**
     * Returns a Routes aliases
     * Should be setup first in BartlebyCommonsConfiguration
     * @return RoutesAliases
     */
    protected function _getPagesRouteAliases() {
        $mapping = array();// This message should never appear
        return new RoutesAliases($mapping);
    }


    ////////////////////
    // Search Paths
    ///////////////////


    function getModelsSearchPaths() {
        return array(
            $this->_executionDirectory . $this->_VERSION . '/_generated/Models/',
            $this->_executionDirectory . $this->_VERSION . '/Models/',
            $this->_bartlebyRootDirectory . 'Commons/Models/',
            $this->_bartlebyRootDirectory . 'Commons/_generated/Models/'
        );
    }


    function getEndpointsSearchPaths() {
        return array(
            $this->_executionDirectory . $this->_VERSION . '/_generated/EndPoints/',
            $this->_executionDirectory . $this->_VERSION . '/EndPoints/',
            $this->_bartlebyRootDirectory . 'Commons/EndPoints/',
            $this->_bartlebyRootDirectory . 'Commons/_generated/EndPoints/'
        );
    }

    function getPagesSearchPaths() {
        return array(
            $this->_executionDirectory . $this->_VERSION . '/_generated/Pages/',
            $this->_executionDirectory . $this->_VERSION . '/Pages/',
            $this->_bartlebyRootDirectory . 'Commons/Pages/',
            $this->_bartlebyRootDirectory . 'Commons/_generated/Pages/'
        );
    }


    /**
     * Define the path for a given class.
     * This method allows fast search resolution and class overload. (hook)
     *
     * @param string $className string the class name.
     * @param string $path  the absolute path
     */
    function definePath($className,$path){
        $this->_fixedPaths[$className]=$path;
    }

    /**
     * Return the path if defined else a "" string
     * @param string $className the class name
     * @return mixed|string
     */
    function getFixedPathForClassName($className=""){
        if (array_key_exists($className,$this->_fixedPaths)){
            return $this->_fixedPaths[$className];
        }else{
            return "";
        }
    }

    ////////////////////
    // Permissions
    ///////////////////


    final function getSuperAdminUIDS() {
        return $this->_superAdmins;
    }


    final function getPermissionsRules() {
        return $this->_permissionsRules;
    }


    protected function addSuperAdminUIDs(array $udids) {
        foreach ($udids as $udid) {
            $this->_superAdmins[] = $udid;
        }
    }


    protected function addPermissions(array $permission) {
        foreach ($permission as $name => $value) {
            $this->_permissionsRules[$name] = $value;
        }
    }


    ////////////////////////
    // COOKIES
    ////////////////////////


    function  getCryptedKEYForSpaceUID($spaceUID) {
        if ($this->USE_ENCRYPTION_FOR_IDENTIFICATION_VALUES()){
            return $this->salt($spaceUID);
        }else{
            return $spaceUID;
        }

    }

    function encryptIdentificationValue($spaceUID, $userID) {
        if ($this->USE_ENCRYPTION_FOR_IDENTIFICATION_VALUES()){
        // We use $this->_SECRET_KEY truncated to 32Bytes as key
        // We use $spaceUID as Initialization vector
         return base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $this->_32SALT(), $userID, MCRYPT_MODE_ECB, $spaceUID));
        }else{
            return $userID;
        }
    }

    function decryptIdentificationValue($spaceUID, $cryptedUserID) {
        if ($this->USE_ENCRYPTION_FOR_IDENTIFICATION_VALUES()){
        // We use $this->_SECRET_KEY truncated to 32Bytes as key
        // We use $spaceUID as Initialization vector
        return mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $this->_32SALT(), base64_decode($cryptedUserID), MCRYPT_MODE_ECB, $spaceUID);
        }else{
            return $cryptedUserID;
        }
    }

    /**
     * $this->_SECRET_KEY truncated to 32Bytes as key
     * @return string
     */
    protected function _32SALT() {
        return substr($this->_SECRET_KEY, 0, 32);
    }





    /**
     * Returns the userID if there is one in the "kvid" HTTP header field or a cookie.
     * @param $spaceUID
     * @return null|string
     */
    public function getUserID($spaceUID){
        if (!isset($spaceUID)){
            $this->issues[]='spaceUID is not set';
            return NULL;
        }
        // We the "kvid" http header.
        $userUID=$this->_getUserIDFromKVI($spaceUID);
        if (isset($userUID)){
            return $userUID;
        }
        // And fall back on the cookie.
        return $this->_getUserIDFromCookie($spaceUID);
    }


    /**
     * Returns the userID from the kvi
     * @param $spaceUID
     * @return null|string
     */
    private function _getUserIDFromKVI($spaceUID) {
        if (!isset($_COOKIE)){
            $this->issues[]='Php\'s _COOKIE global is not existing.';
        }
        $allHeader=getallheaders();
        if (array_key_exists(Auth::kvidKey,$allHeader)) {
            $cryptedUserID = $allHeader[Auth::kvidKey];
            $userID = $this->decryptIdentificationValue($spaceUID, $cryptedUserID);
            return $userID;
        }
        return NULL;
    }


    /**
     * Returns the userID from the cookie
     * @param $spaceUID
     * @return null|string
     */
    private function _getUserIDFromCookie($spaceUID) {
        if (!isset($_COOKIE)){
            $this->issues[]='Php\'s _COOKIE global is not existing.';
        }
        $cookieKey = $this->getCryptedKEYForSpaceUID($spaceUID);
        if (array_key_exists($cookieKey, $_COOKIE)) {
            $cookieValue = $_COOKIE[$cookieKey];
            $userID = $this->decryptIdentificationValue($spaceUID, $cookieValue);
            return $userID;
        }else{
            $this->issues[]='Cookie key '.$cookieKey.' is not existing. ';
            $this->issues[]='_COOKIE=['.implode(',',$_COOKIE).'] ';
        }
        return NULL;
    }



    /**
     * return true if there is a consistant cookie for the context
     * @param $spaceUID
     * @return bool
     */
    function hasUserAuthCookie($spaceUID) {
        $cookieKey = $this->getCryptedKEYForSpaceUID($spaceUID);
        return (array_key_exists($cookieKey, $_COOKIE));
    }

    ////////////////////
    // FILTERS
    ///////////////////


    function addFilterIn($endPointKey, IFilter $filter) {
        if (isset($endPointKey) && isset($filter)) {
            $this->_filtersIn[$endPointKey] = $filter;
        }
    }

    function addFilterOut($endPointKey, IFilter $filter) {
        if (isset($endPointKey) && isset($filter)) {
            $this->_filtersOut[$endPointKey] = $filter;
        }
    }

    function hasFilterOUT($endPointKey) {
        return (array_key_exists($endPointKey, $this->_filtersOut));
    }

    function hasFilterIN($endPointKey) {
        return (array_key_exists($endPointKey, $this->_filtersIn));
    }

    function runFilterIN($endPointKey, $parameters) {
        /* @var $filter IFilter */
        $filter = $this->_filtersIn[$endPointKey];
        return $filter->filterData($parameters);

    }

    function runFilterOUT($endPointKey, $responseData) {
        /* @var $filter IFilter */
        $filter = $this->_filtersOut[$endPointKey];
        return $filter->filterData($responseData);
    }


    ////////////////////
    // SALT
    ///////////////////

    function salt($string) {
        return md5($string . $this->_SECRET_KEY);
    }

    function saltWithSharedKey($string) {
        return md5($string . $this->_SHARED_SALT);
    }


    ////////////////////
    // APN
    ///////////////////


    // APN
    protected $_APN_PASS_PHRASE = '';
    protected $_APN_PORT = 2195;


    /**
     * @return string m
     */
    public function APN_PASS_PHRASE() {
        return $this->_APN_PASS_PHRASE;
    }

    /**
     * @return string
     */
    public function APN_HOST() {
        if ($this->STAGE() == 'production') {
            return 'tls://gateway.push.apple.com';
        } else {
            return 'tls://gateway.sandbox.push.apple.com';
        }
    }

    /**
     * @return int
     */
    public function APN_PORT() {
        return $this->_APN_PORT;
    }

    /**
     * @return string
     */
    public function APN_CERTIFICATE_PATH() {
        return $this->_executionDirectory . '/resources/' . $this->STAGE() . '.pem';
    }

    /**
     * @return string
     */
    public function APN_CERTIFICATE_AUTHORITY_PATH() {
        return $this->_executionDirectory . '/resources/entrust_2048_ca.cer';
    }

}#BMS#->{"filename":"ContextDescriptor.php","checksum":1395323096,"relativePath":"Bartleby\/Core\/ContextDescriptor.php","size":780}<-#BME#
<?php

namespace Bartleby\Core;


class ContextDescriptor {

    /**
     * @var array
     */
    public $parameters=array();

    /**
     * @var string
     */
    public $className='';
    /**
     * @var string
     */
    public $callDataClassName='';

    /**
     *
     * @var string
     */
    public $method;


    public function getCleanParameters(){
        return $this->_cleanInputs($this->parameters);
    }

    private function _cleanInputs($data) {
        $clean_input = Array ();
        if (is_array ( $data )) {
            foreach ( $data as $k => $v ) {
                $clean_input [$k] = $this->_cleanInputs ( $v );
            }
        } else {
            $clean_input = trim ( strip_tags ( $data ) );
        }
        return $clean_input;
    }
}#BMS#->{"filename":"Controller.php","checksum":2770654981,"relativePath":"Bartleby\/Core\/Controller.php","size":9193}<-#BME#
<?php

namespace Bartleby\Core;

require BARTLEBY_ROOT_FOLDER . 'Commons/_generated/Models/Trigger.php';

use Bartleby\Models\Trigger;
use \MongoCollection;



interface IPersistentController{

    public function getUser();

    public function authenticationIsValid ();

}

/**
 * Class Controller
 * @package Bartleby\Core
 */
class Controller {

    /**
     * @var Configuration
     */
    protected $_configuration;

    /**
     * @var string
     */
    protected $_userID;


    /**
     * Constructor.
     * @param Configuration $configuration
     */
    public function __construct(Configuration $configuration) {
        $this->_configuration = $configuration;
    }

    /**
     *
     * @return bool
     */
    public function isAuthenticated($spaceUID){
        $this->_userID=$this->getCurrentUserID($spaceUID);
        return isset($this->_userID)?true:false;
    }


    /**
     * Returns the current user ID for a given related UID dID
     * @return null|string
     */

    /**
     * Return the current user id for the dID
     * @param $spaceUID
     * @return null|string
     */
    public function getCurrentUserID($spaceUID){
        if(isset($this->_userID)){
            return $this->_userID;
        }
       $this->_userID=$this->_configuration->getUserID($spaceUID);
        return $this->_userID;
    }


    /**
     * Grabs the SpaceUID or throws and Exception
     * @return mixed|string the dataSpace UID.
     * @throws \Exception
     */
    public function getSpaceUID(){
        $spaceUID=NULL;
        $headers=getallheaders();
        if(is_array($headers)){
            if(array_key_exists(SPACE_UID_KEY,$headers)==true){
                $spaceUID=$headers[SPACE_UID_KEY];
            }
        }
        if (isset($spaceUID)){
            return $spaceUID;
        }
        throw new \Exception("Undefined space UID");
    }



    /**
     * Grabs the runUID or throws and Exception
     * @return mixed|string the dataSpace UID.
     * @throws \Exception
     */
    public function getRunUID(){
        $runUID=NULL;
        $headers=getallheaders();
        if(is_array($headers)){
            if(array_key_exists(RUN_UID_KEY,$headers)==true){
                $runUID=$headers[RUN_UID_KEY];
            }
        }
        if (isset($runUID)){
            return $runUID;
        }
        throw new \Exception("Undefined runUID");
    }





    /**
     * Locks the current execution preventing concurrent access to a critical code section in a given file.
     *      
     *      $sID=$this->lock(__FILE__)
     *      if ($sID === false){
     *          // Throw an exception.
     *      }
     *
     *      do some operaiton that require locking
     *      ...
     *
     *      $this->unlock($sID)
     *
     * @return resource a positive semaphore identifier on success, or <b>FALSE</b> on
     */
    public function lock($file){
        return $file;
        /*
        $key = ftok ( $file, 'R' );
        $max = 1;
        $permissions = 0666;
        $autoRelease = 1;

        $semaphoreIdentifier = sem_get ( $key ,$max,$permissions,$autoRelease);
        $success=sem_acquire ( $semaphoreIdentifier );
        return $success ? $semaphoreIdentifier : false;
        */
    }

    /*
     * Release the semaphore
     * @param $semaphoreIdentifier
     */
    public function unlock($semaphoreIdentifier){
        //sem_release ( $semaphoreIdentifier);
    }


    /**
     * Inserts a trigger into the triggers collection to be relayed via SSE.
     *
     * @param string $spaceUID
     * @param string $senderUID
     *  @param string $collectionName the collection name
     * @param string $origin the action that has created the trigger
     * @param string $homologousAction  e.g: `CreateUser would trigger homologous action `ReadUser`
     * @param mixed $reference can be a collection or a single instance.
     * @return  int  -1 if an error has occured and the trigger index on success.
     * @throws \Exception
     */
    public function relayTrigger($spaceUID,$senderUID,$collectionName,$origin,$homologousAction,$reference){

        // LOCK todo verify concurrency behaviour ?
        $sID=$this->lock(__FILE__);


        // Determine if the trigger should be ephemeral
        $ephemeral=NULL;
        $runUID="NO_UID";
        $allHEADER=getallheaders();
        if ($allHEADER!=false){
            if (array_key_exists('ephemeral',$allHEADER)){
                $ephemeral='1';
            }
            if(array_key_exists('runUID',$allHEADER)){
                $runUID=$allHEADER['runUID'];
            }
        }



        if (isset($spaceUID) && isset($homologousAction) && isset($reference)){
            $UIDS=$this->_extractUIDS($reference);

            if(!isset($senderUID) || $senderUID==""){
                if((strpos($homologousAction,"ReadUser")!==false) && count($UIDS)==1){
                    // It is an Auto-creation.
                    $senderUID=$UIDS[0];
                }else{
                    $senderUID='?('.count($UIDS).')';
                }

            }

            if (count($UIDS)>0){

                // Insert the trigger.
                $db=$this->getDB();
                /* @var \MongoCollection */
                $collection = $db->triggers;

                //$UIDSString=join(',',$UIDS);
                $trigger=new Trigger();
                $trigger->spaceUID=$spaceUID;
                $trigger->senderUID=$senderUID;
                $trigger->runUID=$runUID;
                $trigger->index=$collection->count();
                $trigger->origin=$origin;
                $trigger->collectionName=$collectionName;
                $trigger->action=$homologousAction;
                $trigger->UIDS=join(',',$UIDS);

                // Default write policy
                $options = array (
                    "w" => 1,
                    "j" => true
                );

                //Todo - how to encode trigger correctly before insertion?
                // We should have 

                $date=new \DateTime();
                $iso8601=$date->format(DATE_ISO8601);
                $q=array(
                                "spaceUID"=>$trigger->spaceUID,
                                "senderUID"=>$trigger->senderUID,
                                "runUID"=>$trigger->runUID,
                                "index"=>$trigger->index,
                                "origin"=>$trigger->origin,
                                "action"=>$trigger->action,
                                "collectionName"=>$trigger->collectionName,
                                "UIDS"=>$trigger->UIDS,
                                "creationDate"=>$iso8601
                );

                if (isset($ephemeral)){
                    // To consistent with current JOBject encodings in MongoDB.
                    // We use '1' and not true
                    $q['ephemeral']='1';
                }
                $r = $collection->insert( $q,$options );

                /////////////
                // UNLOCK !
                /////////////

                $this->unlock($sID);

                if ($r['ok']==1) {
                    return $trigger->index;
                } else {
                    return -1;
                }


            }else{
                /////////////
                // UNLOCK !
                /////////////
                $this->unlock($sID);
                throw new \Exception("Void UIDS for trigger $spaceUID $senderUID $homologousAction $reference",0);
            }
        }else{
            /////////////
            // UNLOCK !
            /////////////
            $this->unlock($sID);
            throw new \Exception("Inconsitent trigger $spaceUID $senderUID $homologousAction $reference",0);
        }
    }


    /**
     * Returns a json encoded string
     * @param $index with the triggerIndex and and optionnal message
     * @param $optionnalMessage
     * @return string
     */
    public function responseStringWithTriggerIndex($index,$optionnalMessage){
       if (isset($message)){
           return array("triggerIndex"=>$index,"message"=>$optionnalMessage);
       }else{
           return array("triggerIndex"=>$index);
       }

    }


    /**
     * Extracts the UIDS from a given reference.
     * @param $reference
     * @param array $UIDS
     * @return array
     */
    private function _extractUIDS($reference,$UIDS=array()) {
        if (isset($reference)){
            if (is_array($reference)){
                if (array_key_exists("_id",$reference)){
                    $UIDS[]=$reference["_id"];
                }else{
                    foreach ($reference as $element) {
                        if (is_array($element)){
                            return $this->_extractUIDS($element);
                        }elseif (is_string($element)){
                            $UIDS[]=$element;
                        }else{
                            //
                        }
                    }
                }
            }elseif (is_string($reference)){
                $UIDS[]=$reference;
            }
        }
        return $UIDS;
    }

}#BMS#->{"filename":"GateKeeper.php","checksum":1685262724,"relativePath":"Bartleby\/Core\/GateKeeper.php","size":18937}<-#BME#
<?php

namespace Bartleby\Core;

require_once __DIR__ . '/IAuthentified.php';
require_once __DIR__ . '/KeyPath.php';
require_once __DIR__ . '/Configuration.php';
require_once BARTLEBY_ROOT_FOLDER . '/Commons/EndPoints/Auth.php';

use Bartleby\Core\KeyPath;

//TODO Split and create MongoGateKeeper
use Bartleby\EndPoints\Auth;
use Bartleby\EndPoints\AuthCallData;
use \MongoClient;
use \MongoCollection;
use \MongoCursorException;
use \MongoDB;
use \MongoId;


/*
 * The GateKeeper implements the security layer of Bartleby's framework.
 */

class GateKeeper implements IAuthentified {


    /* @var  \Bartleby\Configuration */
    private $_configuration;

    /* @var string */
    private $_className;

    /* @var string */
    private $_methodName;

    /* @var array */
    private $_entitiesUIDS;

    /* @var array */
    private $_user;

    /*@var string */
    private $_currentUserToken;

    /*@var string */
    private $_currentUserUID;

    private $_spaceUID = DEFAULT_SPACE_UID;

    /* @var  array an Array with All the headers merged with the parameters. */
    private $_all;

    /* @var string */
    public $explanation = "";

    /**
     * @param Configuration $configuration
     * @param string $className
     * @param string $methodName
     */
    public function __construct(Configuration $configuration, $className, $methodName) {
        $this->_configuration = $configuration;
        $components = explode('\\', $className);
        $this->_className = end($components);
        $this->_methodName = $methodName;
        $this->_all = getallheaders();
    }


    /**
     * @param $parameters
     * @return bool
     */
    public function isAuthorized($parameters) {

        if (!isset($this->_configuration) || !isset($this->_className) || !isset($this->_methodName)) {
            throw new \Exception("Configuration, Class Name and MethodName  required");
        }

        if (is_array($parameters)) {
            $this->_all = array_merge($this->_all, $parameters);
            if (array_key_exists(SPACE_UID_KEY, $parameters)) {
                //Use the parameter
                $this->_spaceUID = $parameters[SPACE_UID_KEY];
            } else if (is_array($this->_all)) {
                // Lets try the headers
                if (array_key_exists(SPACE_UID_KEY, $this->_all) == true) {
                    $this->_spaceUID = $this->_all[SPACE_UID_KEY];
                }
            } else {
                // We donnot have any dID
                // _spaceUID will be equal to DEFAULT_spaceUID == 0
            }
        }

        $key = $this->_className . '->' . $this->_methodName;
        $rules = $this->_configuration->getPermissionsRules();
        if (array_key_exists($key, $rules)) {
            $currentRuleValue = $rules[$key];
            $level = $this->_levelOfRule($currentRuleValue);
            $this->explanation .= 'Applicable rule level = ' . $level . '. ';
            if ($level == PERMISSION_IS_BLOCKED) {
                // We block even the SuperAdmins
                return false;
            }
            $allowed = $this->_resultOfRule($level, $key, $currentRuleValue);
            if ($allowed) {
                return true;
            }
        } else {
            $this->explanation .= "Unexisting permission rule key! " . $key;
        }

        // By default if the permission is not blocked
        // any super admin is allowed
        return $this->_isSuperAdmin();
    }


    /**
     * Returns the level of the rule very strictly
     * Blocks  dynamic vicious circles and un consistent permissions
     * @param $rule
     * @param bool|false $wasDynamic
     * @return int
     */
    private function _levelOfRule($rule, $wasDynamic = false) {
        if (is_array($rule)) {
            $hasValidIdsList = false;
            if (array_key_exists(IDS_KEY, $rule)) {
                $ids = $rule[IDS_KEY];
                if (is_array($ids)) {
                    if (count($ids) > 0) {
                        $hasValidIdsList = true;
                    }
                }
            }
            if (array_key_exists(LEVEL_KEY, $rule)) {
                $level = $rule[LEVEL_KEY];
                if (is_numeric($level)) {
                    $level = $level + 0;
                    switch ($level) {

                        case PERMISSION_NO_RESTRICTION:
                            return PERMISSION_NO_RESTRICTION;

                        case PERMISSION_BY_TOKEN:
                            return PERMISSION_BY_TOKEN;

                        case PERMISSION_PRESENCE_OF_A_COOKIE:
                            return PERMISSION_PRESENCE_OF_A_COOKIE;

                        case PERMISSION_BY_IDENTIFICATION:
                            return PERMISSION_BY_IDENTIFICATION;

                        case PERMISSION_RESTRICTED_TO_ENUMERATED_USERS:
                            if ($hasValidIdsList == true) {
                                return PERMISSION_RESTRICTED_TO_ENUMERATED_USERS;
                            } else {
                                return PERMISSION_IS_BLOCKED;
                            }

                        case PERMISSION_RESTRICTED_BY_QUERIES:
                            return PERMISSION_RESTRICTED_BY_QUERIES;

                        case PERMISSION_RESTRICTED_TO_GROUP_MEMBERS:
                            return PERMISSION_RESTRICTED_TO_GROUP_MEMBERS;

                        case PERMISSION_IS_DYNAMIC:
                            if ($wasDynamic == true) {
                                // We do not want a dynamic vicious circle
                                return PERMISSION_IS_BLOCKED;
                            } else {
                                return PERMISSION_IS_DYNAMIC;
                            }

                        case PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY:
                            return PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY;
                    }
                }
            }
        }
        return PERMISSION_IS_BLOCKED;
    }

    /**
     * @param $level
     * @param $key
     * @param $rule
     * @return bool
     */
    private function _resultOfRule($level, $key, $rule) {
        switch ($level) {
            case PERMISSION_NO_RESTRICTION:
                return true;
            case PERMISSION_BY_TOKEN:
                return ($this->_tokenIsValid($rule, $this->_spaceUID));

            case PERMISSION_PRESENCE_OF_A_COOKIE:
                return $this->_configuration->hasUserAuthCookie($this->_spaceUID);

            case PERMISSION_BY_IDENTIFICATION:
                return $this->_identityIsValid($this->_spaceUID);

            case PERMISSION_RESTRICTED_TO_ENUMERATED_USERS:

                if (!$this->_resultOfRule(PERMISSION_BY_IDENTIFICATION, $key, $rule)) {
                    return false;
                }

                if (array_key_exists(IDS_KEY, $rule)) {
                    $ids = $rule[IDS_KEY];
                    if (is_array($ids)) {
                        $isEnumerated = in_array($this->_getCurrentUserUID(), $ids);
                        return $isEnumerated;
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }

            case PERMISSION_RESTRICTED_BY_QUERIES:

                if (!$this->_resultOfRule(PERMISSION_BY_IDENTIFICATION, $key, $rule)) {
                    return false;
                }

                if (array_key_exists(ARRAY_OF_QUERIES, $rule)) {
                    $queries = $rule[ARRAY_OF_QUERIES];

                    if (is_array($queries) && count($queries) > 0) {

                        $userID = $this->_getCurrentUserUID();
                        if (isset($userID)) {
                            $this->_getCurrentUser($userID);
                            if (isset($this->_user)) {
                                /*

                                Syntax of a query

                                       SELECT_COLLECTION_NAME
                                       WHERE_VALUE_OF_ENTITY_KEY
                                       EQUALS_VALUE_OF_PARAMETERS_KEY_PATH

                                       COMPARE_WITH_OPERATOR
                                       RESULT_ENTITY_KEY
                                       AND_PARAMETER_KEY or AND_CURRENT_USERID

                                The result is evaluated

                                */


                                foreach ($queries as $query) {
                                    if (

                                        array_key_exists(SELECT_COLLECTION_NAME, $query) &&
                                        array_key_exists(WHERE_VALUE_OF_ENTITY_KEY, $query) &&
                                        array_key_exists(EQUALS_VALUE_OF_PARAMETERS_KEY_PATH, $query) &&
                                        array_key_exists(RESULT_ENTITY_KEY, $query) &&
                                        array_key_exists(COMPARE_WITH_OPERATOR, $query) &&
                                        (array_key_exists(AND_PARAMETER_KEY, $query) || array_key_exists(AND_CURRENT_USERID, $query))
                                    ) {

                                        $collectionName = $query[SELECT_COLLECTION_NAME];
                                        $entityKey = $query[WHERE_VALUE_OF_ENTITY_KEY];
                                        $parameterKeyPath = $query[EQUALS_VALUE_OF_PARAMETERS_KEY_PATH];

                                        $parameterValue = KeyPath::valueForKeyPath($this->_all, $parameterKeyPath);

                                        if (isset($parameterValue)) {


                                            // Fetch the entity
                                            $entity = $this->_searchEntity($collectionName, $entityKey, $parameterValue);

                                            if (isset($entity)) {

                                                $resultEntityKey = $query[RESULT_ENTITY_KEY];
                                                $operand1 = NULL;
                                                $operand2 = NULL;

                                                if (array_key_exists($resultEntityKey, $entity)) {
                                                    $operand1 = $entity[$resultEntityKey];
                                                }

                                                if (array_key_exists(AND_CURRENT_USERID, $query)) {
                                                    $operand2 = $userID;
                                                } else if (!array_key_exists(AND_PARAMETER_KEY, $query)) {
                                                    $resultParameterKey = $query[AND_PARAMETER_KEY];
                                                    if (array_key_exists($resultParameterKey, $this->_all)) {
                                                        $operand2 = $this->_all[$resultParameterKey];
                                                    }
                                                }

                                                if (isset($operand1) && isset($operand2)) {

                                                    // PROCEED TO EVALUATION
                                                    $operator = $query[COMPARE_WITH_OPERATOR];
                                                    $result = false;
                                                    $toBeEvaluated = '$result=("' . $operand1 . '"' . $operator . '"' . $operand2 . '");';
                                                    eval($toBeEvaluated);
                                                    if ($result == true) {
                                                        return $result;
                                                    }

                                                }
                                            }
                                        }
                                    }
                                }


                            }
                        }
                    }
                }
                return false;


            case PERMISSION_RESTRICTED_TO_GROUP_MEMBERS:

                if (!$this->_resultOfRule(PERMISSION_BY_IDENTIFICATION, $key, $rule)) {
                    return false;
                }

                if (array_key_exists(IDS_KEY, $rule)) {
                    $ids = $rule[IDS_KEY];
                    if (is_array($ids)) {
                        return $this->_isInGroup($ids);
                    } else {
                        return false;
                    }
                } else {
                    return false;
                }

            case PERMISSION_IS_DYNAMIC;

                $rule = $this->_getDynamicPermissionForKey($key);
                $wasDynamic = true;
                $level = $this->_levelOfRule($rule, $wasDynamic);
                return $this->_resultOfRule($level, $key, $rule);

            case PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY:
                return $this->_isSuperAdmin();

            case PERMISSION_IS_BLOCKED:
                return false;

        }
        return false;
    }

    /**
     * Returns if the current user is super admin
     * @return bool
     */
    private function _isSuperAdmin() {
        $currentUID = $this->_getCurrentUserUID();
        $ids = $this->_configuration->getSuperAdminUIDS();
        if (is_array($ids)) {
            if (in_array($currentUID, $ids)) {
                return true;
            }
        }
        return false;
    }


    /// TOKEN

    /**
     * The token validity guarantees that the client knows the shared key
     * and is aware of Bartleby's security token policy.
     * It Verifies the conformity of the Headers or Params with the context,
     * Extracts a Token and compare the expected {key,value}
     * @return bool
     */
    private function _tokenIsValid($rule, $spaceUID) {
        if ($this->_configuration->BY_PASS_SALTED_TOKENS()) {
            return true;
        } else if (array_key_exists(TOKEN_CONTEXT_KEY, $rule)) {
            $context = $rule[TOKEN_CONTEXT_KEY];
            $tokenHeaderkey = str_replace("#" . SPACE_UID_KEY, "#" . $spaceUID, $context);
            $saltedTokenHeaderkey = $this->_configuration->saltWithSharedKey($tokenHeaderkey);
            $expectedValue = $this->_configuration->saltWithSharedKey($saltedTokenHeaderkey);
            if (array_key_exists($saltedTokenHeaderkey, $this->_all)) {
                $matches = ($this->_all[$saltedTokenHeaderkey] == $expectedValue);
                $this->explanation .= "Token is exists, " . ($matches ? "and its value matches! " : " but its value is not matching! ");
                return $matches;
            } else {
                $this->explanation .= 'Unexisting token key! ';
            }
        }

        return false;
    }


    /**
     * Returns true if we have found a valid user for this spaceUID
     * @return bool
     */
    private function _identityIsValid($spaceUID) {
        // The user is extracted via "kvid" httpheader value or via a Cookie.
        $userID = $this->_getCurrentUserUID();
        $this->explanation .= 'Configuration.issues:(' . implode(' ', $this->_configuration->issues) . ') ';
        if (isset($userID)) {
            $this->explanation .= "User has been extracted";
            $user = $this->_getCurrentUser($userID);
            if (isset($user)) {
                return true;
            } else {
                $this->explanation .= "User not found! ";
            }
        } else {
            $this->explanation .= "User cannot be extracted from cookie! ";
        }

        return false;
    }


    /**
     * Returns the dynamic permission for a given key
     * @param $key
     * @return array
     */
    private function _getDynamicPermissionForKey($key) {
        // Todo implement a fully dynamic approach if necessary
        // The dynamic features may be deprecated.
        return array();
    }


    /**
     * @return array|null the user or null
     */
    private function _getCurrentUser($userID) {
        if (strlen($userID)<24){
            return NULL;
        }
        if (isset($this->_user)) {
            return $this->_user;
        }
        $db = $this->getDB();
        /* @var \MongoCollection */
        $collection = $db->users;
        $q = array(MONGO_ID_KEY => $userID);
        try {
            $u = $collection->findOne($q);
            if (isset($u)) {
                $this->_user = $u;
            }
        } catch (\Exception $e) {
            // Silent
            return NULL;
        }
        return $this->_user;
    }


    private function _searchEntity($collectionName, $entityKey, $searchValue) {
        try {
            $db = $this->getDB();
            /* @var \MongoCollection */
            $collection = $db->{$collectionName};
            $q = array($entityKey => $searchValue);
            $r = $collection->findOne($q);
            if (isset($r)) {
                return $r;
            }
        } catch (\Exception $e) {
            // Silent
        }
        return null;
    }


    /**
     * Returns the current usedID form the cookie
     * @return string
     */
    private function _getCurrentUserUID() {
        if (isset($this->_currentUserUID)) {
            return $this->_currentUserUID;
        }
        $this->_currentUserUID = $this->_configuration->getUserID($this->_spaceUID);
        return $this->_currentUserUID;
    }


    /**
     * @return boolean
     */
    private function _isInGroup($ids) {
        $usedID = $this->_getCurrentUserUID();
        // TODO implement
        return false;
    }


    //////////////
    /// MONGO
    //////////////

    /**
     * The MongoDB
     *
     * @var $_db MongoDB
     */
    private $_db;// COUPLAGE A REDUIRE PLUS TARD


    protected function getDB() {
        if (!isset($this->_db)) {
            $client = $this->getMongoClient();
            if (isset($client)) {
                $this->_db = $client->selectDB($this->_configuration->MONGO_DB_NAME());
            }
        }
        return $this->_db;
    }

    /**
     * @return MongoClient
     */
    protected function getMongoClient() {
        if (!isset($this->_mongoClient)) {
            $this->_mongoClient = new MongoClient ();
        }
        return $this->_mongoClient;
    }


    ////////////////////
    // IAuthentified
    ////////////////////

    /*
     * @return array|null
     */
    public function getCurrentUser() {
        return $this->_user;
    }

    /**
     * @param array $current_user
     */
    public function setCurrentUser($current_user) {
        // For security purposes we prefer not to alter the $current_user
        /// $this->_user = $current_user;
    }
    
}#BMS#->{"filename":"Gateway.php","checksum":2498909070,"relativePath":"Bartleby\/Core\/Gateway.php","size":9057}<-#BME#
<?php

namespace Bartleby\Core;

require_once BARTLEBY_PUBLIC_FOLDER . 'Configuration.php';
require_once __DIR__ . '/Request.php';
require_once __DIR__ . '/RoutesAliases.php';
require_once __DIR__ . '/IResponse.php';
require_once __DIR__ . '/JsonResponse.php';
require_once __DIR__ . '/GateKeeper.php';
require_once __DIR__ . '/Mode.php';
require_once __DIR__ . '/IAuthentified.php';


/**
 * Class Gateway
 *
 * #1 This gateway routes the request to dedicated classes and invokes the relevant method
 * If a method is specified in the alias the method will be used
 * if not Bartleby we will call a method name per HTTP verb e.g $instance->POST($param)
 *
 * #2 It delegates the ACL to the Gatekeeper
 *
 * #3 Applies data filters (filter IN) before invocation and before response (filter OUT)
 *
 * @package Bartleby\Core
 */
class Gateway {

    /**
     * @var \Bartleby\Core\IResponse
     */
    private $_response;

    /**
     * @var string
     */
    private $_filterKey;

    /**
     * @var Configuration
     */
    private $_configuration;

    /**
     * @param Configuration $configuration
     * @param string $runMode
     */
    public function __construct(Configuration $configuration, $runMode = Mode::API) {

        $request = new Request();
        $path = $request->getPath();

        $this->_configuration = $configuration;
        
        // Search the relevant class file.
        // We put the CallData class within the endpoint class
        // To reduce the discovery operations.
        $searchPaths = $runMode == Mode::API ? $configuration->getEndpointsSearchPaths() : $configuration->getPagesSearchPaths();
        $routeAliases = $configuration->getRouteAliases($runMode);
        $context = $routeAliases->contextFromPath($path, $request->getParameters(), $request->getHTTPMethod());
        $entitiesName = $configuration->getEntitiesName($runMode);

        $unexistingPaths = array();

        // Try first to use a fixed Path 
        // So You can Overload the standard path and define a fixed One
        // To to so you can call `definePath in Configuration for example :
        // $this->definePath("ClassName", $this->_bartlebyRootDirectory . 'Commons/Overloads/EndPoints/ClassName.php');`
        $filePath = $configuration->getFixedPathForClassName($context->className);

        if ($filePath == "") {
            // There are no fixed paths.
            // Let's try to resolve using search Paths
            foreach ($searchPaths as $searchPath) {
                $possiblePath = $searchPath . $context->className . '.php';
                if (file_exists($possiblePath)) {
                    $filePath = $possiblePath;
                } else {
                    $unexistingPaths[] = $possiblePath;
                }
            }
        }

        if ($filePath == "") {
            // We haven't found any valid File Path
            if ($this->_configuration->DEVELOPER_DEBUG_MODE() == true) {
                $this->_response = new JsonResponse(array("message" => "Bartleby says:\"I would prefer not to!\" - No valid route found",
                    "unexistingPath" => $unexistingPaths,
                    "runMode" => $runMode,
                    "context" => $context
                ), 404);
            } else {
                $this->_response = new JsonResponse(array("message" => "Bartleby says:\"I would prefer not to!\" - No valid route found"
                ), 404);
            }
            return; //  stop the execution flow.
        } else {
            // That's the "normal case"
            // The related file has been found.

            try {

                // Let's require this file
                require_once $filePath;

                if (strpos($filePath,'/Overloads/')!==false){
                    // We use the overloaded class
                    $classForElement = '\\Bartleby\\' . $entitiesName . '\\Overloads\\' . $context->className;
                    // We donnot use the overloaded class.
                    $classForCallData = '\\Bartleby\\' . $entitiesName . '\\' . $context->callDataClassName;

                }else{
                    // We resolve the classes.
                    $classForElement = '\\Bartleby\\' . $entitiesName . '\\' . $context->className;
                    $classForCallData = '\\Bartleby\\' . $entitiesName . '\\' . $context->callDataClassName;

                }

                // Extract the method
                $methodName = (isset($context->method)) ? $context->method : $request->getHTTPMethod();

                // Extract the parameters
                $cleanParameters = $context->getCleanParameters();

                // Instantiate the GateKeeper
                $gateKeeper = new GateKeeper($configuration, $classForElement, $methodName);

                if ($this->_configuration->DISABLE_ACL() === true) {
                    // We authorize any operation
                    $authorized = true;
                }else{
                    $authorized = $gateKeeper->isAuthorized($cleanParameters);
                }

                if ($authorized === true) {
                    // We instantiate the class.
                    $instance = new $classForElement($configuration);

                    // Filter IN
                    $filteredParameters = $cleanParameters;
                    $this->_filterKey = $context->className . '->' . $methodName;
                    if ($this->_configuration->hasFilterIN($this->_filterKey)) {
                        $filteredParameters = $configuration->runFilterIN($this->_filterKey, $cleanParameters);
                    }

                    // Instanciate Call Data
                    $callDataInstance = new $classForCallData($filteredParameters);
                    if ($callDataInstance instanceof IAuthentified) {
                        /*@var IAuthentified */
                        $user = $gateKeeper->getCurrentUser();
                        $callDataInstance->setCurrentUser($user);
                    }

                    // Inject the information
                    //It is the special infos endpoint
                    if ($classForCallData == 'Bartleby\EndPoints\InfosCallData') {
                        /*@var $callDataInstance InfosCallData*/
                        $callDataInstance->configuration = $this->_configuration;
                    }

                    // We invoke the method
                    if (method_exists($instance, $methodName)) {
                        $response = $instance->{$methodName}($callDataInstance);
                        // Store the response
                        $this->_response = $response;
                        return; //  stop the execution flow.
                    } else {
                        $infos = array();
                        $infos [$configuration::INFORMATIONS_KEY] = 'Method ' . $methodName . ' is not supported';
                        $this->_response = new JsonResponse($infos, 405);
                        return; //  stop the execution flow.
                    }

                } else {
                    if ($this->_configuration->DEVELOPER_DEBUG_MODE() == true) {
                        $this->_response = new JsonResponse(array("cookies" => $_COOKIE,
                            "context" => $context,
                            "explanation" => $gateKeeper->explanation
                        ), 403);
                    } else {
                        $this->_response = new JsonResponse(VOID_RESPONSE, 403);
                    }
                    return; //  stop the execution flow.
                }

            } catch (\Exception $e) {
                if ($this->_configuration->DEVELOPER_DEBUG_MODE() == true) {
                    $this->_response = new JsonResponse(array("exception" => $e->getMessage(),
                        "context" => $context
                    ), 406);
                } else {
                    $this->_response = new JsonResponse(array("Exception" => $e->getMessage()
                    ), 406);
                }
                return; //  stop the execution flow.
            }
        }
    }

    /**
     * Sends the response or throws an Exception.
     * @throws \Exception
     */
    public function getResponse() {
        if (isset($this->_response)) {
            if ($this->_response instanceof IHTTPResponse){
                if ($this->_response->getStatusCode() <= 0) {
                    throw new \Exception("Inconsistent HTTPStatus code");
                }
            }
            if (isset($this->_response->data)) {
                // Run Filter OUT
                if ($this->_configuration->hasFilterOUT($this->_filterKey)) {
                    $this->_response->data = $this->_configuration->runFilterOUT($this->_filterKey, $this->_response->data);
                }
            }
            // Send the response
            $this->_response->send();
        } else {
            throw new \Exception("No response from gateway");
        }
    }

}#BMS#->{"filename":"HTMLResponse.php","checksum":1507784613,"relativePath":"Bartleby\/Core\/HTMLResponse.php","size":441}<-#BME#
<?php

namespace Bartleby\Core;

require_once __DIR__ . '/IResponse.php';
require_once __DIR__ . '/Response.php';

class HTMLResponse extends Response implements IResponse {

    public $document;
    public $statusCode;

    function send(){
        header('Content-Type: text/html;charset=UTF-8');
        header('HTTP/1.1 ' . $this->statusCode. ' ' . Response::getRequestStatus ($this->statusCode));
        echo $this->document;
    }

}#BMS#->{"filename":"IAuthentified.php","checksum":4061894419,"relativePath":"Bartleby\/Core\/IAuthentified.php","size":304}<-#BME#
<?php

namespace Bartleby\Core;

/*
 * The interface of any model that can be authentified
 */
interface IAuthentified{

    /**
     * @return array|null
     */
    public function getCurrentUser();

    /**
     * @param array $current_user
     */
    public function setCurrentUser($current_user);
}#BMS#->{"filename":"IFilter.php","checksum":3471847213,"relativePath":"Bartleby\/Core\/IFilter.php","size":90}<-#BME#
<?php

namespace Bartleby\Core;



interface IFilter {

    function filterData($data);

}#BMS#->{"filename":"IResponse.php","checksum":347819733,"relativePath":"Bartleby\/Core\/IResponse.php","size":155}<-#BME#
<?php

namespace Bartleby\Core;

interface IResponse {
    function send();
}

interface  IHTTPResponse extends  IResponse{
    function getStatusCode();
}#BMS#->{"filename":"JsonResponse.php","checksum":3102664758,"relativePath":"Bartleby\/Core\/JsonResponse.php","size":1641}<-#BME#
<?php


namespace Bartleby\Core;

require_once __DIR__ . '/IResponse.php';
require_once __DIR__ . '/Response.php';

class JsonResponse extends Response implements  IHTTPResponse{

    /* @var $data the data (we keep the property public for DataFilters) */
    public $data;

    /**
     * @var Integer|int
     */
    private $_statusCode=-1;

    /**
     * JsonResponse constructor.
     * @param $data
     * @param $statusCode Integer
     */
    public function __construct($data, $statusCode) {
        $this->data = $data;
        $this->_statusCode = $statusCode;
    }

    /*

    /**
     * @return mixed
     */
    public function getJsonEncodedData() {
        if(!is_array($this->data) && $this->data!=VOID_RESPONSE) {
            // We encapsulate in an array
            return json_encode(array($this->data));
        }
        return json_encode($this->data);
    }

    /**
     * @return int
     */
    public function getStatusCode() {
        return $this->_statusCode;
    }


    /**
     * Sends the response
     */
     function send() {
        // we use this for JSON response only
        // We can accounter also redirections so we prefer to set
        // the header contextually.
        $code=$this->getStatusCode();
        header ( "Access-Control-Allow-Origin: *" );
        header ( "Access-Control-Allow-Methods: *" );
        header ( "Content-Type: application/json" );
        $header = 'HTTP/1.1 ' . $code. ' ' . Response::getRequestStatus ($code);
        header ( $header );
        if (isset ( $this->data )) {
            echo $this->getJsonEncodedData();
        } else {
        }
    }
}
#BMS#->{"filename":"KeyPath.php","checksum":1717741547,"relativePath":"Bartleby\/Core\/KeyPath.php","size":2981}<-#BME#
<?php

namespace Bartleby\Core;

    // Todo support objects of any kind.

/**
 * Class KeyPath
 * Inspired by Cocoa KVC
 * @package Bartleby\Core
 */
class KeyPath {


    /**
     * Returns a value or null
     *
     * @param $instance
     * @param $keyPath
     * @return null
     */
    public static function valueForKeyPath($instance,$keyPath){
        $keyComponents=explode('.',$keyPath);
        if (count($keyComponents)>0){
            $key=array_shift($keyComponents);
            $c=count($keyComponents);
            if($c>1){
                $nextKeyPath=implode('.',$keyComponents);
            }else{
                $nextKeyPath=implode('',$keyComponents);
            }
            if (is_array($instance)){
                if(array_key_exists($key,$instance)) {
                    $member = $instance[$key];
                    if ($c==0){
                        return $member;
                    }
                    return KeyPath::valueForKeyPath($member, $nextKeyPath);
                }
            }
        }
        return NULL;
    }

    /**
     * Sets the value for a given keyPath
     *
     * @param $instance the instance is passed by reference.
     * @param $keyPath
     * @param $value
     */
    public static function setValueByReferenceForKeyPath(&$instance,$keyPath,$value){
        $keyComponents=explode('.',$keyPath);
        if (count($keyComponents)>0){
            $key=array_shift($keyComponents);
            $c=count($keyComponents);
            if($c>1){
                $nextKeyPath=implode('.',$keyComponents);
            }else{
                $nextKeyPath=implode('',$keyComponents);
            }
            if (is_array($instance)){
                if(array_key_exists($key,$instance)) {
                    if ($c==0){
                        $instance[$key]=$value;
                    }else{
                        KeyPath::setValueByReferenceForKeyPath($instance[$key], $nextKeyPath,$value);
                    }

                }
            }
        }
    }

    /**
     * Removes the entity at a given keypath
     * @param $instance the instance is passed by reference
     * @param $keyPath
     * @param $value
     */
    public static function removeKeyPathByReference(&$instance,$keyPath){
        $keyComponents=explode('.',$keyPath);
        if (count($keyComponents)>0){
            $key=array_shift($keyComponents);
            $c=count($keyComponents);
            if($c>1){
                $nextKeyPath=implode('.',$keyComponents);
            }else{
                $nextKeyPath=implode('',$keyComponents);
            }
            if (is_array($instance)){
                if(array_key_exists($key,$instance)) {
                    if ($c==0){
                        unset($instance[$key]);
                    }else{
                        KeyPath::removeKeyPathByReference($instance[$key], $nextKeyPath);
                    }
                }
            }
        }
    }



}#BMS#->{"filename":"Mode.php","checksum":2706741735,"relativePath":"Bartleby\/Core\/Mode.php","size":92}<-#BME#
<?php

namespace Bartleby\Core;

class Mode{
    const API='api';
    const PAGES='Pages';
}#BMS#->{"filename":"Model.php","checksum":3384345121,"relativePath":"Bartleby\/Core\/Model.php","size":4574}<-#BME#
<?php

namespace Bartleby\Core;

require_once __DIR__.'/ModelTransformer.php';


/**
 * Interface IPatchableFromDictionary
 * @package Bartleby\Core
 */
interface IPatchableFromDictionary {
    /**
     * When a member is a Model
     * you should add its class name to the mapping
     * Don't forget to import and declare the usage of the class.
     *
     * function classMapping(array $mapping=array()){
     *   $mapping['asset']='Asset';
     *   return parent::classMapping($mapping);
     * }
     *
     * How to map a collection ?
     * That's very easy :
     *
     * function classMapping(array $mapping=array()){
     *   $mapping['assets']=array('Asset');
     *   return parent::classMapping($mapping);
     * }
     *
     * @param array $mapping
     * @return array
     */
    function classMapping(array $mapping = array());
}


class Model implements IPatchableFromDictionary {

    public $UID;

    private $_classMapping;

    /**
     * A Model is a typed object that
     * can be populated from a an associative Array
     *
     * @param array $dictionary
     * @throws \Exception
     */
    public function __construct(array $dictionary=array()) {
        if(is_array($dictionary)){
            $this->patchFromDictionary($dictionary);
        }
    }


    /**
     * A generic method to patch an object with a bunch of key Values
     * @param array $dictionary
     * @return mixed
     */
    public final function patchFromDictionary(array $dictionary) {
        if (!empty($dictionary)) {
            foreach ($dictionary as $key => $value) {
                $this->patchKeyWithValue($key, $value);
            }
        }
    }

    /**
     * Apply the patch for a given key.
     * @param $key
     * @param $value
     * @return mixed
     * @throws \Exception
     */
    public final function patchKeyWithValue($key, $value) {
        $mapping = $this->classMapping();
        if (array_key_exists($key, $mapping)) {
            if (is_array($value) || !isset($value)) {
                $class = $mapping[$key];
                if(is_array($class)){
                    // It is a collection
                    $class=$class[0];
                    $this->{$key}=array();
                    foreach ($value as $itemValue) {
                        // Add the sub model to the collection
                        $this->{$key}[]=$this->_getSubModel($key,$class,$itemValue);
                    }
                }else{
                   $this->{$key}=$this->_getSubModel($key,$class,$value);
                }
            } else {
                throw new \Exception($key . ' must be populated from a dictionary');
            }
        } else {
            $this->{$key} = $value;
        }
    }


    /**
     *
     * Return the submodel
     * @param $key
     * @param $value
     * @param $classnameOrTransformerInstance
     * @return mixed
     * @throws \Exception
     */
    private function _getSubModel($key,$value,$classnameOrTransformerInstance){
        if(is_string($classnameOrTransformerInstance)){
            $submodel = new $classnameOrTransformerInstance();
            if (method_exists($submodel, 'patchFromDictionary')) {
                if (isset($value)) {
                    $submodel->patchFromDictionary($value);
                    return $submodel;
                }
            } else {
                throw new \Exception('Submodel ' . $key . ' should implement patchFromDictionary');
            }
        }else{
            // It is a transformer it will map the dictionary to a model.
            if(  is_subclass_of($classnameOrTransformerInstance,'Transformer')){
                return $classnameOrTransformerInstance->modelFromDictionary($value);
            }else{
                throw new \Exception( $classnameOrTransformerInstance . 'should be a model transformer');
            }

        }
        return null;

    }

    /**
     * When a member is a Model
     * you should add its class name to the mapping
     * Don't forget to import and declare the usage of the class.
     *
     * public function classMapping(array $mapping=array()){
     *
     *      return parent::_classMapping(array('mySubModel'=>"MySubModelClassName"));
     * }
     *
     *
     * @param array $mapping
     * @return array
     */
    function classMapping(array $mapping = array()) {
        if (!isset($this->_classMapping)) {
            $this->_classMapping = $mapping;
        }
        return $this->_classMapping;
    }


    // Todo implement toDictionary() - generative ?




}#BMS#->{"filename":"ModelTransformer.php","checksum":1942710936,"relativePath":"Bartleby\/Core\/ModelTransformer.php","size":303}<-#BME#
<?php

namespace Bartleby\Core;

interface IModelTransformer {
    function modelFromDictionary(array $dictionary);
}

abstract class Transformer implements  IModelTransformer{

    function modelFromDictionary(array $dictionary){
        return (new Model())->patchFromDictionary($dictionary);
    }
}
#BMS#->{"filename":"Request.php","checksum":435326389,"relativePath":"Bartleby\/Core\/Request.php","size":2945}<-#BME#
<?php

namespace Bartleby\Core;

//use Bartleby\Core\RoutesAliases;


class Request {

    /**
     * @var $_method string
     */
    private $_method;

    /* @var $_path string*/
    private $_path;

    /* @var $_parameters array*/
    private $_parameters=array();

    /**
     * Request constructor.
     */
    public function __construct() {

        // Requests from the same server don't have a HTTP_ORIGIN header
        if (! array_key_exists ( 'HTTP_ORIGIN', $_SERVER )) {
            $_SERVER ['HTTP_ORIGIN'] = $_SERVER ['SERVER_NAME'];
        }

        // PATH
        $this->_path = '/';
        if(array_key_exists('request',$_REQUEST)){
            $this->_path .= $_REQUEST ['request'];
            $posOfQuestionMark=strpos($this->_path,'?');
            // We filter the query string from the path
            if ($posOfQuestionMark !== false){
                $this->_path = substr($this->_path,0,$posOfQuestionMark);
            }
        }

        // METHOD
        $this->_method = strtoupper ( $_SERVER ['REQUEST_METHOD'] );
        if ($this->_method == 'POST' && array_key_exists ( 'HTTP_X_HTTP_METHOD', $_SERVER )) {
            if ($_SERVER ['HTTP_X_HTTP_METHOD'] == 'DELETE') {
                $this->_method = 'DELETE';
            } else if ($_SERVER ['HTTP_X_HTTP_METHOD'] == 'PUT') {
                $this->_method = 'PUT';
            } else {
                throw new \Exception ("Undefined Http Method");
            }
        }

        // PARAMETERS
        $this->_parameters=$_REQUEST;
        if(array_key_exists('request',$this->_parameters)){
            unset($this->_parameters['request']);
        }
        if(array_key_exists('XDEBUG_SESSION_START',$this->_parameters)){
            unset($this->_parameters['XDEBUG_SESSION_START']);
        }
        if(array_key_exists('XDEBUG_SESSION',$this->_parameters)){
            unset($this->_parameters['XDEBUG_SESSION']);
        }

        // (!) We donnot want to add attachments data to the parameters.
        // But we can sometimes use "php://input"
        // to extract JSON encoded params from the body
        if ( (!array_key_exists('HTTP_CONTENT_DISPOSITION',$_SERVER))
            || strpos($_SERVER['HTTP_CONTENT_DISPOSITION'],'attachment')===false){
            $flow=file_get_contents("php://input" );
            $flowVariables=json_decode($flow,true);
            if(isset($flowVariables)){
                $this->_parameters=array_merge($flowVariables,$this->_parameters);
            }
        }
        // CURRENTLY We don't urlDecode anymore the parameters keys,value

    }

    /**
     * @return string
     */
    public function getPath() {
        return $this->_path;
    }


    /**
     * @return array
     */
    public function getParameters() {
        return $this->_parameters;
    }

    /**
     *
     * @return string
     */
    public function getHTTPMethod() {
        return $this->_method;
    }

}#BMS#->{"filename":"Response.php","checksum":3125024405,"relativePath":"Bartleby\/Core\/Response.php","size":1880}<-#BME#
<?php

namespace Bartleby\Core;


class Response {
    /**
     *
     * @param int $code
     * @return string
     */
    public static function getRequestStatus($code) {
        $status = array (
            100 => 'Continue',
            101 => 'Switching Protocols',
            200 => 'OK',
            201 => 'Created',
            202 => 'Accepted',
            203 => 'Non-Authoritative Information',
            204 => 'No Content',
            205 => 'Reset Content',
            206 => 'Partial Content',
            300 => 'Multiple Choices',
            301 => 'Moved Permanently',
            302 => 'Found',
            303 => 'See Other',
            304 => 'Not Modified',
            305 => 'Use Proxy',
            306 => '(Unused)',
            307 => 'Temporary Redirect',
            400 => 'Bad Request',
            401 => 'Unauthorized',
            402 => 'Payment Required',
            403 => 'Forbidden',
            404 => 'Not Found',
            405 => 'Method Not Allowed',
            406 => 'Not Acceptable',
            407 => 'Proxy Authentication Required',
            408 => 'Request Timeout',
            409 => 'Conflict',
            410 => 'Gone',
            411 => 'Length Required',
            412 => 'Precondition Failed',
            413 => 'Request Entity Too Large',
            414 => 'Request-URI Too Long',
            415 => 'Unsupported Media Type',
            416 => 'Requested Range Not Satisfiable',
            417 => 'Expectation Failed',
            423 => 'Locked',
            500 => 'Internal Server Error',
            501 => 'Not Implemented',
            502 => 'Bad EndPointsGateway',
            503 => 'Service Unavailable',
            504 => 'EndPointsGateway Timeout',
            505 => 'HTTP Version Not Supported'
        );
        return ($status [$code]) ? $status [$code] : $status [500];
    }
}#BMS#->{"filename":"RoutesAliases.php","checksum":4097171121,"relativePath":"Bartleby\/Core\/RoutesAliases.php","size":7181}<-#BME#
<?php

namespace Bartleby\Core;

require_once __DIR__ . '/ContextDescriptor.php';


class RoutesAliases {

    /**
     * Route aliases support path templating and variables extraction.
     *
     * "/user/{userId}/comments/{numberOfComment}"
     * would normally use the class : UserCommentsWith
     *
     * but if there is an alias it will use its alias
     * e.g '/user/{userId}/comments/'=>'CommentsByUser'
     * It will use the CommentsByUser class.
     *
     * userId value will be added ContextDescriptor->parametersInPath['userId']=2992
     * if the string seems to be a numeric value it will be casted to an integer.
     *
     *
     * Routes Configuration by samples
     *
     *  For PAGES explicit mapping is required :
     *
     *  yd.local and yd.local/ will point to the Start.php page.
     *  ''=>'Start'
     *
     *  yd.local/time
     *  'time'=>'Time',
     *
     * You can specify a not found mapping
     * '*' => 'NotFound'
     *
     *
     * For ENDPOINTS :
     *
     *      You can restrict to one method by prefixing the "<HTTPMethod>:"
     *      'GET:/user/{userId}/comments'=>CommentsByUser
     *
     *      You can specify a method name
     *      'POST:/user/{userId}/comments'=>array('CommentsByUser','POST_method_for_demo')
     *
             Explicit mapping like: "'nuggets'=>'Nuggets'" is not usefull
     *
     *       This is simple route alias api/v1/time will call SSTime (for any supported HTTPMethod)
     *      'time'=>'SSETime' // A server sent event sample
     *
     *
     **/

    private $_mapping = array();

    private $_class_name_suffix='';

    private $_parameters_indexes=array();

    /**
     * @var string
     */
    private $_methodName;


    /**
     * RoutesAliases constructor.
     * @param array $mapping
     */
    public function __construct(array $mapping) {
        $this->_mapping = $mapping;
    }


    /**
     * Adds aliases or replaces existing aliases !
     * @param array $aliases
     */
    public function addAliasesToMapping(array $aliases){
        foreach ($aliases as $alias => $destination) {
            $this->_mapping[$alias]=$destination;
        }
    }

    public function contextFromPath($path,array $parameters,$httpMethod) {
        $contextDescriptor = new ContextDescriptor();
        $contextDescriptor->parameters=$parameters;
        $class_name = '';
        $hasBeenAliased=false;
        if (array_key_exists($path, $this->_mapping)) {
            $class_name =$this->_extractMethodNameAndReturnDescriptor($this->_mapping[$path]);
        } else {
            $filteredPath = ltrim($path, '/');
            $filteredPath = rtrim($filteredPath, '/');
            foreach ($this->_mapping as $alias => $aliased) {

                // Method prefix support in aliases.
                $httpMethods=array('POST','GET','PUT','DELETE');
                $aliasForcedHttpMethod=NULL;
                foreach($httpMethods  as $supportedMethod){
                   if(strpos($alias, $supportedMethod.':')!==false){
                       $aliasForcedHttpMethod=$supportedMethod;
                   }
                }
                if (isset($aliasForcedHttpMethod) && $aliasForcedHttpMethod!=$httpMethod){
                    // That's not the good HTTP method
                    continue;
                }
                if (isset($aliasForcedHttpMethod) && $aliasForcedHttpMethod==$httpMethod){
                    // That's the good HTTP method
                    // Let's remove the prefix
                    $alias=str_replace($httpMethod.':','',$alias);
                }

                $this->_parameters_indexes=array();//reset
                $this->_methodName=NULL;
                if ($this->_mapsTheAlias($filteredPath, $alias, $contextDescriptor)) {
                    if(is_array($aliased)){
                        $class_name =$aliased[0];
                        if (count($aliased)>=1){
                            $this->_methodName=$aliased[1];
                        }
                    }else{
                        $class_name = $aliased;
                    }
                    $hasBeenAliased=true;
                    break;
                }
            }
            if ($class_name === '') {
                $pathParts = explode('/', $filteredPath);
                $i=0;
                foreach($pathParts as $part){
                    if(! in_array($i,$this->_parameters_indexes)){
                        $class_name.=ucfirst($part);
                    }
                    $i++;
                }
            }
        }
        if($hasBeenAliased==false){
            $class_name.=$this->_class_name_suffix;
        }
        $contextDescriptor->className = ucfirst($class_name);

        $contextDescriptor->callDataClassName = ucfirst($class_name) . 'CallData';
        $contextDescriptor->method=$this->_methodName;// If Null the Gateway we will use generic HTTP methods
        return $contextDescriptor;
    }


    private function _mapsTheAlias($path, $alias, $contextDescriptor) {
        if($alias=='*'){
            return true;
        }
        $stringAlias=$this->_extractMethodNameAndReturnDescriptor($alias);
        $a = ltrim($stringAlias, '/');
        $a = rtrim($a, '/');
        $pathParts = explode('/', $path);
        $aliasParts = explode('/', $a);
        if (count($aliasParts) != count($pathParts)) {
            return false;
        }
        $parameters = array();
        $i = 0;
        foreach ($aliasParts as $aliasPart) {
            $starts=substr($aliasPart,0,1);
            $ends=substr($aliasPart, -1,1);
            $isAVariable = ( $starts== "{" && $ends== "}");
            if ($isAVariable == true) {
                $variableName=substr($aliasPart,1,strlen($aliasPart)-2);
                $variableValue=$pathParts[$i];
                if(is_numeric($variableValue)){
                    $variableValue=$variableValue+0;// Convert to Scalar Ohh my God ... PHP! :)
                }
                $parameters[$variableName]=$variableValue;
                $this->_parameters_indexes[]=$i;
            } else if ($pathParts[$i] !== $aliasPart) {
                return false;
            }
            $i++;
        }
        $nbOfPInP=count($parameters);
        if($nbOfPInP==1){
            $this->_class_name_suffix='By';
        }elseif ($nbOfPInP>1){
            $this->_class_name_suffix='With';
        }
        // We add the path parameters to the context
        $contextDescriptor->parameters=array_merge($contextDescriptor->parameters,$parameters);
        return true;
    }


    private function _extractMethodNameAndReturnDescriptor($mapping){
        if(is_array($mapping)){
            if (count($mapping)>=1) {
                $this->_methodName = $mapping[1];
                return $mapping[0];
            }else{
                // There is no explicit method Name;
                return false;
            }
        }elseif (is_string($mapping)){
            return $mapping;
        }
    }

    /**
     * The mapping array
     * @return array
     */
    public function getMapping(){
        return $this->_mapping;
    }
}#BMS#->{"filename":"ServerSentEvent.php","checksum":3534155297,"relativePath":"Bartleby\/Core\/ServerSentEvent.php","size":1798}<-#BME#
<?php

namespace Bartleby\Core;

use Closure;

require_once BARTLEBY_ROOT_FOLDER.'Core/IResponse.php';

/**
 * Class ServerSentEvent
 * Implements Closure based Server Side events.
 * You should override check SSETime for a concrete Example
 *
 * IMPORTANT NOTE (!)
 * This implementation need to run as MOD on linux apache
 * mod_php (run as Apache's user)
 * the  ob_flush() call Is Needed on Linux
 * This code will not work using FAST CGI or CGI
 *
 * @package Bartleby\Core
 */
class ServerSentEvent extends  \stdClass implements IResponse {

    /* @var $callBack Closure */
    public $callBack;

    private $_frequencyPerHour;

    private $_sleepDuration;

    public function __construct($frequencyPerHour){
        $this->_frequencyPerHour= (isset($frequencyPerHour)&& $frequencyPerHour>0) ? $frequencyPerHour : 10 ;
        $this->_sleepDuration=(3600/$this->_frequencyPerHour);
    }

    /**
     * Sends the response
     */
    function send() {
        header('Content-Type: text/event-stream');
        header('Cache-Control: no-cache');
        header("Connection: keep-alive");
        while(true) {
            if ($this->_is_closure($this->callBack)) {
                $this->callBack->__invoke();
            }else{
                throw new \Exception("Closure expected in ServerSentEvent");
            }
            sleep($this->_sleepDuration);
        }
    }

    private function _is_closure($t) {
        return is_object($t) && ($t instanceof Closure);
    }


    public function sendMsg($id,$eventName, $msg) {
        echo "id: $id" . PHP_EOL;
        echo "event: $eventName". PHP_EOL;
        echo "data: $msg" . PHP_EOL;
        echo PHP_EOL;
        if (PHP_OS != "Darwin") {
            ob_flush(); // Needed on Linux (!)
        }
        flush();
    }

}#BMS#->{"filename":"Stages.php","checksum":271076286,"relativePath":"Bartleby\/Core\/Stages.php","size":183}<-#BME#
<?php

namespace Bartleby\Core;

class Stages{
    const LOCAL='local';
    const DEVELOPMENT='development';
    const ALTERNATIVE='alternative';
    const PRODUCTION='production';
}
#BMS#->{"filename":"FAQ.md","checksum":410040622,"relativePath":"Bartleby\/FAQ.md","size":764}<-#BME#
# FAQ 


## Do i need MongoDB ?
Currently Bartleby's api are relying on : PHP / MONGODB + JSON

## So What are the server prerequisits?

1. Min version of **PHP is 5**
2. **enable mcrypt** 
3. **allow cookies**
4. configure the **MongoDb php client**
5. to support **Server Sent Event** (aka SSE) on LINUX + APACHE we need to run as PHP as a module *apache mod_php* (run as Apache's user). **FAST CGI or CGI do not work currently**

### How to install mcrypt for PHP5 on Debian ?
```
sudo apt-get install php5-mcrypt
sudo php5enmod mcrypt
```
Then restart the web server.

####  How to test that mcrypt is available?
```
<BaseURL>www/tools/is-mcrypt-supported.php
```

####  How to test that cookies are enabled?
```
<BaseURL>www/tools/are-cookies-enabled.php
```
#BMS#->{"filename":"MongoCallDataRawWrapper.php","checksum":2338404029,"relativePath":"Bartleby\/Mongo\/MongoCallDataRawWrapper.php","size":841}<-#BME#
<?php


namespace Bartleby\mongo;

require_once dirname(__DIR__) . '/Core/CallDataRawWrapper.php';

use Bartleby\Core\CallDataRawWrapper;

class MongoCallDataRawWrapper extends CallDataRawWrapper {

    // Sort values must be casted to numeric values
    // So we propose some facilities to transform

    function getCastedDictionaryForKey($key){
       return $this->castNumericValues($this->getValueForKey($key));
    }

    function castNumericValues($values){
        if(!is_array($values)){
            return $values;
        }
        foreach ($values as $key => $value){
            if(is_array($value)){
                $this->castNumericValues($value);
            }else{
                if(is_numeric($value)){
                    $values[$key]=0+$value;
                }
            }
            return $values;
        }
}

}#BMS#->{"filename":"MongoConfiguration.php","checksum":928267499,"relativePath":"Bartleby\/Mongo\/MongoConfiguration.php","size":988}<-#BME#
<?php


namespace Bartleby\Mongo;

require_once BARTLEBY_ROOT_FOLDER . 'Core/Configuration.php';

use Bartleby\Core\Configuration;

class MongoConfiguration extends Configuration {

    // MONGO DB DEFAULT VALUES

    protected $_MONGO_DB_NAME='Set up your Mongo db name';
    protected $_MONGO_USERS_COLLECTION='users';
    protected $_MONGO_SPACE_UID_KEY_PATH='spaceUID';
    protected $_MONGO_USER_PASSWORD_KEY_PATH='password';

    /**
     * @return string
     */
    public function MONGO_DB_NAME() {
        return $this->_MONGO_DB_NAME;
    }

    /**
     * @return string
     */
    public function MONGO_USERS_COLLECTION() {
        return $this->_MONGO_USERS_COLLECTION;
    }


    /**
     * @return string
     */
    public function MONGO_SPACE_UID_KEY_PATH() {
        return $this->_MONGO_SPACE_UID_KEY_PATH;
    }

    /**
     * @return string
     */
    public function MONGO_USER_PASSWORD_KEY_PATH() {
        return $this->_MONGO_USER_PASSWORD_KEY_PATH;
    }

}#BMS#->{"filename":"MongoController.php","checksum":3991429449,"relativePath":"Bartleby\/Mongo\/MongoController.php","size":3301}<-#BME#
<?php

namespace Bartleby\Mongo;

use Bartleby\Core\Controller;
use Bartleby\Core\IPersistentController;
use \MongoClient;
use \MongoCursorException;
use \MongoDB;
use \Bartleby\Core\JsonResponse;

require_once __DIR__ . '/MongoConfiguration.php';
require_once dirname(__DIR__) . '/Core/Controller.php';

class MongoController extends Controller implements IPersistentController {

    /* @var User */
    private $_user;


    /**
     * The MongoDB
     *
     * @var MongoDB
     */
    private $_db;

    /**
     * The Mongo client
     *
     * @var MongoClient
     */
    private $_mongoClient;


    /**
     *  constructor.
     * @param MongoConfiguration $configuration
     */
    public function __construct(MongoConfiguration $configuration) {
        $this->_configuration = $configuration;
    }


    /**
     * @return MongoDB
     */
    protected function getDB() {
        try{
            if (!isset($this->_db)){
                $client= $this->getMongoClient();
                if(isset($client)){
                    $this->_db =$client->selectDB ($this->getConfiguration()->MONGO_DB_NAME());
                }
            }
            return $this->_db;
        }catch (\MongoConnectionException $e){
               throw new \Exception("MongoDB Connection Issue. ".$e->getMessage());
        }
    }


    /**
     * @return MongoClient
     */
    protected function getMongoClient() {
        if (!isset($this->_mongoClient)){
            $this->_mongoClient = new MongoClient ();
        }
        return $this->_mongoClient;
    }


    /**
     * @return \Bartleby\Mongo\MongoConfiguration
     */
    protected function getConfiguration(){
        return $this->_configuration;
    }

    ///////////////////////////
    // IPersistentController
    ///////////////////////////


    public function getUser(){
        if (isset($this->_user)){
            return $this->_user;
        }
        $id=$this->getCurrentUserID();
        if(isset($id)){
            /* @var MongoConfiguration */
            $mongoConf=$this->getConfiguration();
            $db=$this->getDB();
            $usersCollection=$mongoConf->MONGO_USERS_COLLECTION();
            $usernameKey=$mongoConf->MONGO_USER_NAME_KEY_PATH();
            $users = $db->{$usersCollection};
            try {
                $q = array (
                    $usernameKey =>$userName
                );
                $user = $users->findOne ( $q );
                if (isset ( $user )) {
                    $passwordMatches=($user->{$mongoConf->MONGO_USER_PASSWORD_KEY_PATH()} === $this->_configuration->salt($password));
                    if (!$passwordMatches){
                        return new JsonResponse($user,200);
                    }
                    return new JsonResponse($user,200);
                } else {
                    return new JsonResponse($user,404);
                }
            } catch ( MongoCursorException $e ) {
                return new JsonResponse('MongoCursorException' . $e->getCode() . ' ' . $e->getMessage(), 417);
            }

        }else{
            return User::visitor();
        }

    }

    public function authenticationIsValid (){
        $id=$this->getCurrentUserID();
        // @todo Check the validity
        return true;
    }





}#BMS#->{"filename":"MongoEndPoint.php","checksum":2680817025,"relativePath":"Bartleby\/Mongo\/MongoEndPoint.php","size":530}<-#BME#
<?php

namespace Bartleby\Mongo;

require_once dirname(__DIR__) . '/Core/CallData.php';
require_once dirname(__DIR__) . '/Core/CallDataRawWrapper.php';
require_once dirname(__DIR__) . '/Core/JsonResponse.php';
require_once dirname(__DIR__) . '/Core/Configuration.php';
require_once __DIR__ . '/MongoController.php';
require_once __DIR__ . '/MongoCallDataRawWrapper.php';


class MongoEndPoint extends MongoController {

    public $POST = "POST";
    public $GET = "GET";
    public $PUT = "PUT";
    public $DELETE = "DELETE";

}#BMS#->{"filename":"MongoHTML5Page.php","checksum":1255892005,"relativePath":"Bartleby\/Mongo\/MongoHTML5Page.php","size":127}<-#BME#
<?php

namespace Bartleby\Mongo;

require_once __DIR__ . '/MongoPage.php';

abstract class MongoHTML5Page extends MongoPage {
}#BMS#->{"filename":"MongoPage.php","checksum":1648601932,"relativePath":"Bartleby\/Mongo\/MongoPage.php","size":2539}<-#BME#
<?php

namespace Bartleby\Mongo;

require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoController.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/CallDataRawWrapper.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/HTMLResponse.php';

use \MongoClient;


abstract class MongoPage extends MongoController {

    public $POST = "POST";
    public $GET = "GET";

    protected $_title='';
    protected $_charset='utf-8';
    protected $_lang='en';


    // HEAD
    private $_TOP_SCRIPTS=array();
    // End of the document.
    private $_BOTTOM_SCRIPTS=array();
    //
    private $_METAS=array();
    //
    private $_CSS=array();

    
    /***
     * Adds a css file link.
     * @param string $relativePath
     */
    protected  function addCSS($relativePath){
        $this->_CSS[]=$relativePath;
    }

    /***
     * Adds a script
     * @param $script
     */
    protected  function addTopScript($script){
        $this->_TOP_SCRIPTS[]=$script;
    }

    /***
     * Adds a script
     * @param $script
     */
    protected  function addBottomScript($script){
        $this->_BOTTOM_SCRIPTS[]=$script;
    }

    /**
     * Import a JS File 
     * e.g : $this->importJSFile('static/js/TimeSSE.js');
     * @param $relativePath
     */
    protected  function importJSFile($relativePath){
        $this->_BOTTOM_SCRIPTS[]='<script src="'.$this->absoluteUrl($relativePath).'"></script>';
    }
    
    /***
     * Adds a Meta
     * e.g: $this->addMeta('<meta name="keywords" lang="en" content="arts">')
     * @param $metaLine
     */
    protected  function addMeta($metaLine){
        $this->_METAS[]=$metaLine;
    }


    // The accessors

    protected function _CSSLink(){
        $links='';
        foreach ($this->_CSS as $link) {
            $links .= '
    <link href="'.$link.'" rel="stylesheet">';
        }
        return $links;
    }



    protected  function _top_scripts(){
        $scripts='';
        foreach ($this->_TOP_SCRIPTS as $script) {
            $scripts .= $script;
        }
        return $scripts;
    }


    protected  function _bottom_scripts(){
        $scripts='';
        foreach ($this->_BOTTOM_SCRIPTS as $script) {
            $scripts .= $script;
        }
        return $scripts;
    }

    protected  function _metas(){
        $metas='';
        foreach ($this->_METAS as $meta) {
            $metas .= $meta;
        }
        return $metas;
    }

    //

    public function absoluteUrl($relativePath){
        return $this->_configuration->HOST().ltrim($relativePath,'/');
    }

}#BMS#->{"filename":"ReadMe.md","checksum":1818996625,"relativePath":"Bartleby\/ReadMe.md","size":12417}<-#BME#
# Bartleby Version 1.0 #

Bartleby is a robust framework for Fault Tolerent Natives Distributed Desktop & Mobile Apps. 
It provides a integrated full stack  (clients and servers Api)
Api are written in PHP and uses MongoDB as document store.

It offers a unique distributed execution strategy and a solid permission and security model that enables to build complex collaborative tools efficiently. It has been developed to be used in and is fully integrated with a code generator called 'Flexions'.

Bartleby 1.0 has been developed by Benoit Pereira da Silva [Benoit Pereira da Silva](https://pereira-da-silva.com) for [Chaosmos SAS](http://chaosmos.fr).
Bartleby is licensed to its customers. 

## Code generation ## 

We use a swagger 2.0 descriptor to generate code both server side and client side.
1. You should first proceed to modeling  "swagger.definitions" 
2. You can use the "Flexions/modules/Bartleby/swagger-meta-template" to generate the Swagger paths to provide Entity CRUD, and collection of entities CRUD endpoints.
3. You can generate the server side & clients side components.

### server side API 

- project skeleton
- per entity endpoints (CRUD)/ collections (CRUD) 
- Authentication and permissions.
- pages

### client side libraries

iOS / Mac OS x
- models
- endpoints commands
- collection controllers

## The www folder 

## OTHERS 

- .htacess (when using apache)
- Configuration.php
- destructiveInstaller.php (to be deleted on deployment)
- index.php (routes http://host.ext/ to pages/go.php

### API 

- api/ 
- api/<version>/endpoints/ 
- api/<version>/_generated/
- api/<version>/_generated/endpoints/
- api/<version>/_generated/models/
- api/go.php
- _generated/
- _generated/<version>/GeneratedConfiguration.php

### PAGES 

- pages/
- pages/go.php
- pages/<version>/
- pages/<version>/pages/


# API run cycle

+ index.php or .htacess invokes -> go.php
+ it instanciate the Gateway that resolve the route
+ the route is translated to classes and parameters are deserialized
+ the context is passed to the GateKeeper that allows or rejects the call according to the permissions rules
+ If a filter IN applies the data is proceeded
+ if allowed the Relevent method of the class is called with is parametric context.
+ If a filter OUT applies the data is proceeded


# Bartleby's Permission model 

Bartleby uses permissions that are declared in the configuration file.
Bartleby's Permission model based on levels. 

## Permission levels

From Level 1 (PERMISSION_NO_RESTRICTION access with no restriction) to levele 131072 (PERMISSION_IS_BLOCKED)
The gatekeeper check if the path is allowed in the current context.
The permission are verified on any method call.

+ PERMISSION_IS_STATIC = 0 (implicit)
+ PERMISSION_NO_RESTRICTION = 1 
+ PERMISSION_BY_TOKEN = 2
+ PERMISSION_PRESENCE_OF_A_COOKIE = 3
+ PERMISSION_BY_IDENTIFICATION = 4
+ PERMISSION_RESTRICTED_TO_ENUMERATED_USERS = 5 
+ PERMISSION_RESTRICTED_BY_QUERIES = 6 
+ PERMISSION_RESTRICTED_TO_GROUP_MEMBERS = 9
+ PERMISSION_IS_DYNAMIC=32768 // We reserve the ability to add new permission types
+ PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY=65536
+ PERMISSION_IS_BLOCKED=131072 // For security purpose we can lock super admin


## The GateKeeper 

Extracts the permission "rule" 
rule A = if there is permission for the local key = 'PathClassName->MethodName'

If the permission is dynanic (rule A or B returns a level >= PERMISSION_IS_DYNAMIC) GateKeeper can deduct the dynamic permission key.
The rule C = the dynamic rule loaded from the permission collection.

If the rule is valid the call occurs, else Bartleby responds an http status code 403=>'Forbidden'  (not 401=>'Unauthorized')
If the current user is SuperAdmin && PERMISSION_IS_BLOCKED the call is blocked.

### Levels descriptions  

#### Level 1 (PERMISSION_NO_RESTRICTION)
Access with no restriction
     
     array ( 'PathClassName->MethodName' => array( 'level' => PERMISSION_NO_RESTRICTION)
     
#### Level 2 (PERMISSION_BY_TOKEN)
Verification of the token 
We check if the token is valid within the context
The $spaceUID can be injected in the name string if there is a #spaceUID in the declaration
To determine the validity we compute the value as  MD5(SHARED_SALT.name)

     array ('PathClassName->MethodName' => array( 'level' => PERMISSION_BY_TOKEN,TOKEN_CONTEXT,'PathClassName#spaceUID') 
     array ('CreateUser->call'=>array('level' => PERMISSION_BY_TOKEN,TOKEN_CONTEXT=>'CreateUser#spaceUID') 
    
#### Level 3 (PERMISSION_PRESENCE_OF_A_COOKIE)
On successful authentication a cookie is placed (the client should store it)
Any call without that cookie is reputed not identified

    array ( 'PathClassName->MethodName' => array( 'level' => PERMISSION_PRESENCE_OF_A_COOKIE,'name'=>'user-#spaceUID','value'=>'') 

#### Level 4 (PERMISSION_BY_IDENTIFICATION)
Verification of the cookie 
We check if the cookie correspond to a valid identified user.

    array ( 'PathClassName->MethodName' => array( 'level' => PERMISSION_BY_IDENTIFICATION) 

#### Level 5 (PERMISSION_RESTRICTED_TO_ENUMERATED_USERS)
Per path permission for enumerated users 

    array ( 'PathClassName->MethodName' => array( 'level' => PERMISSION_RESTRICTED_TO_ENUMERATED_USERS, 'ids' => ['<UserID>'])
    array ( 'PathClassName->MethodName(entityUID)' => array( 'level' => PERMISSION_RESTRICTED_TO_ENUMERATED_USERS_FOR_A_GIVEN_ID,'ids' => ['<UserID>'])

#### Level 6 (PERMISSION_RESTRICTED_BY_QUERIES)

We run queries if one of the query is successfull the action is permitted. 
You can use AND_CURRENT_USERID => true or AND_PARAMETER_KEY=>"<your propertyname>" for the predicate evaluation.

       'UpdateUser->call'=>array(
          'level' => PERMISSION_RESTRICTED_BY_QUERIES,
          ARRAY_OF_QUERIES =>array(
              "hasCreatedCurrentUser"=>array(
                  SELECT_COLLECTION_NAME=>'users',
                  WHERE_VALUE_OF_ENTITY_KEY=>'_id',
                  EQUALS_VALUE_OF_PARAMETERS_KEY_PATH=>'user._id',

                  COMPARE_WITH_OPERATOR=>'==',
                  RESULT_ENTITY_KEY=>'creatorUID',
                  AND_CURRENT_USERID=>true
              ),
              "isCurrentUser"=>array(
                  SELECT_COLLECTION_NAME=>'users',
                  WHERE_VALUE_OF_ENTITY_KEY=>'_id',
                  EQUALS_VALUE_OF_PARAMETERS_KEY_PATH=>'user._id',

                  COMPARE_WITH_OPERATOR=>'==',
                  RESULT_ENTITY_KEY=>'_id',
                  AND_CURRENT_USERID=>true
              )
          )
      ),

      'DeleteUser->call'=>array(
          'level' => PERMISSION_RESTRICTED_BY_QUERIES,
          ARRAY_OF_QUERIES =>array(
              "hasCreatedCurrentUser"=>array(
                  SELECT_COLLECTION_NAME=>'users',
                  WHERE_VALUE_OF_ENTITY_KEY=>'_id',
                  EQUALS_VALUE_OF_PARAMETERS_KEY_PATH=>'userId',

                  COMPARE_WITH_OPERATOR=>'==',
                  RESULT_ENTITY_KEY=>'creatorUID',
                  AND_CURRENT_USERID=>true
          ),
              "isCurrentUser"=>array(
                  SELECT_COLLECTION_NAME=>'users',
                  WHERE_VALUE_OF_ENTITY_KEY=>'_id',
                  EQUALS_VALUE_OF_PARAMETERS_KEY_PATH=>'userId',

                  COMPARE_WITH_OPERATOR=>'==',
                  RESULT_ENTITY_KEY=>'_id',
                  AND_CURRENT_USERID=>true
              )
          )
      )
                  
                  

#### Level 7 (PERMISSION_RESTRICTED_TO_GROUP_MEMBERS)

Before to return or proceed to any operation the gate keeper will check if the root targetted objects entityUID are set to be in one of the current user group.


      array ( 'PathClassName->MethodName(entityUID)' => array( 'level' => PERMISSION_RESTRICTED_TO_GROUP_MEMBERS)

#### Level 32768 PERMISSION_IS_DYNAMIC
Permission level is dynamic we load the permission level from a collection of permissions.
Any permission level can be set e

    array ( 'PathClassName->MethodName()' => array( 'level' => PERMISSION_IS_DYNAMIC)
    array ( 'PathClassName->MethodName(entityUID)' => array( 'level' => PERMISSION_IS_DYNAMIC)
    
#### Level 65536 PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY
Permission is granted to the declared super admins.


#### Level 131072 (PERMISSION_IS_BLOCKED)
For security purpose we can even block super admins.


# Data Modeling conventions : 

We use a Swagger derived model to modelize the entities.

## Composition 

By default we use AllOf as root of the entity modeling to allow composition.

## References 
External references.

## Aliases 

Aliases are used to maintain loosely coupled sets of entities. 
An alias stores all the necessary data to find a unique set of resource and optionally their labels. 
You can use an alias embedded or use it as an external reference. 


## Triggers 
@todo => equivalent to distributed notification.

## Metadata

We can inject metadata in the Entities. 


# Bartleby's synchronisation 

It is possible to synchronize local collections to a collaborative server.
And to subscribe for server sent event for example for messaging purposes.
The Data of a synchronised package can be regenerated.



# Generated Foundations   

## List of required generated objects

Any Bartleby app should use those reserved object.
You can add properties.

+ User
+ Group
+ Permission 
+ Reference
+ Tag

## Minimal Schema 

TODO create a separate Flexion target to include automatically those.

        "..."
            
         
## Filters 

Sample of a filter IN 
       
        // Is this sample Every user will be named ZORRO before DB insertion
        $data=NULL;// Dummy data for the IDE
        $filterCreateUser=new FilterHookByClosure();
        $filterCreateUser->closure=function($data) {
            KeyPath::setValueByReferenceForKeyPath($data,"user.username","Zorro!");
            return $data;
        };
        $this->addFilterIn('CreateUser->call',$filterCreateUser);
        
       
       

# ********* TO BE REEVALUATED *************

## OFF Line support

Object are created, updated, deleted calling isolated transaction like : "CreateNote"


# Bartleby's Distributed execution strategy

Distributed observer are created lazzyly by posting the first command for a given root object UID.

## COMMANDS
 
The commands identifiers

+ CREATE= 1 
+ READ = 2      
+ UPDATE = 3
+ DELETE = 4 
+ LINK = 5
+ UNLINK = 6
+ ADD_COLLECTION_ITEM = 7
+ INSERT_COLLECTION_ITEM = 8
+ UPDATE_COLLECTION_ITEM = 9
+ DELETE_COLLECTION_ITEM = 10
+ MOVE_COLLECTION_ITEM = 11
+ LINK_COLLECTION_ITEM = 12
+ UNLINK_COLLECTION_ITEM = 13 


## On the client A 

1. self.startDistributedOperations(channelUID)
2. "objx.set(value)" occurs
3. the value is immediately set on objx.
4. the value is added to the related operation eg: updateSentence() && the operation is  provisioned (serialized to DocumentWrapper/.provisioning/)
5. the sequence 2->4 can be repeat X times before : self.stopDistributedOperations(channelUID) occurs
6. operations are then reduced (e.g nuclear updates are mapped to collective updates)
7. operations are declared pending  == serialized  DocumentWrapper/.pending/
8. when possible the operations are called passing the channelUID and its creatorUID as a parameter
9. after successful transmission operation are moved to DocumentWrapper/.stored/

## Server Side 

1. for any CRUD endpoint call if there is a channelUID each call is serialized as a Command

## On the client B (first connection to the channel)  

1. the client GET the root Object of the channel.
2. the callsGET commands (channelUID, fromIndex)  passing 0 as fromIndex
3. the client subscribes to the channel by calling a SSE endpoint (L4 "subscribes:channelUID" access control applies)
4. the SSE endpoints transmits the bunch of commands (excluding the commands that has be emitted by the subscriber ) 
5. if necessary (in case of a disconnection or a hole in the index list) the client can call GET commands (channelUID, fromIndex) 
6. if there are no holes the sequence of command is interpreted and moved to DocumentWrapper/.stored/ the other commands are DocumentWrapper/.delayed/ until there is no more lacking indexes.

## On the client B (next connection)  

1. the client calls GET commands (channelUID, fromIndex)  passing its lastIndex as fromIndex
2. executes the commands and moves them to to DocumentWrapper/.stored/

## The CommandsSSE
Works using Server sent events
Each N seconds#BMS#->{"filename":"Tutorial.md","checksum":1536900327,"relativePath":"Bartleby\/Tutorial.md","size":1076}<-#BME#
<# Command line Tutorial #

## Install HTTPIE if necessary ##

You can install [HTTPie] (https://github.com/jkbrzt/httpie)

## 1- Setup the base URL ##

    BASE_URL=http://yd.local/api/v1/

## 2- Reachability and Configuration ## 

### Is the app reachable ? ### 

    http GET ${BASE_URL}/reachable

Successful response 

    HTTP/1.1 200 OK
    Access-Control-Allow-Methods: *
    Access-Control-Allow-Origin: *
    Connection: Keep-Alive
    Content-Length: 4
    Content-Type: application/json
    Date: Wed, 06 Jan 2016 08:26:19 GMT
    Keep-Alive: timeout=5, max=100
    Server: Apache
    X-Powered-By: PHP/5.6.10
    
    "{}"

### How is the app configured ? ###

    http -v GET ${BASE_URL}infos 

## 3- Test of commons services ## 

### Try to create a user (ACL may block the creation) ###

    echo '{"user": {"email": "bpds@me.com", "password":"xxx", "dID":"0000"}}' | http -v -f POST ${BASE_URL}user

If you are blocked you can temporarly add a permissive rule into your configuration 

    'CreateUser->call'=>array('level' =>PERMISSION_NO_RESTRICTION)
    

#BMS#->{"filename":"default.flx","checksum":3402420805,"relativePath":"BartlebyFlexions\/default.flx","size":1168}<-#BME#
# Created by Benoit Pereira da Silva on 20/04/2013.
# Copyright (c) 2013  http://www.chaosmos.fr
#
# This file is part of Flexions
#
# Flexions is free software: you can redistribute it and/or modify
# it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Flexions is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU LESSER GENERAL PUBLIC LICENSE for more details.
#
# You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
# along with Flexions  If not, see <http://www.gnu.org/license

#This file defies default flexions variables
# you can override those values in your generation shell script.

# Templates list
templates="*"

# Preprocessors list
pre="pre-processor.php"

# Postprocessors list
post="post-processor.php"

# the destination folder
destination="${flexionsFolder}out/"

# the optional web url to invoke from a browser 
webaseUrl="http://flexions.local/flexions.php?"#BMS#->{"filename":"flexions.flx","checksum":825845364,"relativePath":"BartlebyFlexions\/flexions.flx","size":1932}<-#BME#
# Created by Benoit Pereira da Silva on 20/04/2013.
# Copyright (c) 2013  http://www.chaosmos.fr
#
# This file is part of Flexions
#
# Flexions is free software: you can redistribute it and/or modify
# it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Flexions is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU LESSER GENERAL PUBLIC LICENSE for more details.
#
# You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
# along with Flexions  If not, see <http://www.gnu.org/license

# This file must should be called  from a generate.sh script file
# That define the required variables 
# @ Todo 
# ->Check the variable are sets.
# ->Test  source and destination are valid 


########################
# Path definition
########################

# the relative path to flexions.php
cmdPath="${flexionsFolder}src/flexions.php"

# the source folder
source="./"

########################
# Command feed back 
########################

echo \# invoking :
echo php  -f ${cmdPath}flexions.php source=${source} destination=${destination} descriptor=${descriptor} templates=${templates}  preProcessors=${pre} postProcessors=${post}
echo 
echo \# You could alternatively invoke Flexion in you browser by setting the document root to Flexions/src folder
echo ${webpdsaseUrl}source=$(pwd)/\&destination=$(pwd)/${destination}\&descriptor=${descriptor}\&templates=${templates}\&preProcessors=${pre}\&postProcessors=${post}
echo 

########################
# Invoke the command
########################

php  -f ${cmdPath} source=${source} destination=${destination} descriptor=${descriptor} templates=${templates}  preProcessors=${pre} postProcessors=${post}#BMS#->{"filename":"README.md","checksum":245709557,"relativePath":"BartlebyFlexions\/README.md","size":3000}<-#BME#
# Bartleby's Flexions 

Flexions is a simple set of scripts (written in basic PHP) to perform code generation.
Flexions intents to be an easy to use code generator.
The simpliest way to understand how it works is to check our samples in the samples folder.  

Current version is 2.0.


## Flexions life cycle

The flexions.script /src/flexions/Core/flexions.script.php Interprets and validates the command line and then runs through 3 phases : pre-processing / processing / post-processing

### 1- pre-processing : ( you can have multiple pre-processors )
1. can proceed to preparation (pre-generation, data set building per introspection, etc....)
2. loads the "descriptor" and transform them to an Hypotypose instance

#### We create aliases to be used in the templates :
- $h refers to the singleton Hypotypose::instance()
- $d refers whithin the loop to the current focus for example : $d=$actions[19] if the loop runs on the 19th actions.
- $f refers to the current Flexed instance

### 2- processing (usually a triple loop)  :
1. Per entity loop (entity ) enumerates { $entities }
2. Action loop (operations, command) enumerates { $actions }
3. One stop loop (api , http client , shared headers) runs once  per $project

IMPORTANT if the package contains a loops.php file the standard flexion loop is not used.

### 3- post-processing : (you can have multiple post-processors)
Each loop store a collection of Flexed instances  
1. Can use the "Flexed" instances to generate sub-Flexed (for example an header file for all the generated files)
2. Serializes the "Flexed" to sources files to the destination.
3. Perform any other post processing action (notification, push, ....)

## Usage of the Php command line : 
  
```shell
php  -f ${cmdPath} source=${source} destination=${destination} descriptor=${descriptor} templates=${templates}  preProcessors=${pre} postProcessors=${post}
```
### But most of the time you will prefer to create a .sh wrapper 

- source:the generation source folder path
- descriptor:the descriptor file name
- templates:templates relative path separated by commas for advanced cibled generation OR  "* " for recursive generation  for simple hierarchies (default value =="*")
- destination:destination path (default value is =="out/standard/")
- preProcessors:the pre-processors separated by commas
- postProcessors:the post-processors separated by commas


## About templates

To determinate if a template should be used in a loop we check if there is an occurence of the loopname in the path.
To include a template in the "project" loop put it in : templates/project/myTemplate.php


### Prototypes Template

Sample of a prototype template.

```php
include FLEXIONS_SOURCE_DIR.'/Shared.php';
// Define the globals before calling include
$filemame="/LoginUser.swift";
$package="xOS/operations/";
$prototypePath=FLEXIONS_MODULES_DIR.'Bartleby/prototypes/swift/auth/LoginUser.swift';
include FLEXIONS_MODULES_DIR . 'Bartleby/templates/filePrototypeTemplate.php';
```



#BMS#->{"filename":"Enum.php","checksum":3469402293,"relativePath":"BartlebyFlexions\/src\/flexions\/core\/Enum.php","size":426}<-#BME#
<?php

/**
 * Created by PhpStorm.
 * User: bpds
 * Date: 23/07/2015
 * Time: 17:32
 */
abstract class Enum {

    /**
     * @return array
     */
    static  function possibleValues(){
        return array();
    }

    /**
     * @return true if the value is a member of the Enum
     */
     final function isValid($value){
        $a=$this->possibleValues();
         $r=in_array($value,$a);
         return $r;
    }

}#BMS#->{"filename":"Flexed.php","checksum":1821625696,"relativePath":"BartlebyFlexions\/src\/flexions\/core\/Flexed.php","size":2047}<-#BME#
<?php

/*

Created by Benoit Pereira da Silva on 20/04/2013.
Copyright (c) 2013  http://www.chaosmos.fr

This file is part of Flexions

Flexions is free software: you can redistribute it and/or modify
it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Flexions is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU LESSER GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
along with Flexions  If not, see <http://www.gnu.org/Licenses/>

*/

/**
 * @author bpds
 */
class Flexed {

	// Defines if a file is included or not
	const MIN_SOURCE_SIZE=2;


	/**
	 * Populated by the template
	 * @var string
	 */
	var $package;
	
	/**
	 * Populated by the template
	 * @var string
	 */
	var $fileName=NULL;
	
	
	/**
	 * Generated source
	 * @var string
	 */
	var $source='';

	
	/**
	 * @var string
	 */
	var $packagePath=NULL ;
	

	/**
	 * @var string
	 */
	var $description;
	
	/**
	 * @var array
	 */
	var $metadata=array();

	

	/**
	 * You can mark a flexed to be excluded.
	 * @var boolean
	 */
	var $exclude=false;
	
	
	
	// ######################


	/**
	 * Can be used to prefix a class for example
	 * @var string
	 */
	var $prefix="";

	/**
	 * 
	 * @var string
	 */
	var $projectName="PROJECT NAME";
	
	/**
	 * 
	 * @var string
	 */
	var $company="COMPANY";
	
	/**
	 * 
	 * @var string
	 */
	var $year="2015";
	
	 /**
	  * 
	  * @var string
	  */
	var $author="flexions@chaosmos.fr";
	
	
	/**
	 * @var string
	 */
	var $license;

	

	/**
	 * Flexed constructor.
	 */
	public function __construct($prefix='') {
		$this->prefix=$prefix;
	}


	public function fileNameIsIn(array $array){
		foreach ($array as $element){
			if (!(strpos($this->fileName, $element)===false)){
				return true;
			}
		}
		return false;
	}


}

?>#BMS#->{"filename":"flexions.script.php","checksum":4262410111,"relativePath":"BartlebyFlexions\/src\/flexions\/core\/flexions.script.php","size":8798}<-#BME#
<?php
/*

Created by Benoit Pereira da Silva on 20/04/2013.
Copyright (c) 2013  http://www.chaosmos.fr

This file is part of Flexions

Flexions is free software: you can redistribute it and/or modify
it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Flexions is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU LESSER GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
along with Flexions  If not, see <http://www.gnu.org/Licenses/>

*/

require_once FLEXIONS_ROOT_DIR . 'flexions/Core/Flog.php';
require_once FLEXIONS_ROOT_DIR . 'flexions/Core/Hypotypose.php';
require_once FLEXIONS_ROOT_DIR . 'flexions/Core/Flexed.php';
require_once FLEXIONS_ROOT_DIR.  'flexions/Core/functions.script.php';
require_once FLEXIONS_ROOT_DIR.  'flexions/representations/flexions/FlexionsRepresentationsIncludes.php';

error_reporting(E_ALL | E_STRICT);
date_default_timezone_set ( 'UTC' );

// The argument can also be defined from a boot php script
if (! isset($arguments)) {
	// Server & commandline versatile support
	if ($_SERVER ['argc'] == 0 || !defined('STDIN')) {
		// Server mode
		$arguments = $_GET;
		define("COMMANDLINE_MODE", false);
	} else {
		// Command line mode
		$rawArgs = $_SERVER ['argv'];
		array_shift($rawArgs); // shifts the commandline script file flexions.php
		$arguments = array();
		parse_str(implode('&', $rawArgs), $arguments);
		define("COMMANDLINE_MODE", true);
	}
}

// We instanciate the Flog singleton
// and store a time stamp as  first log.
Flog::Instance ()->addMessage ( '##' . fDate () . '##' . cr() );
                                        
$preProcessors = '';
$postProcessors = '';
$source = '';
$descriptorFilePath='';
$destination='';
if (isset ( $arguments ["source"] )) {
	$source = $arguments ["source"];
} else {
	 throw new Exception ( 'Required parameter "source"' . cr() );
}

define ( "FLEXIONS_SOURCE_DIR", $source );

if (isset ( $arguments ["descriptor"] )) {
	if(file_exists($arguments["descriptor"])){
		// We use an absolute path
		$descriptorFilePath=$arguments["descriptor"];
	}else{
		// we use a relative path
		$descriptorFilePath = FLEXIONS_SOURCE_DIR  . $arguments ["descriptor"];
	}
}



if (isset ( $arguments ["templates"] ) && strlen ( $arguments ["templates"] ) >= 1) {
	$templates = $arguments ["templates"];
} else {
	$templates = '*';
}

if (isset ( $arguments ["destination"] ) && strlen ( $arguments ["destination"] ) >= 1) {
	$destination = injectVersionInPath($arguments ["destination"]);
} else {
	$destination = injectVersionInPath(FLEXIONS_ROOT_DIR . '/out/standard/');
	if(file_exists($destination)==false)
		mkdir ( $destination, 0777, true );
}

if (isset ( $arguments ["preProcessors"] ))
	$preProcessors = $arguments ["preProcessors"];

if (isset ( $arguments ["postProcessors"] ))
	$postProcessors = $arguments ["postProcessors"];
	
	// Check if mandatory $arguments are set
	// (Preprocessors and PostProcessors are optionnal)

if (! isset ( $descriptorFilePath )) {
	 throw new Exception( 'Required parameter "descriptor"' . cr() );
}


$baseTemplatePath = FLEXIONS_SOURCE_DIR . 'templates';
// Templates joker.
if ($templates == "*") {
	// We populate the templates with the relative path
	$templatesArray = directoryToArray ( $baseTemplatePath );
	$templates = implode ( ',', $templatesArray );
}else{
	$templatesTempArray= explode(',', $templates);
	$templatesArray=array();
	foreach ( $templatesTempArray as $templatePath ) {
		// Compute the absolute path
		$templatesArray[]=$baseTemplatePath."/".$templatePath;;
	}
}


$specificLoops = FLEXIONS_SOURCE_DIR . 'loops.php';

$m = cr();
$m.=  '# phpversion : '.phpversion().cr();
$m .= '# Invoking flexions  for ' .simplifyPath($descriptorFilePath) . cr();
$m .= '# On template(s): ' . str_replace ( FLEXIONS_SOURCE_DIR . 'templates/', '', $templates ) . cr();
$m .= '# With destination: ' . simplifyPath($destination) . cr();
$m .= '# Using pre-processor: ' . $preProcessors . cr();
$m .= '# And post-processor: ' . $postProcessors . cr();
if (file_exists ( $specificLoops )) {
	$m .= '# Using the loops : ' . $source . '/loops.php' . cr() . cr();
}else{
	$m .=  '# Using the standard loops' . cr() . cr() ;
}
$m .='FLEXIONS_SOURCE_DIR='. FLEXIONS_SOURCE_DIR.cr();
$m .='FLEXIONS_ROOT_DIR='. FLEXIONS_ROOT_DIR;
fLog ( $m, true );

// /////////////////////////////////
// PHASE #1
// PREPROCESSING
// /////////////////////////////////

fLog ( cr().cr().'##'.cr(), true );
fLog ( 'Pre Processing'.cr(), true );
fLog ( '##'.cr().cr(),true );


$arrayOfPreProcessors = explode ( ",", $preProcessors );
foreach ( $arrayOfPreProcessors as $preProcessor ) {
	// Invokes the pre-processor
	$preProcessorPath = FLEXIONS_SOURCE_DIR . $preProcessor;
    fLog ( cr().'Running:'.$preProcessorPath.cr().cr(),true );
	try {
		include $preProcessorPath;
	}catch (Exception $e) {
		fLog('PREPROCESSOR EXCEPTION ' . $e->getMessage(),true);
        dumpLogs();
		return;
	}
}
	
// //////////////////////////////////
// PHASE #2
// PROCESSING
// /////////////////////////////////

/**
 *
 * @var $h Hypotypose
 *     
 */

$destination=$destination.$h->majorVersionPathSegmentString().$h->stagePathSegmentString();
$h=Hypotypose::Instance();
$h->exportFolderPath=$destination;

fLog ( cr().cr().'##'.cr(), true );
fLog ( 'Looping'.cr(), true );
fLog ( '##'.cr().cr(), true );

if (file_exists ( $specificLoops )) {
	// We use the specific loops
	include $specificLoops;
} else {
	
	while ( $h->nextLoop () == true ) {
		$list = $h->getContentForCurrentLoop (); // Returns the current loop items
		fLog ( 'Looping in '.$h->getLoopName().cr(), true );

		foreach ( $list as $descriptions ) {


            try {// It is a description object
                iterateOnTemplates($templatesArray, $h, $descriptions, $destination);
            } catch (Exception $e) {
                fLog('TEMPLATE EXCEPTION ' . $e->getMessage(),true);
                dumpLogs();
                return;
            }
		}
	}
}

/**
 * 
 * @param array $templatePath
 * @param Hypotypose $h
 * @param mixed $d the descriptor (a set of data)
 * @throws Exception
 */
 function iterateOnTemplates(array $templatesArray, Hypotypose $h,  $d,$destination){
 	
	foreach ( $templatesArray as $templatePath ) {
			
		// We need to determine if the template should be used in
		// this loop.
        $loopName=$h->getLoopName ();
		$componentsOfTemplatePath=explode('/',strtolower($templatePath));

        $shouldBeUsedInThisLoop = in_array(strtolower($loopName),$componentsOfTemplatePath);
			
		if ($shouldBeUsedInThisLoop) {
	
			$result = NULL;
			if (! isset ( $d )) {
				throw new Exception( 'Descriptor variable $d must be set for the templates. Your preprocessor should have populated an iterable list of data for the descriptor for the loop : '.$loopName );
			}

			// We instanciate the current Flexed
			// will be used by the templates to define $f->fileName, $f->package
			$f = new Flexed ($h->classPrefix);

			// ( ! ) Template execution
			ob_start ();include $templatePath;$result = ob_get_clean ();
			// (!) End of template execution
	
			if ($f->fileName != null ) {
					
				$f->source = $result; // We store the generation result
				//and the package path
				$f->packagePath = $destination . $f->package;
				 
				// We add the flexed the Hypotypose for the post processors
				$h-> addFlexed($f);
                fLog ( '+Adding '.$f->fileName.cr(), true );
			} else {
				fWarning ( 'fileName or package is not defined in ' . $templatePath );
			}
		}
	}
}


// //////////////////////////////////
// PHASE #3
// POST PROCESSING
// ///////////////////////////////////

fLog ( cr().cr().'##'.cr(), true );
fLog ( 'Post Processing'.cr(), true );
fLog ( '##'.cr().cr(),true );
$arrayOfPostProcessors = explode ( ",", $postProcessors );
foreach ( $arrayOfPostProcessors as $postProcessor ) {
	// Invokes the post-processor
	$postProcessorPath = FLEXIONS_SOURCE_DIR  . $postProcessor;
    fLog ( cr().'Running:'.$postProcessorPath.cr().cr(),true );
    try {
        include $postProcessorPath;
    }catch (Exception $e) {
        fLog('POSTPROCESSOR EXCEPTION ' . $e->getMessage(),true);
        dumpLogs();
        return;
    }
}
dumpLogs();



function dumpLogs(){
    // Dump Flog

    $logFolderPath = FLEXIONS_ROOT_DIR . '../out/logs/';
    if(! file_exists($logFolderPath)){
        mkdir ( $logFolderPath, 0777, true );
    }
    $logsFilePath = $logFolderPath . fDate () . '-logs.txt';
    file_put_contents ( $logsFilePath, Flog::Instance ()->getLogs () );
}#BMS#->{"filename":"Flog.php","checksum":4109505728,"relativePath":"BartlebyFlexions\/src\/flexions\/core\/Flog.php","size":476}<-#BME#
<?php

class Flog {
	/**
	 * Call this method to get singleton
	 *
	 * @return Flog
	 */
	public static function Instance() {
		static $inst = null;
		if ($inst === null) {
			$inst = new Flog();
		}
		return $inst;
	}
	
	/**
	 * @var string
	 */
	private $_logs='';
	
	/**
	 * @return string the $_logs
	 */
	public function getLogs() {
		return $this->_logs;
	}

	/**
	 * @param string $message
	 */
	public function addMessage($message='') {
		$this->_logs.=$message;
	}

}#BMS#->{"filename":"functions.script.php","checksum":2126348964,"relativePath":"BartlebyFlexions\/src\/flexions\/core\/functions.script.php","size":3919}<-#BME#
<?php

require_once FLEXIONS_ROOT_DIR . 'flexions/Core/Flog.php';
require_once FLEXIONS_ROOT_DIR . 'flexions/Core/Hypotypose.php';
require_once FLEXIONS_ROOT_DIR . 'flexions/Core/Flexed.php';


////////////////////////////////////
// FUNCTIONS
/////////////////////////////////////


/**
 * @param string  $dir
 * @param array $result
 * @return array  of path
 */
function directoryToArray($dir, &$result = array()) {
	$dirList = scandir ( $dir );
	foreach ( $dirList as $key => $value ) {
		$dotPos = strpos ( $value, '.' );
		if (($dotPos === false) or ($dotPos != 0)) {
			if (is_dir ( $dir . DIRECTORY_SEPARATOR . $value )) {
				$sub = directoryToArray ( $dir . DIRECTORY_SEPARATOR . $value );
				$result = array_merge ( $result, $sub );
			} else {
				$result [] = $dir . DIRECTORY_SEPARATOR . $value;
			}
		}
	}
	return $result;
}

function fLog($message, $show=false){
	Flog::Instance()->addMessage($message);
	if($show || ECHO_LOGS===true){
		echo $message;
	}
}

/**
 *  Contextual Carriage return
 * @return string
 */
function cr(){
	return COMMANDLINE_MODE?"\n":"</br>";
}

/**
 * 
 * @param int $n
 * @return string
 */
function tabs($n=1){
	$s="";
	for ($i = 0; $i < $n; $i++) {
		$s.=chr(9);
	}
	return $s;
}


/**
 * 
 * @param string $string
 * @param int $n
 */
function echoIndent($string,$n=1){
	 echo (stringIndent($string,$n));
}

function stringIndent($string,$n=1){
    if ($string==''){
        return tabs($n).$string;
    }
	$newString='';
	$lines=explode("\n",$string);
    $counter=0;
    $nbLines=count($lines);
	foreach ($lines as $line) {
        if($line!==''){
            $newString .= tabs($n).$line;
            if($counter>0){
                $newString .= cr();
            }
        }
        $counter++;
	}
	return $newString;
}

function echoIndentCR($string,$n=1){
    echo (stringIndent($string,$n).cr());
}

function stringIndentCR($string,$n=1){
    return stringIndent($string,$n).cr();
}


/**
 * Logs a warning
 * @param string $warning
 */
function fWarning( $warning){
	fLog('WARNING : '.$warning,false);
}

function fDate(){
	$dt = new DateTime();
	return $dt->format('Y-m-d-').microtime(true);
}


function hypotyposeToFiles() {
	$h=Hypotypose::Instance();

	// Delete the export path.
	@rmdir($h->exportFolderPath);

	$history=array();
	foreach ( $h->flexedList as $loopname=>$list ) {
		/* @var $list array */
		foreach ( $list as  $f ) {
			$path=$f->packagePath . $f->fileName;
			// We put to file once only per destination
			if(in_array($path, $history)==false){

				$shouldBeExlcuded=false;
				foreach ($h->excludePath as $pathToExclude ) {
					if(strpos($path,$pathToExclude)!==false){
						$shouldBeExlcuded=true;
					}
				}
				if($shouldBeExlcuded==true){
					continue;
				}

				/* @var $f Flexed */
				file_put_Flexed ( $f );
				$history[]=$path;
			}
		}
	}
	if (VERBOSE_FLEXIONS)
		fLog("\nSerializing hypotypose to ".count($history)." file(s)"." with loop name == ".$loopname.cr(),true);
}

function file_put_Flexed(Flexed $f){
	if ( isset($f->source) && strlen($f->source) > Flexed::MIN_SOURCE_SIZE ){
		// Create the package folder if necessary
		if (! file_exists ( $f->packagePath )) {
			if (VERBOSE_FLEXIONS)
				fLog("-> creating package " .  $f->package . cr(),true);
			mkdir ( $f->packagePath, 0777,true );
		}
		// Save the generated file
		file_put_contents ( $f->packagePath . $f->fileName, $f->source );
		if (VERBOSE_FLEXIONS)
			fLog("Writing : ".$f->packagePath . $f->fileName.cr(),true);
	}else{
		// We can return NULL sources to exclude a file from generation
	}

}

/**
 * 
 * @param string $path
 * @return string
 */
function simplifyPath($path){
	$path=realpath($path);
	$path=str_replace(FLEXIONS_ROOT_DIR,"", $path);
	return $path;
}



function injectVersionInPath($path){
	$h=Hypotypose::Instance();
	$newPath= str_ireplace('{version.major}',$h->majorVersionPathSegmentString(),$path);
	return $newPath;
}
#BMS#->{"filename":"Hypotypose.php","checksum":2958261388,"relativePath":"BartlebyFlexions\/src\/flexions\/core\/Hypotypose.php","size":6573}<-#BME#
<?php

//  Created by Benoit Pereira da Silva on 20/04/2013.
//  Copyright (c) 2013  http://www.chaosmos.fr

// This file is part of Flexions

// Flexions is free software: you can redistribute it and/or modify
// it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Flexions is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU LESSER GENERAL PUBLIC LICENSE for more details.

// You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
// along with Flexions  If not, see <http://www.gnu.org/Licenses/>


class DefaultLoops {
    const ENTITIES = 'entities'; // Generaly for generating models
    const ACTIONS = 'actions'; // For example for endpoints generations
    const PROJECT = 'project'; // For a glob
}

class DefaultStages{
    const NO_STAGE='';
    const STAGE_PRODUCTION='production';
    const STAGE_DEVELOPMENT='development';
    const STAGE_BETA='beta';

}

/**
 *  An hypotypose is a structured description that
 *  uses  agnostic data structure
 *
 *  An  hypotypose instance is persistent during all flexions phases
 *
 *  Preprocessing    :
 *  hypotypose is instanciated and populated from sources.
 *
 *  Processing        :
 *  hypotypose is used by the loops and passed to the templates.
 *  if the template returns some contents its content is stored in a Flexed instance
 *
 *  PostProcessing :
 *  hypotypose->flexedList(s) are iterated to generate the files from  $f->source
 *
 * @package   flexions
 * @author    benoit@chaosmos.fr
 * @version   1.0.0
 */
final class Hypotypose extends stdClass {
    

    /**
     * Excluded path are generated but not dumped
     * @var array
     */
    public $excludePath = array();


    /**
     * @var string the current global stage
     */
    public $stage = DefaultStages::NO_STAGE;



    public $version = '';// No version by default

    function majorVersionPathSegmentString(){
        $components=explode('.',$this->version);
        if (count($components)>0 && $components[0]!=''){
            return 'v'.$components[0].'/';
        }else{
            return '';
        }
    }

    function stagePathSegmentString(){
        if ($this->stage!=DefaultStages::NO_STAGE){
            return $this->stage.'/';
        }else{
            return '';
        }
    }


    function  majorVersionString(){
        $components=explode('.',$this->version);
        if (count($components)>0){
            return $components[0];
        }else{
            return '';
        }
    }

    /**
     *
     * @var array
     */
    protected $_descriptor = array();

    /**
     *
     * @var int
     */
    private $_loopIndex;

    /**
     *
     * @var array
     */
    protected $_loopNameList;


    /**
     * The list of the flexed files
     * @var array
     */
    public $flexedList = array();

    /**
     * class prefix
     * @var string
     */
    public $classPrefix = "";


    /**
     * @var string a facility to gain access to command line destination
     */
    public $exportFolderPath ='';


    /**
     * Call this method to get singleton
     *
     * @return Hypotypose
     */
    public static function Instance() {
        static $inst = NULL;
        if ($inst === NULL) {
            $inst = new Hypotypose ();
        }
        return $inst;
    }

    /**
     */
    function __construct( ) {
        $this->_loopIndex = -1;
        $this->_loopNameList = array();
    }

    /**
     * Returns the current loop name
     * @return string
     */
    public function getLoopName() {
        if ($this->_loopIndex >= 0) {
            return $this->_loopNameList [$this->_loopIndex];
        } else {
            return NULL;
        }
    }

    /**
     *
     * @return  array
     */
    public function getContentForCurrentLoop() {
        $name = $this->getLoopName();
        if ($name != NULL) {
            if (array_key_exists($name, $this->_descriptor)) {
                return $this->_descriptor[$name];
            }
        }
        return NULL;
    }

    /**
     *
     * @param string $name
     * @return array:|NULL
     */
    public function getContentForLoopWithName($name) {
        if (array_key_exists($name, $this->_descriptor)) {
            return $this->_descriptor[$name];
        }
        return NULL;
    }

    /**
     *
     * @return boolean
     */
    public function nextLoop() {
        $this->_loopIndex++;
        if ($this->_loopIndex < count($this->_loopNameList)) {
            return true;
        } else {
            $this->_loopIndex = -1;
            return false;
        }
    }

    /**
     * Sets the descriptor for a given loop name
     * this is done once per loop in the preprocessor
     *
     * @param array $descriptor
     * @param string $loopName
     * @return boolean
     */
    public function setLoopDescriptor($descriptor, $loopName) {
        if (!array_key_exists($loopName, $this->_loopNameList)) {
            // We add the descriptor
            $this->_loopNameList[] = $loopName;
            $this->_descriptor[$loopName] = $descriptor;
            $this->flexedList[$loopName] = array();
            $this->_descriptor[$loopName] = $descriptor;
            return true;
        }
        return false;
    }

    /**
     *
     * @param Flexed $flexed
     */
    public function  addFlexed(Flexed $flexed) {
        // Do not copy flexed files that are excluded or not
        if((strlen($flexed->source) > Flexed::MIN_SOURCE_SIZE )
            && ($flexed->fileNameIsIn($this->excludePath)===false)) {
            $this->flexedList [$this->getLoopName()] [] = $flexed;
        }
    }


    public function getFlatFlexedList() {
        $flatList = array();
        foreach ($this->flexedList as $subList) {
            if (is_array($subList)) {
                $flatList = array_merge($flatList, $subList);
            }
        }
        return $flatList;
    }


    public function removePrefixFromString($string){
        if(isset($this->classPrefix)&& $this->classPrefix!="" && strpos($string,$this->classPrefix)===0){
            return substr($string,strlen($this->classPrefix));
        }else{
            return $string;
        }

    }


    public function ucFirstRemovePrefixFromString($string){
        return ucfirst($this->removePrefixFromString($string));
    }


}
?>#BMS#->{"filename":"ActionRepresentation.php","checksum":4262232052,"relativePath":"BartlebyFlexions\/src\/flexions\/representations\/flexions\/ActionRepresentation.php","size":6906}<-#BME#
<?php

/*
 Created by Benoit Pereira da Silva on 20/04/2013.
Copyright (c) 2013  http://www.chaosmos.fr

This file is part of Flexions

Flexions is free software: you can redistribute it and/or modify
it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Flexions is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU LESSER GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
along with Flexions  If not, see <http://www.gnu.org/Licenses/>
*/

class ActionRepresentation {

    /**
     * @var string Name of the Action
     */
    public $name;

    /**
     * @var string Class of the Action object
     */
    public $class;


    /* @var string the collection name if relevent*/
    public $collectionName;

    /**
     * @var array of PropertyRepresentation
     */
    public $parameters = array();

    /**
     * @var array  an associative array  of PropertyRepresentation per status
     * e.g:
     * { "200"=> PropertyRepresentation,"400"=> PropertyRepresentation }
     * or { "success" => PropertyRepresentation, "failure" => PropertyRepresentation }
     * for each errors that could occur when running the Action
     */
    public $responses = array();


    /**
     * The security context for the action.
     * @var SecurityContextRepresentation
     */
    public $security;


    ////////////////////
    // END POINTS ONLY
    ////////////////////

    /**
     * @var string
     */
    public $path;

    /**
     * @var string HTTP method
     */
    public $httpMethod;


    //////////////////
    // DESCRIPTION
    //////////////////


    /**
     * @var string This is a short summary of what the Action does
     */
    public $summary;

    /**
     * @var string A longer text field to explain the behavior of the operation.
     */
    public $notes;

    /**
     * @var string Information about the response returned by the Action
     */
    public $responseNotes;



    //////////////////
    // METADATA
    //////////////////


    /**
     * @var array an associative array to pass specific metadata (including urdMode)
     */
    public $metadata=array();


    /**
     * if set to true Actions could be URD ( Upsert Read Delete)
     * instead of CRUD (Create Read Update Delete)
     * @return boolean
     */
    public function usesUrdMode() {
        return array_key_exists(METADATA_KEY_FOR_USE_URD_MODE, $this->metadata ) ? $this->metadata[METADATA_KEY_FOR_USE_URD_MODE] : DEFAULT_USE_URD_MODE ;
    }
    

    //////////////////////////
    // PARAMETERS ITERATORS
    //////////////////////////


    /**
     * Current iteration parameter
     * @var int
     */
    protected $_parameterIndex = -1;


    /**
     * Return true while there is a parameter
     * @return boolean
     */
    public function iterateOnParameters() {
        $this->_parameterIndex++;
        if ($this->_parameterIndex < count($this->parameters)) {
            return true;
        } else {
            // Reinitialise
            $this->_parameterIndex = -1;
            return false;
        }
    }

    /**
     * Returns the current iterated parameter
     * @return PropertyRepresentation
     */
    public function getParameter() {
        $nb = count($this->parameters);
        if ($this->_parameterIndex < $nb && $nb > 0) {
            $keys = array_keys($this->parameters);
            return $this->parameters[$keys[$this->_parameterIndex]];
        }
        return null;
    }

    /**
     *
     * @return boolean
     */
    public function firstParameter() {
        return ($this->_parameterIndex == 0);
    }

    /**
     *
     * @return boolean
     */
    public function lastParameter() {
        return ($this->_parameterIndex == count($this->parameters) - 1);
    }

    //////////////////////////
    // RESPONSE ITERATORS
    //////////////////////////


    /**
     * Current iteration response
     * @var int
     */
    protected $_responseIndex = -1;


    /**
     * Return true while there is a response
     * @return boolean
     */
    public function iterateOnResponses() {
        $this->_responseIndex++;
        if ($this->_responseIndex < count($this->responses)) {
            return true;
        } else {
            // Reinitialise
            $this->_responseIndex = -1;
            return false;
        }
    }

    /**
     * Returns the current iterated response
     * @return PropertyRepresentation
     */
    public function getresponse() {
        $nb = count($this->responses);
        if ($this->_responseIndex < $nb && $nb > 0) {
            $keys = array_keys($this->responses);
            return $this->responses[$keys[$this->_responseIndex]];
        }
        return null;
    }

    /**
     *
     * @return boolean
     */
    public function firstResponse() {
        return ($this->_responseIndex == 0);
    }

    /**
     *
     * @return boolean
     */
    public function lastResponse() {
        return ($this->_responseIndex == count($this->responses) - 1);
    }

    //////////////////////////////////////
    // GENERATIVE FACILITY
    /////////////////////////////////////


    /**
     * Returns true if there are parameters out of the path
     *
     * e.g:$path="/user/{username}"
     * "parameters": [ { "name": "username",...}]
     * Would return false
     * @return bool
     */
    public function containsParametersOutOfPath(){
        preg_match_all('/{(.*?)}/', $this->path, $matches);
        $variablesInPath=$matches[1];
        /* @var $parameter PropertyRepresentation */
        foreach ($this->parameters as $parameter) {
            if (!in_array($parameter->name, $variablesInPath)){
                return true;
            }
        }
        return false;
    }

    public function parameterIsInPath($parameterName){
        preg_match_all('/{(.*?)}/', $this->path, $matches);
        $variablesInPath=$matches[1];
        return in_array($parameterName, $variablesInPath);
    }


    /**
     * @return PropertyRepresentation
     */
    public function getSuccessResponse(){
        /*@var $propertyInstance PropertyRepresentation */
        foreach ($this->responses as $key => $propertyInstance) {
            if( $propertyInstance->name=="200" ||
                $propertyInstance->name=="201" ||
                $propertyInstance->name=="202" ||
                $propertyInstance->name=="success"){
                return $propertyInstance;
            }
        }
        $default=new PropertyRepresentation();
        $default->name="default";
        $default->type=FlexionsTypes::VOID;
        return $default;
    }







}

?>#BMS#->{"filename":"EntityRepresentation.php","checksum":2438176308,"relativePath":"BartlebyFlexions\/src\/flexions\/representations\/flexions\/EntityRepresentation.php","size":4011}<-#BME#
<?php


/*
 Created by Benoit Pereira da Silva on 20/04/2013.
Copyright (c) 2013  http://www.chaosmos.fr

This file is part of Flexions

Flexions is free software: you can redistribute it and/or modify
it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Flexions is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU LESSER GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
along with Flexions  If not, see <http://www.gnu.org/Licenses/>
*/



class EntityRepresentation {


	/**
	 * @var string  Documentation  of the Entity
	 */
	public $description;

	/**
	 * @var string Name of the object
	 */
	public $name;
	
	/**
	 * @var array of PropertyRepresentation of the object
	 */
	public $properties=array();


	/**
	 * @var  string When the type is an object, you can specify the class that the object must implement
	*/
	public $instanceOf;
	
	/**
	 * @var array of interface names
	 */
	public $implements=array();

	/**
	 * Will be DEPRECATED but still used by XCDDataXMLToFlexionsRepresentation
	 * @var bool
	 */
	public $generateCollectionClass=DEFAULT_GENERATE_COLLECTION_CLASSES;



	//////////////////
	// METADATA
	//////////////////

	/**
	 * @var array an associative array to pass specific metadata
	 */
	public $metadata=array();


	/**** Collection & distribution ****/



	/**
	 * if set to true Actions could be URD ( Upsert Read Delete)
	 * instead of CRUD (Create Read Update Delete)
	 * @return bool
	 */
	public function usesUrdMode() {
		return array_key_exists(METADATA_KEY_FOR_USE_URD_MODE, $this->metadata ) ? $this->metadata[METADATA_KEY_FOR_USE_URD_MODE] : DEFAULT_USE_URD_MODE ;
	}

	/**
	 * Can be used by undo managers
	 * @return bool
	 */
	public function isUndoable(){
		return array_key_exists(METADATA_KEY_FOR_IS_UNDOABLE, $this->metadata ) ? $this->metadata[METADATA_KEY_FOR_IS_UNDOABLE] : DEFAULT_IS_UNDOABLE ;
	}

	/**
	 * @return bool
	 */
	public function shouldPersistsLocallyOnlyInMemory() {
		return array_key_exists(METADATA_KEY_FOR_PERSISTS_LOCALLY_ONLY_IN_MEMORY, $this->metadata ) ? $this->metadata[METADATA_KEY_FOR_PERSISTS_LOCALLY_ONLY_IN_MEMORY] : DEFAULT_PERSISTS_LOCALLY_ONLY_IN_MEMORY ;
	}

	/**
	 * 
	 * @return bool
	 */
	public function groupedOnCommit() {
		return array_key_exists(METADATA_KEY_FOR_CAN_BE_GROUPED_ON_COMMIT, $this->metadata ) ? $this->metadata[METADATA_KEY_FOR_CAN_BE_GROUPED_ON_COMMIT] : DEFAULT_PERSISTS_LOCALLY_ONLY_IN_MEMORY ;
	}



	public function isDistantPersistencyOfCollectionAllowed() {
		return array_key_exists(METADATA_KEY_FOR_DISTANT_PERSISTENCY_IS_ALLOWED, $this->metadata ) ? $this->metadata[METADATA_KEY_FOR_DISTANT_PERSISTENCY_IS_ALLOWED] : DEFAULT_DISTANT_PERSISTENCY_IS_ALLOWED ;
	}

	//////////////////
	// ITERATORS
	//////////////////


	/**
	 * Current iteration property
	 * @var int
	 */
	protected  $_propertyIndex=-1;
	
	
	/**
	 * Return true while there is a property
	 * @return boolean
	 */
	public function iterateOnProperties(){
		$this->_propertyIndex++;
		if($this->_propertyIndex< count($this->properties)){
			return true;
		}else{
			// Reinitialise
			$this->_propertyIndex=-1;
			return  false;
		}
	}
	
	/**
	 * Returns the current iterated property
	 * @return PropertyRepresentation
	 */
	public function getProperty(){
		$nb=count($this->properties);
		if($this->_propertyIndex<$nb && $nb>0 ){
			$keys  = array_keys( $this->properties);
			return $this->properties[$keys[$this->_propertyIndex]];
		}
		return null;
	}
	
	/**
	 * 
	 * @return boolean
	 */
	public function firstProperty(){
		return( $this->_propertyIndex==0);
	}
	/**
	 * 
	 * @return boolean
	 */
	public function lastProperty(){
		return ( $this->_propertyIndex== count($this->properties)-1);
	}
	
}

?>#BMS#->{"filename":"FlexionsRepresentationsIncludes.php","checksum":1274633532,"relativePath":"BartlebyFlexions\/src\/flexions\/representations\/flexions\/FlexionsRepresentationsIncludes.php","size":2289}<-#BME#
<?php

/*
 Created by Benoit Pereira da Silva on 20/04/2013.
Copyright (c) 2013  http://www.chaosmos.fr

This file is part of Flexions

Flexions is free software: you can redistribute it and/or modify
it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Flexions is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU LESSER GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
along with Flexions  If not, see <http://www.gnu.org/Licenses/>
*/


if (!defined('DEFAULT_USE_URD_MODE')) {

    // METADATA
    // Keys
    define('METADATA_KEY_FOR_USE_URD_MODE','urdMode');
    define('METADATA_KEY_FOR_IS_UNDOABLE','undoable');
    define('METADATA_KEY_FOR_PERSISTS_LOCALLY_ONLY_IN_MEMORY','persistsLocallyOnlyInMemory');
    define('METADATA_KEY_FOR_DISTANT_PERSISTENCY_IS_ALLOWED','allowDistantPersistency');
    define('METADATA_KEY_FOR_CAN_BE_GROUPED_ON_COMMIT','groupable');

    
    // Default Values
    define('DEFAULT_USE_URD_MODE',false);
    define('DEFAULT_IS_UNDOABLE',true);
    define('DEFAULT_PERSISTS_LOCALLY_ONLY_IN_MEMORY',false);
    define('DEFAULT_CAN_BE_GROUPED_ON_COMMIT',true);
    define('DEFAULT_DISTANT_PERSISTENCY_IS_ALLOWED',true);


    // Will be DEPRECATED but still used by XCDDataXMLToFlexionsRepresentation
    define('DEFAULT_GENERATE_COLLECTION_CLASSES',false);

}

require_once FLEXIONS_ROOT_DIR . 'flexions/representations/flexions/ProjectRepresentation.php';
require_once FLEXIONS_ROOT_DIR . 'flexions/representations/flexions/ActionRepresentation.php';
require_once FLEXIONS_ROOT_DIR . 'flexions/representations/flexions/EntityRepresentation.php';
require_once FLEXIONS_ROOT_DIR . 'flexions/representations/flexions/PropertyRepresentation.php';
require_once FLEXIONS_ROOT_DIR . 'flexions/representations/flexions/SecurityContextRepresentation.php';
require_once FLEXIONS_ROOT_DIR . 'flexions/representations/flexions/PermissionRepresentation.php';
require_once FLEXIONS_ROOT_DIR . 'flexions/representations/flexions/FlexionsTypes.php';#BMS#->{"filename":"FlexionsTypes.php","checksum":2084329154,"relativePath":"BartlebyFlexions\/src\/flexions\/representations\/flexions\/FlexionsTypes.php","size":1571}<-#BME#
<?php


require_once FLEXIONS_ROOT_DIR.'flexions/Core/Enum.php';

/**
 * Class FlexionsTypes
 * Enumerates the "primitive" type of Flexions as const
 */
class FlexionsTypes extends Enum {
    // Basic types
    const STRING='string';
    const INTEGER='integer';
    const BOOLEAN='boolean';
    const FLOAT='float';
    const DOUBLE='double';
    //
    const BYTE='byte';
    const DATETIME='dateTime';
    const URL='url';
    const DATA='data';

    const FILE='file';

    // Generic structure
    const DICTIONARY='dictionary';
    //
    const OBJECT='object'; // Used to reference an $instanceOf
    const COLLECTION='collection';// Used to reference a collection of $instanceOf that can be any FlexionsType
    const ENUM='enum';// Used to reference a enumeration of $instanceOf that can be any FlexionsType
    //
    const NOT_SUPPORTED='Not_Supported';

    const VOID='void';

    /**
     * @return array
     */
    static  function possibleValues(){
        return array(
            FlexionsTypes::STRING,
            FlexionsTypes::INTEGER,
            FlexionsTypes::BOOLEAN,
            FlexionsTypes::FLOAT,
            FlexionsTypes::DOUBLE,
            FlexionsTypes::BYTE,
            FlexionsTypes::DATETIME,
            FlexionsTypes::URL,
            FlexionsTypes::FILE,
            FlexionsTypes::DICTIONARY,
            FlexionsTypes::OBJECT,
            FlexionsTypes::COLLECTION,
            FlexionsTypes::ENUM,
            FlexionsTypes::NOT_SUPPORTED,
            FlexionsTypes::VOID,
            FlexionsTypes::DATA
        );
    }
}#BMS#->{"filename":"IFlexionsLanguageMapping.php","checksum":4128488904,"relativePath":"BartlebyFlexions\/src\/flexions\/representations\/flexions\/IFlexionsLanguageMapping.php","size":179}<-#BME#
<?php

interface IFlexionsLanguageMapping{

    /**
     * @param  $flexionsType
     * @return String the native type
     */
    static function nativeTypeFor($flexionsType);

}#BMS#->{"filename":"PermissionRepresentation.php","checksum":2159840485,"relativePath":"BartlebyFlexions\/src\/flexions\/representations\/flexions\/PermissionRepresentation.php","size":3520}<-#BME#
<?php

/**
 * Created by PhpStorm.
 * User: bpds
 * Date: 23/07/2015
 * Time: 12:14
 */

require_once FLEXIONS_ROOT_DIR.'flexions/Core/Enum.php';

class PermissionType extends Enum{

    const API_KEY='api_key';
    const OAUTH_2="OAUTH_2";

    static  function possibleValues(){
        return array(
            PermissionType::API_KEY,
            PermissionType::OAUTH_2
        );
    }
}



class PermissionLocation extends Enum{

    const UNDEFINED='undefined';
    const IN_HEADERS='in_headers';
    const IN_PARAMETERS='in_parameters';

    static  function possibleValues(){
        return array(
            PermissionLocation::IN_HEADERS,
            PermissionLocation::IN_PARAMETERS
        );
    }
}


class PermissionRepresentation {

    const DEFAULT_PERMISSION_NAME="identification";

    /**
     * @var String the name of the permission.
     */
    public $permission_name=PermissionRepresentation::DEFAULT_PERMISSION_NAME;


    /* @var string in PermissionLocation */
    private $_location=PermissionLocation::UNDEFINED;

    /**
     * @return string
     */
    public function getLocation() {
        return $this->_location;
    }

    /**
     * @param string $location
     */
    public function setLocation($location) {
        $p=new PermissionLocation();
        if($p->isValid($location)){
            $this->_location = $location;
        }else{
            throw new exception("invalid PermissionLocation ".$location);
        }
    }



    /**
     * @return String
     */
    public function getPermissionName() {
        return $this->permission_name;
    }

    /**
     * @param String $permission_name
     */
    public function setPermissionName($permission_name) {
        $this->permission_name = $permission_name;
    }



}


class PermissionRepresentationWithAccessRights extends PermissionRepresentation{

    /**
     * Inspired by UNIX files systems permissions.
     * https://en.wikipedia.org/wiki/File_system_permissions
     * @var int according to posix file systems permissions
     */
     private $_access_rights=777;

    /**
     * @return int
     */
    public function getAccessRights() {
        return $this->_access_rights;
    }

    /**
     * @param int $access_rights
     */
    public function setAccessRights($access_rights) {
        $this->_access_rights = $access_rights;
    }

    /**
     * @return string in PermissionType
     */
    public function getPermissionType(){
        return PermissionType::API_KEY;
    }

}



class PermissionRepresentationOauth extends PermissionRepresentation {




    /**
     * Scopes let you specify exactly what type of access you need.
     * Scopes limit access for OAuth tokens.
     *
     * e.g :
     *
     *  "user:email"=>"access to the user mail",
     *  "repo:status"=>"grants read/write access to public and private repository "
     *
     * @var array
     */
    private $_scopes=array();

    public  $authorizationUrl;

    /**
     * PermissionRepresentationOauth constructor.
     */
    public function __construct() {
        $this->setLocation(PermissionLocation::IN_HEADERS);
    }


    /**
     * @return array
     */
    public function getScopes() {
        return $this->_scopes;
    }

    /**
     * @param array $scope
     */
    public function addScope(Array $scope) {
        $this->_scopes[]=$scope;
    }



    /**
     * @return string in PermissionType
     */
    public function getPermissionType(){
        return PermissionType::OAUTH_2;
    }

}#BMS#->{"filename":"ProjectRepresentation.php","checksum":3578954481,"relativePath":"BartlebyFlexions\/src\/flexions\/representations\/flexions\/ProjectRepresentation.php","size":3866}<-#BME#
<?php

/*
 Created by Benoit Pereira da Silva on 20/04/2013.
Copyright (c) 2013  http://www.chaosmos.fr

This file is part of Flexions

Flexions is free software: you can redistribute it and/or modify
it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Flexions is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU LESSER GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
along with Flexions  If not, see <http://www.gnu.org/Licenses/>
*/

class ProjectRepresentation {

    /**
     * @var array Array of ActionRepresentation
     */
    public $actions = array();

    /**
     * @var array Array of API entities (models)
     */
    public $entities = array();

    /**
     * @var array Any extra API data
     */
    public $extraData = array();


    /**
     * @var string Name of the API
     */
    public $name;

    /**
     * @var string API version
     */
    public $apiVersion;

    /**
     * @var string Summary of the API
     */
    public $description;

    /**
     * @var string baseUrl/basePath
     */
    public $baseUrl;


    /**
     *  Project wide class prefix
     * @var string
     */
    public $classPrefix = "";


    /**
     * @var array an associative array to pass specific metadata
     */
    public $metadata=array();


    // Actions


    /**
     * Current iteration action index
     * @var int
     */
    protected $_actionIndex = -1;

    /**
     * Return true while there is an action
     * @return boolean
     */
    public function iterateOnActions() {
        $this->_actionIndex++;
        if ($this->_actionIndex < count($this->actions)) {
            return true;
        } else {
            // Reinitialize
            $this->_actionIndex = -1;
            return false;
        }
    }

    /**
     * Returns the current iterated action
     * @return ActionRepresentation
     */
    public function getAction() {
        $nb = count($this->actions);
        if ($this->_actionIndex < $nb && $nb > 0) {
            $keys = array_keys($this->actions);
            return $this->actions[$keys[$this->_actionIndex]];
        }
        return null;
    }


    /**
     *
     * @return boolean
     */
    public function firstAction(){
        return( $this->_actionIndex==0);
    }
    /**
     *
     * @return boolean
     */
    public function lastAction(){
        return ( $this->_actionIndex== count($this->actions)-1);
    }



    // Entities

    /**
     * Current iteration action index
     * @var int
     */
    protected $_entityIndex = -1;

    /**
     * Return true while there is an entity
     * @return boolean
     */
    public function iterateOnEntities() {
        $this->_entityIndex++;
        if ($this->_entityIndex < count($this->actions)) {
            return true;
        } else {
            // Reinitialise
            $this->_entityIndex = -1;
            return false;
        }
    }

    /**
     * Returns the current iterated entity
     * @return EntityRepresentation
     */
    public function getEntity() {
        $nb = count($this->entities);
        if ($this->_entityIndex < $nb && $nb > 0) {
            $keys = array_keys($this->entities);
            return $this->entities[$keys[$this->_entityIndex]];
        }
        return null;
    }

    /**
     *
     * @return boolean
     */
    public function firstEntity(){
        return( $this->_entityIndex==0);
    }
    /**
     *
     * @return boolean
     */
    public function lastEntity(){
        return ( $this->_entityIndex== count($this->entities)-1);
    }



}

?>#BMS#->{"filename":"PropertyRepresentation.php","checksum":558249901,"relativePath":"BartlebyFlexions\/src\/flexions\/representations\/flexions\/PropertyRepresentation.php","size":3410}<-#BME#
<?php

/*
 Created by Benoit Pereira da Silva on 20/04/2013.
Copyright (c) 2013  http://www.chaosmos.fr

This file is part of Flexions

Flexions is free software: you can redistribute it and/or modify
it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Flexions is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU LESSER GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
along with Flexions  If not, see <http://www.gnu.org/Licenses/>
*/

class  PropertyRepresentation {

    /**
     * @var string unique Name of the property
     */
    public $name=NULL;

    /**
     * @var string  Documentation  of the property
     */
    public $description=NULL;

    /**
     * @var string Type  const enumerated in FlexTypes
     */
    public $type=NULL;

    /**
     * @var  string When the type is an OBJECT or a COLLECTION or an ENUM, you can specify its class
     */
    public $instanceOf=NULL;

    /**
     *  When the type is an ENUM, you can specify its precise type.
     * Swift enum can be typed. We want to be able to cast the enums.
     * E.g : property status type=enum, instanceOf=string , enumPreciseType=User.status
     *
     *  @var  string
     */
    public $emumPreciseType=NULL;

    /**
     * When $type is an ENUM you can enumerate the values in an array
     * @var array
     */
    public $enumerations = array();


    /**
     * Set to true if the type is generated (allow to to discriminate primitive from generated types)
     * @var bool
     */
    public $isGeneratedType = false;



    /**
     * Whether or not the property is required
     * @var  bool
     */
    public $required=false;

    /**
     * Default value to use if no value is supplied
     * @var  mixed
     */
    public $default=NULL;

    /**
     * When the type is a string, you can specify the regex pattern that a value must match
     * @var string
     */
    public $pattern=NULL;


    /**
     * Defines if the property should be serialized.
     * @var bool
     */
    public $isSerializable = true;

    /**
     * Defines if the property changes should be observed
     * @var bool
     */
    public $isObservable = true;


    /**
     * Defines if the property should be crypted on Serialization
     * @var bool
     */
    public $isCryptable = false;


    /**
     * Defines if the class exists and is external to the generative package.
     * @var bool
     */
    public $isExternal = false;


    /**
     * @var bool set to false if the property is not extractible in a sub-graph copy operation
     */
    public $isExtractible = true;

    /**
     * Set to true to allow for example cocoa bindings.
     * @var bool
     */
    public $isDynamic = false;

    /**
     * @var NULL or an  array of PropertyRepresentation used to propose a serialization re-mapping
     * Usage sample : in cuds.withWeakLogic.swift.template.php to deal with Operation(s) partial graph mapping
     */
    public $customSerializationMapping=NULL;

    /**
     * An associative array to pass specific metadata
     * @var array
     */
    public $metadata=array();

}

?>#BMS#->{"filename":"SecurityContextRepresentation.php","checksum":4211258615,"relativePath":"BartlebyFlexions\/src\/flexions\/representations\/flexions\/SecurityContextRepresentation.php","size":1461}<-#BME#
<?php

/**
 * Created by PhpStorm.
 * User: bpds
 * Date: 23/07/2015
 * Time: 12:10
 */

require_once FLEXIONS_ROOT_DIR.'flexions/Core/Enum.php';


class RelationToPermission extends Enum{
    const UNDEFINED='undefined';
    const REQUIRES='requires';  // authentication required
    const PROVIDES='provides';  // e.g log in
    const DISCARDS='discards';  // e.g log out

    static  function possibleValues(){
        return array(
            RelationToPermission::UNDEFINED,
            RelationToPermission::REQUIRES,
            RelationToPermission::PROVIDES,
            RelationToPermission::DISCARDS
        );

    }

}


class SecurityContextRepresentation {

    /**
     * @var PermissionRepresentation
     */
    private  $permission;

    /**
     * @var string one of RelationToPermission consts
     */
    private $_relation=RelationToPermission::UNDEFINED;



    /**
     * @return PermissionRepresentation
     */
    public function getPermission() {
        return $this->permission;
    }

    /**
     * @param PermissionRepresentation $permission
     */
    public function setPermission(PermissionRepresentation $permission) {
        $this->permission = $permission;
    }


    /**
     * @return string
     */
    public function getRelation() {
        return $this->_relation;
    }

    /**
     * @param string $relation
     */
    public function setRelation($relation) {
        $this->_relation = $relation;
    }

}
#BMS#->{"filename":"flexions.php","checksum":1221777291,"relativePath":"BartlebyFlexions\/src\/flexions.php","size":1072}<-#BME#
<?php

/*
Created by Benoit Pereira da Silva on 20/04/2013.
Copyright (c) 2013  http://www.chaosmos.fr

This file is part of Flexions

Flexions is free software: you can redistribute it and/or modify
it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Flexions is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU LESSER GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
along with Flexions  If not, see <http://www.gnu.org/Licenses/>

*/

define ( "ECHO_LOGS", false );
define ( "FLEXIONS_ROOT_DIR", __DIR__ . '/' );
define ( "FLEXIONS_MODULES_DIR", FLEXIONS_ROOT_DIR . 'modules/' );
define ( "VERBOSE_FLEXIONS", true );

try {
    include_once "flexions/Core/flexions.script.php";
}catch (Exception $e){
    echo 'ROOT EXCEPTION '.$e->getMessage();
}
#BMS#->{"filename":"endPoints.json.template.php","checksum":2882801176,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/modeling-meta-templates\/project\/endPoints.json.template.php","size":18661}<-#BME#
<?php

include  FLEXIONS_SOURCE_DIR.'/Shared.php';

// URD == Upsert Read Delete
// CRUD == Create Read Update Delete

/* @var $f Flexed */
/* @var $d EntityRepresentation */

if (isset ( $f )) {
    $f->fileName = 'pathsFragment.json';
    $f->package = '';
}

/* TEMPLATES STARTS HERE -> */?>
{ "paths" : {
<?php
/* @var $d ProjectRepresentation */
/* @var $entity EntityRepresentation */

$counter=0;
$blocks=array();
foreach ($d->entities as $entity ) {
    $name = $entity->name;

    if (isset($prefix)) {
        $name = str_replace($prefix, '', $name);
    }


    //$pluralized=lcfirst(P

    //luralization::pluralize($name));
    $counter++;

    // EXCLUSION FROM CRUD
    // You can exclude entities containing a given string

    $shouldBeExcluded = false;
    $exclusion = array();
    if (isset($excludeActionsWith)) {
        $exclusion = $excludeActionsWith;
    }
    foreach ($exclusion as $exclusionString) {
        if (strpos($name, $exclusionString) !== false) {
            $shouldBeExcluded = true;
        }
    }

    if ($shouldBeExcluded) {
        continue;//Let's exclude this entity from the CRUD
    }


    // UPDATE EXCLUSION
    $isUnModifiable = false;
    $unModifiable = array();
    if (isset($unModifiableEntitiesWith)) {
        $unModifiable = $unModifiableEntitiesWith;
    }
    foreach ($unModifiable as $unModifiableString) {
        if (strpos($name, $unModifiableString) !== false) {
            $isUnModifiable = true;
        }
    }

    // DELETION EXCLUSION
    $isUndeletable = false;
    $undeletable = array();
    if (isset($unDeletableEntitiesWith)) {
        $undeletable = $unDeletableEntitiesWith;
    }
    foreach ($undeletable as $undeletableString) {
        if (strpos($name, $undeletableString) !== false) {
            $isUndeletable = true;
        }
    }

    $pluralizedName = lcfirst(Pluralization::pluralize($name));


    ////////////////////////////
    // SINGLE INSTANCE
    ///////////////////////////


    // The read block is the only one with the id in the path
    $readBlock = '
        "/' . lcfirst($name) . '/{' . lcfirst($name) . 'Id}" : {
        "get" : {
            "tags" : [
                "' . $pluralizedName . '"
            ],
            "summary" : "Find ' . $name . ' by ID",
            "description" : "Returns a single ' . $name . '",
            "operationId" : "read' . ucfirst($name) . 'ById",
            "produces" : [
                    "application/json"
                ],
            "parameters" : [
              {
                "name" : "' . lcfirst($name) . 'Id",
                "in" : "path",
                "description" : "The unique identifier the the of ' . $name . '",
                "required" : true,
                "type" : "string"
              }


            ],
            "responses" : {
                    "200" : {
                        "description" : "successful operation",
                         "schema" : {
                            "$ref" : "#/definitions/' . ucfirst($name) . '"
                        }
                    },
                    "404" : {
                         "description" : "' . ucfirst($name) . ' not found"
                    }
            }
          }
        },';

    if ($entity->usesUrdMode() == true) {
        $upsertBlock = '
    "/' . lcfirst($name) . '" :
     {
        "post" : {
            "tags" : [
                "' . $pluralizedName . '"
            ],
        "summary" : "Creates or insert a new ' . $name . ' to the system",
        "description" : "",
        "operationId" : "upsert' . ucfirst($name) . '",
        "consumes" : [
                "application/json"
            ],
        "produces" : [
                "application/json"
            ],
        "parameters" : [
          {
            "in" : "body",
            "name" : "' . lcfirst($name) . '",
            "description" : "The instance of' . $name . ' that needs to be inserted or updated",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/' . ucfirst($name) . '"
            }
          }
        ],
        "responses" : {
                "405" : {
                    "description" : "Invalid input"
          }
        },
         "metadata": {
              "urdMode": true
          }
      }
    ';

    } else {

        $createBlock = '
    "/' . lcfirst($name) . '" :
     {
        "post" : {
            "tags" : [
                "' . $pluralizedName . '"
            ],
        "summary" : "Creates a new ' . $name . ' to the system",
        "description" : "",
        "operationId" : "create' . ucfirst($name) . '",
        "consumes" : [
                "application/json"
            ],
        "produces" : [
                "application/json"
            ],
        "parameters" : [


          {
            "in" : "body",
            "name" : "' . lcfirst($name) . '",
            "description" : "The instance of' . $name . ' that needs to be added",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/' . ucfirst($name) . '"
            }
          }
        ],
        "responses" : {
                "405" : {
                    "description" : "Invalid input"
          }
        },
         "metadata": {
              "urdMode": false
          }
      }
    ';


        $updateBlock = ',
        "put" : {
            "tags" : [
                "' . $pluralizedName . '"
            ],
        "summary" : "Update an existing ' . $name . '",
        "description" : "",
        "operationId" : "update' . ucfirst($name) . '",
        "consumes" : [
                "application/json"
            ],
        "produces" : [
                "application/json"
            ],
        "parameters" : [
          {
            "in" : "body",
            "name" : "' . lcfirst($name) . '",
            "description" : "The ' . ucfirst($name) . ' instance to update",
            "required" : true,
            "schema" : {
              "$ref" : "#/definitions/' . ucfirst($name) . '"
            }
          }
        ],
        "responses" : {
          "400" : {
             "description" : "Invalid ID supplied"
          },
          "404" : {
                    "description" : "' . ucfirst($name) . ' not found"
          },
          "405" : {
                    "description" : "Validation exception"
          }
        }
      }';

    }


    $deleteBlock = ',
        "delete" : {
            "tags" : [
                "' . $pluralizedName . '"
            ],
            "summary" : "Deletes a ' . $name . '",
            "description" : "",
            "operationId" : "delete' . ucfirst($name) . '",
            "produces" : [
                    "application/json"
                ],
            "parameters" : [
              {
                "name" : "' . lcfirst($name) . 'Id",
                "in" : "path",
                "description" : "The identifier of the ' . ucfirst($name) . ' to be deleted",
                "required" : true,
                "type" : "string"
              }
            ],
            "responses" : {
                    "400" : {
                        "description" : "Invalid ' . $name . ' value"
              }
            }
        }
     ';

    $block = $readBlock;
    if ($entity->usesUrdMode() == true) {
        $block .= $upsertBlock;
    } else {
        $block .= $createBlock;
        if ($isUnModifiable == false) {
            $block .= $updateBlock;
        }
    }

    if ($isUndeletable == false) {
        $block .= $deleteBlock;
    }
    $block .= '}';
    $block .= ',';


    ////////////////////////////
    // COLLECTIONS
    ////////////////////////////

    if ($entity->usesUrdMode() == true) {

        $upsertCollectionBlock = '
    "/' . lcfirst($pluralizedName) . '" : {
        "post" : {
            "tags" : [
                "' . $pluralizedName . '"
            ],
            "summary" : "Creates or updates ' . $pluralizedName . '",
            "description" : "",
            "operationId" : "upsert' . ucfirst($pluralizedName) . '",
            "consumes" : [
                    "application/json"
                ],
            "produces" : [
                    "application/json"
                ],
            "parameters" : [
             {
                "in" : "body",
                "name" : "' . lcfirst($pluralizedName) . '",
                "description" : "Collection of ' . $name . ' that needs to be upserted",
                "required" : true,
                "schema": {
                            "type": "array",
                            "items":
                            {
                                "$ref": "#/definitions/' . ucfirst($name) . '"
                             }
                         }
              }
            ],
            "responses" : {
                    "405" : {
                        "description" : "Invalid input"
                     }
            },
         "metadata": {
              "urdMode": true
          }
     },
    ';
    } else {

        $createCollectionBlock = '
    "/' . lcfirst($pluralizedName) . '" : {
        "post" : {
            "tags" : [
                "' . $pluralizedName . '"
            ],
            "summary" : "Create ' . $pluralizedName . ' to the system",
            "description" : "",
            "operationId" : "create' . ucfirst($pluralizedName) . '",
            "consumes" : [
                    "application/json"
                ],
            "produces" : [
                    "application/json"
                ],
            "parameters" : [
             {
                "in" : "body",
                "name" : "' . lcfirst($pluralizedName) . '",
                "description" : "Collection of ' . $name . ' that needs to be added",
                "required" : true,
                "schema": {
                            "type": "array",
                            "items":
                            {
                                "$ref": "#/definitions/' . ucfirst($name) . '"
                             }
                         }
              }
            ],
            "responses" : {
                    "405" : {
                        "description" : "Invalid input"
                     }
            },
         "metadata": {
              "urdMode": false
          }
     },
    ';

    }
    $readCollectionBlock = '    "get" : {
            "tags" : [
                "' . $pluralizedName . '"
            ],
            "summary" : "Find ' . $pluralizedName . ' by ID",
            "description" : "Returns a collection of ' . $name . '",
            "operationId" : "read' . ucfirst($pluralizedName) . 'ByIds",
            "produces" : [
                    "application/json"
                ],
            "parameters" : [
              {
                "name" : "ids",
                "in" : "path",
                "description" : "The IDS of the ' . $pluralizedName . ' to return",
                "required" : true,
                 "type": "array",
                 "items": {
                     "type": "string"
                  }
              },
              {
                "in" : "body",
                "name" : "result_fields",
                "description" : "the result fields (MONGO DB)",
                "required" : true,
                "schema": {
                            "type": "array",
                            "items":
                            {
                                "type": "string"
                             }
                         }
              },
              {
                "in" : "body",
                "name" : "sort",
                "description" : "the sort (MONGO DB)",
                "required" : false,
                "type":  "dictionary"
               }
            ],
            "responses" : {
               "200" : {

                       "description" : "successful operation",
                       "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/' . ucfirst($name) . '"
                            }
                       }

              },
              "400" : {
                        "description" : "Invalid IDS supplied"
              },
              "404" : {
                        "description" : "' . ucfirst($pluralizedName) . ' not found"
              }
            }
          }
        ';

    if ($entity->usesUrdMode() == false) {
        $updateCollectionBlock = ',
        "put" : {
            "tags" : [
                "' . $pluralizedName . '"
            ],
            "summary" : "Update an existing ' . $name . '",
            "description" : "",
            "operationId" : "update' . ucfirst($pluralizedName) . '",
            "consumes" : [
                    "application/json"
                ],
            "produces" : [
                    "application/json"
                ],
            "parameters" : [
              {
                "in" : "body",
                "name" : "' . lcfirst($pluralizedName) . '",
                "description" : "Collection of ' . ucfirst($name) . ' to update",
                "required" : true,
                "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/' . ucfirst($name) . '"
                             }
                    }
              }
            ],
            "responses" : {
              "400" : {
                 "description" : "Invalid IDS supplied"
              },
              "404" : {
                        "description" : "' . ucfirst($pluralizedName) . ' not found"
              },
              "405" : {
                        "description" : "Validation exception"
              }
            }
      }';

    }

    $deleteCollectionBlock = ',
        "delete" : {

            "tags" : [
                "' . $pluralizedName . '"
            ],
            "summary" : "Deletes some ' . $pluralizedName . '",
            "description" : "",
            "operationId" : "delete' . ucfirst($pluralizedName) . '",
            "produces" : [
                    "application/json"
                ],
            "parameters" : [
              {
                "name" : "ids",
                "in" : "path",
                "description" : "The ids of ' . $pluralizedName . ' to delete",
                "required" : true,
                 "type": "array",
                 "items": {
                     "type": "string"
                  }
              }
            ],
            "responses" : {
                    "400" : {
                        "description" : "Invalid ' . $pluralizedName . ' value"
                    }
            }
        }';


    if ($entity->usesUrdMode() == true) {

        $block .= $upsertCollectionBlock;
        $block .= $readCollectionBlock;

        if ($isUndeletable == false) {
            $block .= $deleteCollectionBlock;
        }

        $block .= cr() . '}';
        $block .= ',';

    } else {

        $block .= $createCollectionBlock;
        $block .= $readCollectionBlock;
        if ($isUnModifiable == false) {
            $block .= $updateCollectionBlock;
        }
        if ($isUndeletable == false) {
            $block .= $deleteCollectionBlock;
        }
        $block .= cr() . '}';
        $block .= ',';

    }


    ////////////////////////////
    // GETTER BY QUERY
    ////////////////////////////


    // We use POST to pass a query
    // Other Reading endpoint are cachable not those one ()

    $genericQueryGetPathBlock = '
        "/' . lcfirst($pluralizedName) . 'ByQuery" : {
            "get" : {
                "tags" : [
                    "' . $pluralizedName . '"
                ],
                "summary" : "Find ' . $pluralizedName . ' by query (check $q, $s, $f in Bartleby\'s MongoCallDataRawWrapper)",
                "description" : "Returns a collection of ' . $name . '",
                "operationId" : "read' . ucfirst($pluralizedName) . 'ByQuery",
                "produces" : [
                        "application/json"
                    ],
                 "parameters" : [
                     {
                        "in" : "body",
                        "name" : "result_fields",
                        "description" : "the result fields (MONGO DB)",
                        "required" : true,
                        "schema": {
                                    "type": "array",
                                    "items":
                                    {
                                        "type": "string"
                                     }
                                 }
                      },
                       {
                        "in" : "body",
                        "name" : "sort",
                        "description" : "the sort (MONGO DB)",
                        "required" : false,
                        "type":  "dictionary"
                      },
                      {
                        "in" : "body",
                        "name" : "query",
                        "description" : "the query (MONGO DB)",
                        "required" : false,
                        "type":  "dictionary"
                      }
                  ]
                ,
                "responses" : {
                   "200" : {
                             "description" : "successful operation",
                              "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/' . ucfirst($name) . '"
                                    }
                              }
                   },
                  "400" : {
                            "description" : "Invalid IDS supplied"
                  },
                  "404" : {
                            "description" : "' . ucfirst($pluralizedName) . ' not found"
                  }
                }
            }
        },';
    $block .= $genericQueryGetPathBlock;
    $blocks[] = $block;
}
// Let's echo the blocks
$nbOfBlocks=count($blocks);
for ($i=0;$i<$nbOfBlocks;$i++){
    $currentBlock=$blocks[$i];
    if($i==$nbOfBlocks-1){
        // Delete the last comma.
        $currentBlock=substr($currentBlock,0,strlen($currentBlock)-1);
    }
    echo($currentBlock);
}
?>
    }
}
<?php /*<- END OF TEMPLATE */

?>#BMS#->{"filename":"cuds.withWeakLogic.swift.template.php","checksum":1387911371,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/templates\/actions\/cuds.withWeakLogic.swift.template.php","size":22999}<-#BME#
<?php

/*
 * SWIFT 2.X template
 * This weak logic template is compliant with Bartleby 1.0 approach.
 * It allows to update easily very complex templates.gt
 * It is not logic less but the logic intent to be as weak as possible
 */
require_once FLEXIONS_MODULES_DIR . '/Bartleby/templates/Requires.php';

/* @var $flexed Flexed */
/* @var $actionRepresentation ActionRepresentation*/
/* @var $hypotypose Hypotypose */

if (isset( $f,$d,$h)) {

    /* @var $f Flexed */
    /* @var $d ActionRepresentation*/
    /* @var $h Hypotypose */

    // We use explicit name (!)
    // And reserve $f , $d , $h possibly for blocks

    /* @var $flexed Flexed*/
    /* @var $actionRepresentation ActionRepresentation*/
    /* @var $hypotypose Hypotypose*/

    $flexed=$f;
    $actionRepresentation=$d;
    $hypotypose=$h;

    $flexed->fileName = $actionRepresentation->class . '.swift';
    $flexed->package = 'xOS/operations/';

}else{
    return NULL;
}

/////////////////
// EXCLUSIONS
/////////////////

// Should this Action be excluded ?

$exclusionName = str_replace($h->classPrefix, '', $d->class);
if (isset($excludeActionsWith)) {
    foreach ($excludeActionsWith as $exclusionString) {
        if (strpos($exclusionName, $exclusionString) !== false) {
            return NULL; // We return null
        }
    }
}


// This template cannot be used for GET Methods
if ($actionRepresentation->httpMethod==='GET'){
    return NULL;
}

// We want also to exclude by query

if (!(strpos($d->class,'ByQuery')===false)){
    return NULL;
}

/////////////////////////
// VARIABLES COMPUTATION
/////////////////////////

// Compute ALL the Variables you need in the template

$httpMethod=$actionRepresentation->httpMethod;
$pluralizedName=lcfirst($actionRepresentation->collectionName);
$singularName=lcfirst(Pluralization::singularize($pluralizedName));
$baseClassName=ucfirst($actionRepresentation->class);
$ucfSingularName=ucfirst($singularName);
$ucfPluralizedName=ucfirst($pluralizedName);

$actionString=NULL;
$localAction=NULL;

$dataSpaceSyntagm='inDataSpace';


if ($httpMethod=="POST"){
    $actionString='creation';
    $localAction='upsert';
}elseif ($httpMethod=="PUT"){
    $actionString='update';
    $localAction='upsert';
}elseif ($httpMethod=="PATCH"){
    $actionString='update';
    $localAction='upsert';
}elseif ($httpMethod=="DELETE"){
    $actionString=NULL;
    $localAction=NULL;
    $dataSpaceSyntagm='fromDataSpace';
}else{
    $actionString='NO_FOUND';
    $localAction='NO_FOUND';
}

$firstParameterName=NULL;
$firstParameterTypeString=NULL;
$varName=NULL;
$executeArgumentSerializationBlock=NULL;
/* @var $firstParameter PropertyRepresentation */
$firstParameter=NULL;


while($actionRepresentation->iterateOnParameters()){
    /*@var $parameter PropertyRepresentation*/
    $parameter=$actionRepresentation->getParameter();
    // We use the first parameter.
    if (!isset($varName,$firstParameterName,$firstParameterTypeString)){
        if ($parameter->type == FlexionsTypes::COLLECTION){
            $firstParameter=$parameter;
            $firstParameterName=$parameter->name;
            if($httpMethod!='DELETE'){
                $firstParameterTypeString='['.$ucfSingularName.']';
                $executeArgumentSerializationBlock="
                var parameters=Dictionary<String, AnyObject>()
                var collection=[Dictionary<String, AnyObject>]()

                for $singularName in $pluralizedName{
                    let serializedInstance=Mapper<$ucfSingularName>().toJSON($singularName)
                    collection.append(serializedInstance)
                }
                parameters[\"$pluralizedName\"]=collection".cr();
            }else{
                $actionString='deleteByIds';
                $localAction='deleteByIds';
                $firstParameterTypeString='[String]';
                $executeArgumentSerializationBlock="
                var parameters=Dictionary<String, AnyObject>()
                parameters[\"ids\"]=ids".cr();
            }
            $varName=$pluralizedName;
        }else{
            $firstParameter=$parameter;
            $firstParameterName=$parameter->name;
            if($httpMethod!='DELETE'){
                $firstParameterTypeString=$ucfSingularName;
                $executeArgumentSerializationBlock="
                var parameters=Dictionary<String, AnyObject>()
                parameters[\"$singularName\"]=Mapper<$firstParameterTypeString>().toJSON($firstParameterName)".cr();
            }else{
                $actionString='deleteById';
                $localAction='deleteById';
                $firstParameterTypeString='String';
                $executeArgumentSerializationBlock="
                var parameters=Dictionary<String, AnyObject>()
                parameters[\"".$singularName."Id\"]=".$singularName."Id".cr();
            }
            $varName=$singularName;
        }
    }
}


/////////////////////////
// TEMPLATE
/////////////////////////

/* TEMPLATES STARTS HERE -> */?>
<?php echo GenerativeHelperForSwift::defaultHeader($flexed,$actionRepresentation); ?>

import Foundation
#if !USE_EMBEDDED_MODULES
<?php
if (isset($isIncludeInBartlebysCommons) && $isIncludeInBartlebysCommons==true){
    echoIndent(cr(),0);
    echoIndentCR("import Alamofire",0);
    echoIndentCR("import ObjectMapper",0);
}else{
    echoIndent(cr(),0);
    echoIndentCR("import Alamofire",0);
    echoIndentCR("import ObjectMapper",0);
    echoIndentCR("import BartlebyKit",0);
}
/*@var array */
$GLOBAL_GENERATED_ACTIONS[]=$baseClassName;

?>
#endif

@objc(<?php echo$baseClassName ?>) public class <?php echo$baseClassName ?> : <?php echo GenerativeHelperForSwift::getBaseClass($f,$d); ?>,JHTTPCommand{

    // Universal type support
    override public class func typeName() -> String {
        return "<?php echo $baseClassName ?>"
    }

    private var _<?php echo$firstParameterName ?>:<?php echo$firstParameterTypeString ?> = <?php echo$firstParameterTypeString ?>()

    // The dataSpace UID
    private var _spaceUID:String=Default.NO_UID

    // The operation
    private var _operation:Operation=Operation()

    required public convenience init(){
        self.init(<?php echo$firstParameterTypeString ?>(), <?php echo$dataSpaceSyntagm ?>:Default.NO_UID)
    }
<?php

//////////////////////////////
//
// THIS IS A COMPLEX CASE
// READ CAREFULLY
//
// We want to serialize the parameters has Mappable & NSSecureCoding
// and  not serialize globally the operation
// as the operation will serialize this instance in its data dictionary.
//
// We Gonna inject the relevant private properties.
// #1 Create a virtual entity
// #2 Inject the PropertyRepresentation
////////////////////////////////

/* @var $virtualEntity EntityRepresentation */
$virtualEntity=new EntityRepresentation();

$_ENTITY_rep=new PropertyRepresentation();
$_ENTITY_rep->name='_'.$firstParameterName;


$_ENTITY_rep->type=$firstParameter->type;
$_ENTITY_rep->instanceOf=$firstParameter->instanceOf;
$_ENTITY_rep->required=true;
$_ENTITY_rep->isDynamic=false;
$_ENTITY_rep->default=NULL;
$_ENTITY_rep->isGeneratedType=true;
$virtualEntity->properties[]=$_ENTITY_rep;


$_spaceUID_rep=new PropertyRepresentation();
$_spaceUID_rep->name="_spaceUID";
$_spaceUID_rep->type=FlexionsTypes::STRING;
$_spaceUID_rep->required=true;
$_spaceUID_rep->isDynamic=false;
$_spaceUID_rep->default="Default.NO_UID";
$_spaceUID_rep->isGeneratedType=false;
$virtualEntity->properties[]=$_spaceUID_rep;


// Operation is a very special object.
// Used By bartleby interact with a collaborative api
// (!) Do not serialize globally the operation
// as the operation will serialize this instance in its data dictionary.

$_opUID_operation_rep=new PropertyRepresentation();
$_opUID_operation_rep->name="_operation.spaceUID";
$_opUID_operation_rep->type=FlexionsTypes::STRING;
$_opUID_operation_rep->required=true;
$_opUID_operation_rep->default="\\(Default.NO_UID)";
$_opUID_operation_rep->isGeneratedType=true;

$_creatorUID_operation_rep=new PropertyRepresentation();
$_creatorUID_operation_rep->name="_operation.creatorUID";
$_creatorUID_operation_rep->type=FlexionsTypes::STRING;
$_creatorUID_operation_rep->required=true;
$_creatorUID_operation_rep->default="\\(Default.NO_UID)";
$_creatorUID_operation_rep->isGeneratedType=true;

$_status_operation_rep=new PropertyRepresentation();
$_status_operation_rep->name="_operation.status";
$_status_operation_rep->type=FlexionsTypes::ENUM;
$_status_operation_rep->instanceOf="string";
$_status_operation_rep->emumPreciseType="Operation.Status";
$_status_operation_rep->required=true;
$_status_operation_rep->default='.None';
$_status_operation_rep->isGeneratedType=true;

$_counter_operation_rep=new PropertyRepresentation();
$_counter_operation_rep->name="_operation.counter";
$_counter_operation_rep->type=FlexionsTypes::INTEGER;
$_counter_operation_rep->required=false;
$_counter_operation_rep->isGeneratedType=true;

$_creationDate_operation_rep=new PropertyRepresentation();
$_creationDate_operation_rep->name="_operation.creationDate";
$_creationDate_operation_rep->type=FlexionsTypes::DATETIME;
$_creationDate_operation_rep->required=false;
$_creationDate_operation_rep->isGeneratedType=true;

$_baseUrl_operation_rep=new PropertyRepresentation();
$_baseUrl_operation_rep->name="_operation.baseUrl";
$_baseUrl_operation_rep->type=FlexionsTypes::URL;
$_baseUrl_operation_rep->required=false;
$_baseUrl_operation_rep->isGeneratedType=true;

$_operation_rep=new PropertyRepresentation();
$_operation_rep->name="_operation";
$_operation_rep->type="Operation";
$_operation_rep->required=true;
$_operation_rep->isDynamic=false;
$_operation_rep->default="Operation()";
$_operation_rep->isGeneratedType=true;
// So we use a customSerializationMapping
$_operation_rep->customSerializationMapping=array(
                                                    $_opUID_operation_rep,
                                                    $_creatorUID_operation_rep,
                                                    $_status_operation_rep,
                                                    $_counter_operation_rep,
                                                    $_creationDate_operation_rep,
                                                    $_baseUrl_operation_rep
                                                );
$virtualEntity->properties[]=$_operation_rep;
$blockRepresentation=$virtualEntity;

// Mappable
include  FLEXIONS_MODULES_DIR.'/Bartleby/templates/blocks/Mappable.swift.block.php';
if( $modelsShouldConformToNSCoding ) {
    // NSSecureCoding
    include  FLEXIONS_MODULES_DIR.'/Bartleby/templates/blocks/NSSecureCoding.swift.block.php';
}

?>


    /**
    This is the designated constructor.

    - parameter <?php echo$firstParameterName ?>: the <?php echo$firstParameterName ?> concerned the operation
    - parameter spaceUID the space UID

    */
    init (_ <?php echo$firstParameterName ?>:<?php echo$firstParameterTypeString ?>=<?php echo$firstParameterTypeString."()" ?>, <?php echo$dataSpaceSyntagm ?> spaceUID:String) {
        self._<?php echo$firstParameterName ?>=<?php echo$firstParameterName.cr() ?>
        self._spaceUID=spaceUID
        super.init()
    }

    /**
    Creates the operation and proceeds to commit

    - parameter <?php echo$firstParameterName ?>: the instance
    - parameter spaceUID:     the space UID
    */
    static func commit(<?php echo$firstParameterName ?>:<?php echo$firstParameterTypeString ?>, <?php echo$dataSpaceSyntagm ?> spaceUID:String){
        let operationInstance=<?php echo$baseClassName ?>(<?php echo$firstParameterName ?>,<?php echo$dataSpaceSyntagm ?>:spaceUID)
        operationInstance.commit()
    }


    func commit(){
        let context=Context(code:<?php echo crc32($baseClassName.'.commit') ?>, caller: "<?php echo$baseClassName ?>.commit")
        if let document = Bartleby.sharedInstance.getDocumentByUID(self._spaceUID) {

                // Prepare the operation serialization
                self.defineUID()
                self._operation.defineUID()
                self._operation.counter=0
                self._operation.status=Operation.Status.Pending
                self._operation.baseUrl=document.registryMetadata.collaborationServerURL
                self._operation.creationDate=NSDate()
                self._operation.spaceUID=self._spaceUID
<?php
if ($httpMethod=="DELETE"){
    if ($parameter->type == FlexionsTypes::COLLECTION){
        echoIndentCR('                let stringIDS=PString.ltrim(self._'.$firstParameterName.'.reduce("", combine: { $0+","+$1 }),characters:",")',0);
        echoIndentCR('                self._operation.summary="'.$baseClassName.'(\(stringIDS))"',0);
    }else{
        echoIndentCR('                self._operation.summary="'.$baseClassName.'(\(self._'.$firstParameterName.'))"',0);
    }
}else{
    if ($parameter->type == FlexionsTypes::COLLECTION){
        echoIndentCR('                let stringIDS=PString.ltrim(self._'.$firstParameterName.'.reduce("", combine: { $0+","+$1.UID }),characters:",")',0);
        echoIndentCR('                self._operation.summary="'.$baseClassName.'(\(stringIDS))"',0);
    }else{
        echoIndentCR('                self._operation.summary="'.$baseClassName.'(\(self._'.$firstParameterName.'.UID))"',0);
    }
}
?>

                if let currentUser=document.registryMetadata.currentUser{
                    self._operation.creatorUID=currentUser.UID
                    self.creatorUID=currentUser.UID
                }

                // Provision the operation.
                do{
                    let ic:OperationsCollectionController = try document.getCollection()
                    ic.add(self._operation, commit:false)
                }catch{
                    Bartleby.sharedInstance.dispatchAdaptiveMessage(context,
                    title: "Structural Error",
                    body: "Operation collection is missing",
                    onSelectedIndex: { (selectedIndex) -> () in
                    })
                }
                self._operation.toDictionary=self.dictionaryRepresentation()
        <?php
            if ($httpMethod!="DELETE"){
                if ($parameter->type == FlexionsTypes::COLLECTION){
                    echo("
                for item in self._$firstParameterName{
                     item.committed=true
                 }".cr());
                }else{
                    echo("
                self._$firstParameterName.committed=true".cr());
                }
            }
        ?>
        }else{
            // This document is not available there is nothing to do.
            let m=NSLocalizedString("Registry is missing", comment: "Registry is missing")
            Bartleby.sharedInstance.dispatchAdaptiveMessage(context,
                    title: NSLocalizedString("Structural error", comment: "Structural error"),
                    body: "\(m) spaceUID=\(self._spaceUID)",
                    onSelectedIndex: { (selectedIndex) -> () in
                    }
            )
        }
    }

    public func push(sucessHandler success:(context:JHTTPResponse)->(),
        failureHandler failure:(context:JHTTPResponse)->()){
        if let <?php if($httpMethod=="POST"){echo("document");}else{echo("_");} ?> = Bartleby.sharedInstance.getDocumentByUID(self._spaceUID) {
            // The unitary operation are not always idempotent
            // so we do not want to push multiple times unintensionnaly.
            if  self._operation.status==Operation.Status.Pending ||
                self._operation.status==Operation.Status.Unsucessful {
                // We try to execute
                self._operation.status=Operation.Status.InProgress
                <?php echo$baseClassName ?>.execute(<?php echo"self._$firstParameterName,
                    $dataSpaceSyntagm:self._spaceUID,".cr() ?>
                    sucessHandler: { (context: JHTTPResponse) -> () in
                        <?php if ($httpMethod=="POST") {
                            echo("document.markAsDistributed(&self._$firstParameterName)".cr());
                        } else {
                            echo(cr());
                        }
                        ?>
                        self._operation.counter=self._operation.counter!+1
                        self._operation.status=Operation.Status.Successful
                        self._operation.responseDictionary=Mapper<JHTTPResponse>().toJSON(context)
                        self._operation.lastInvocationDate=NSDate()
                        success(context:context)
                    },
                    failureHandler: {(context: JHTTPResponse) -> () in
                        self._operation.counter=self._operation.counter!+1
                        self._operation.status=Operation.Status.Unsucessful
                        self._operation.responseDictionary=Mapper<JHTTPResponse>().toJSON(context)
                        self._operation.lastInvocationDate=NSDate()
                        failure(context:context)
                    }
                )
            }else{
                // This document is not available there is nothing to do.
                let context=Context(code:<?php echo crc32($baseClassName.'.push') ?>, caller: "<?php echo$baseClassName ?>.push")
                Bartleby.sharedInstance.dispatchAdaptiveMessage(context,
                    title: NSLocalizedString("Push error", comment: "Push error"),
                    body: "\(NSLocalizedString("Attempt to push an operation with status ==",comment:"Attempt to push an operation with status =="))\(self._operation.status))",
                    onSelectedIndex: { (selectedIndex) -> () in
                })
            }
        }
    }

    static public func execute(<?php echo$firstParameterName ?>:<?php echo$firstParameterTypeString ?>,
<?php echo$dataSpaceSyntagm ?> spaceUID:String,
            sucessHandler success:(context:JHTTPResponse)->(),
            failureHandler failure:(context:JHTTPResponse)->()){
                let baseURL=Bartleby.sharedInstance.getCollaborationURLForSpaceUID(spaceUID)
                let pathURL=baseURL.URLByAppendingPathComponent("<?php echo$varName ?>")<?php echo $executeArgumentSerializationBlock?>
                let urlRequest=HTTPManager.mutableRequestWithToken(inDataSpace:spaceUID,withActionName:"<?php echo$baseClassName ?>" ,forMethod:"<?php echo$httpMethod?>", and: pathURL)
                let r:Request=request(ParameterEncoding.JSON.encode(urlRequest, parameters: parameters).0)
                r.responseJSON{ response in

                    // Store the response
                    let request=response.request
                    let result=response.result
                    let response=response.response

                    // Bartleby consignation
                    let context = JHTTPResponse( code: <?php echo crc32($baseClassName.'.execute') ?>,
                        caller: "<?php echo$baseClassName ?>.execute",
                        relatedURL:request?.URL,
                        httpStatusCode: response?.statusCode ?? 0,
                        response: response,
                        result:result.value)

                    // React according to the situation
                    var reactions = Array<Bartleby.Reaction> ()
                    reactions.append(Bartleby.Reaction.Track(result: result.value, context: context)) // Tracking

                    if result.isFailure {
                        let m = NSLocalizedString("<?php echo$actionString ?>  of <?php echo$varName ?>",
                            comment: "<?php echo$actionString ?> of <?php echo$varName ?> failure description")
                        let failureReaction =  Bartleby.Reaction.DispatchAdaptiveMessage(
                            context: context,
                            title: NSLocalizedString("Unsuccessfull attempt result.isFailure is true",
                            comment: "Unsuccessfull attempt"),
                            body:"\(m) \n \(response)" ,
                            transmit:{ (selectedIndex) -> () in
                        })
                        reactions.append(failureReaction)
                        failure(context:context)
                    }else{
                        if let statusCode=response?.statusCode {
                            if 200...299 ~= statusCode {
                                // Acknowledge the trigger and log QA issue
                                if let dictionary = result.value as? Dictionary< String,AnyObject > {
                                    if let index=dictionary["triggerIndex"] as? NSNumber{
                                        if let document=Bartleby.sharedInstance.getDocumentByUID(spaceUID){
                                            document.acknowledgeOwnedTriggerIndex(index.integerValue)
                                        }
                                    }else{
                                        bprint("QA Trigger index is missing \(context)", file: #file, function: #function, line: #line, category:bprintCategoryFor(Trigger))
                                    }
                                }else{
                                    bprint("QA Trigger index dictionary is missing \(context)", file: #file, function: #function, line: #line, category:bprintCategoryFor(Trigger))
                                }
                                success(context:context)
                            }else{
                                // Bartlby does not currenlty discriminate status codes 100 & 101
                                // and treats any status code >= 300 the same way
                                // because we consider that failures differentiations could be done by the caller.

                                let m=NSLocalizedString("<?php echo$actionString ?> of <?php echo$varName ?>",
                                        comment: "<?php echo$actionString ?> of <?php echo$varName ?> failure description")
                                let failureReaction =  Bartleby.Reaction.DispatchAdaptiveMessage(
                                    context: context,
                                    title: NSLocalizedString("Unsuccessfull attempt",
                                    comment: "Unsuccessfull attempt"),
                                    body: "\(m) \n \(response)",
                                    transmit:{ (selectedIndex) -> () in
                                    })
                                reactions.append(failureReaction)
                                failure(context:context)
                            }
                        }
                     }
                    //Let's react according to the context.
                    Bartleby.sharedInstance.perform(reactions, forContext: context)
                }
            }
}
<?php /*<- END OF TEMPLATE */?>#BMS#->{"filename":"endpoint.php.template.php","checksum":1480290738,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/templates\/actions\/endpoint.php.template.php","size":18010}<-#BME#
<?php
require_once FLEXIONS_MODULES_DIR . '/Bartleby/templates/Requires.php';

/* @var $f Flexed */
/* @var $d ActionRepresentation*/

if (isset ( $f )) {
    $classNameWithoutPrefix=$h->ucFirstRemovePrefixFromString($d->class);
    $callDataClassName=$classNameWithoutPrefix.'CallData';
    $f->fileName = $classNameWithoutPrefix.'.php';
    $f->package = 'php/api/'.$h->majorVersionPathSegmentString().'_generated/EndPoints/';
}

// Exclusion

$exclusionName = str_replace($h->classPrefix, '', $d->class);
if (isset($excludeActionsWith)) {
    foreach ($excludeActionsWith as $exclusionString) {
        if (strpos($exclusionName, $exclusionString) !== false) {
            return NULL; // We return null
        }
    }
}




/* TEMPLATES STARTS HERE -> */?>
<?php echo '<?php'?>
<?php echo GenerativeHelperForPhp::defaultHeader($f,$d); ?>

namespace Bartleby\EndPoints;

require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoEndPoint.php';
require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoCallDataRawWrapper.php';
require_once BARTLEBY_PUBLIC_FOLDER . 'Configuration.php';

use Bartleby\Mongo\MongoEndPoint;
use Bartleby\Mongo\MongoCallDataRawWrapper;
use Bartleby\Core\JsonResponse;
use \MongoCollection;
use Bartleby\Configuration;

class  <?php echo $callDataClassName; ?> extends MongoCallDataRawWrapper {
<?php
$name=null;
$parameterIsAcollection=false;
while ($d->iterateOnParameters() === true) {
    $parameter = $d->getParameter();
    $name=$parameter->name;
    $typeOfProp=$parameter->type;
    $o=FlexionsTypes::OBJECT;
    $c=FlexionsTypes::COLLECTION;
    $parameterIsAcollection=($typeOfProp===$c);
    if (($typeOfProp===$o)||($typeOfProp===$c)) {
        $typeOfProp = $h->ucFirstRemovePrefixFromString($parameter->instanceOf);
        if($typeOfProp==$c){
            $typeOfProp=' array of '.$typeOfProp;
        }
    }

    if($parameter->type==FlexionsTypes::ENUM){
        $enumTypeName=ucfirst($name);
        $typeOfProp=$parameter->instanceOf.' '.$typeOfProp;
        echoIndentCR('// Enumeration of possibles values of '.$name, 1);
        foreach ($parameter->enumerations as $element) {
            if($parameter->instanceOf==FlexionsTypes::STRING){
                echoIndentCR('const ' .$enumTypeName.'_'.ucfirst($element).' = "'.$element.'";' ,1);
            }else{
                echoIndentCR('const ' .$enumTypeName.'_'.ucfirst($element).' = '.$element.';', 1);
            }
        }
    }
    if(isset($parameter->description) && strlen($parameter->description)>1){
        echoIndentCR('/* '.$parameter->description.' */',1);
    }

    echoIndentCR('const '.$name.'=\''.$name.'\';',1);
}
?>
}

 class  <?php echo $classNameWithoutPrefix; ?> extends MongoEndPoint {
<?php


// We use the last and unique parameter for CRUD endpoints (ids based)
// If there is no parameters it means it is a generic Get endpoint based on request.

$lastParameterName=isset($name)?$name:'NO_PARAMETERS';




$parameterIsNotAcollection=(!$parameterIsAcollection);

$successP = $d->getSuccessResponse();
if ($successP->type == FlexionsTypes::COLLECTION) {
    $resultIsNotACollection = false;
}else{
    $resultIsNotACollection=true;
}

$isGenericGETEndpoint=(strpos($d->class,'ByQuery')!==false);
$isGETByIdsEndpoint=(strpos($d->class,'ByIds')!==false);
if($isGenericGETEndpoint==false && $isGETByIdsEndpoint==false){
    $isGETByIdEndpoint=true;
}else{
    $isGETByIdEndpoint=false;
}
$isACreateEndpoint=(strpos($d->class,'Create')===0);

if($d->httpMethod=='POST') {
    if ($d->usesUrdMode()==true){

    // URD MODE

        echo('
    function call('.$callDataClassName.' $parameters) {
        $db=$this->getDB();
        /* @var \MongoCollection */
        $collection = $db->'.$d->collectionName.';@
        // Default write policy
        $options = array (
            "w" => 1,
            "j" => true,
            "upsert" => true
        );
        '.
            (
            ($parameterIsNotAcollection===true)?
                '$obj=$parameters->getValueForKey('.$callDataClassName.'::'.$lastParameterName.');
         if(!isset($obj) || count($parameters->getDictionary())==0){
          return new JsonResponse(\'Invalid void object\',406);
        }
        $q = array (\'_id\' =>$obj[\'_id\']);'
                :
                '$arrayOfObject=$parameters->getValueForKey('.$callDataClassName.'::'.$lastParameterName.');
        if(!isset($arrayOfObject) || (is_array($arrayOfObject) && count($arrayOfObject)<1) ){
            return new JsonResponse(\'Invalid void array\',406);
        }'
            )
            .'
        try {
            '.(($parameterIsNotAcollection===true)?
                '$r = $collection->update ($q, $obj,$options );
            if ($r[\'ok\']==1) {
                $s=$this->responseStringWithTriggerIndex($this->createTrigger($parameters),NULL);
                return new JsonResponse($s,200);
            } else {
                return new JsonResponse($r,412);
            }'
                :
                'foreach ($arrayOfObject as $obj){
                $q = array (\'_id\' => $obj[\'_id\']);
                $r = $collection->update( $q, $obj,$options);
                if ($r[\'ok\']==1) {
                    if (array_key_exists(\'updatedExisting\', $r)) {
                        $existed = $r[\'updatedExisting\'];
                        if ($existed == false) {
                            return new JsonResponse($q,404);
                        }
                    }
                }else{
                    return new JsonResponse($q,412);
                }
             }
             $s=$this->responseStringWithTriggerIndex($this->createTrigger($parameters),NULL);
            return new JsonResponse($s,200);'
            ).'

        } catch ( \Exception $e ) {
            return new JsonResponse( array (\'code\'=>$e->getCode(),
                                            \'message\'=>$e->getMessage(),
                                            \'file\'=>$e->getFile(),
                                            \'line\'=>$e->getLine(),
                                            \'trace\'=>$e->getTraceAsString()
                                            ),
                                            417
                                    );
        }
     }'
        );
    }else {

        // CRUD MODE

        echo('
    function call(' . $callDataClassName . ' $parameters) {
        $db=$this->getDB();
        /* @var \MongoCollection */
        $collection = $db->' . $d->collectionName . ';
        // Default write policy
        $options = array (
            "w" => 1,
            "j" => true
        );
        ' . (($parameterIsNotAcollection === true) ? '$obj=$parameters->getValueForKey(' . $callDataClassName . '::' . $lastParameterName . ');' : '$obj=$parameters->getValueForKey(' . $callDataClassName . '::' . $lastParameterName . ');') . '
        if(!isset($obj) || count($parameters->getDictionary())==0){
          return new JsonResponse(\'Void submission\',406);
        }
        try {
            ' . (($parameterIsNotAcollection === true) ? '$r = $collection->insert ( $obj,$options );' : '$r = $collection->batchInsert( $obj,$options );') . '
             if ($r[\'ok\']==1) {
                $s=$this->responseStringWithTriggerIndex($this->createTrigger($parameters),NULL);
                return new JsonResponse($s,201);
            } else {
                return new JsonResponse($r,412);
            }
        } catch ( \Exception $e ) {
            '.(($isACreateEndpoint===true) ? ' 
            // MONGO E11000 duplicate key error
            if ( $e->getCode() == 11000 && $this->_configuration->IGNORE_MULTIPLE_CREATION_IN_CRUD_MODE() == true){
                // We return A 200 not a 201
                $s=$this->responseStringWithTriggerIndex($this->createTrigger($parameters),\'This is not the first attempt.\');
                return new JsonResponse($s,200);
            }
            ':'').'
            return new JsonResponse( array (\'code\'=>$e->getCode(),
                                            \'message\'=>$e->getMessage(),
                                            \'file\'=>$e->getFile(),
                                            \'line\'=>$e->getLine(),
                                            \'trace\'=>$e->getTraceAsString()
                                            ),
                                            417
                                    );
        }
     }');
    }
}elseif ( $d->httpMethod=='GET' || $isGenericGETEndpoint===true ){


    echo('
     function call('.$callDataClassName.' $parameters) {
        $db=$this->getDB();
        /* @var \MongoCollection */
        $collection = $db->'.$d->collectionName.';'.cr());

    if ($isGETByIdEndpoint===true){
        //echo('// $isGETByIdEndpoint');
        echo(
'         $q = array (\'_id\' =>$parameters->getValueForKey('.$callDataClassName.'::'.$lastParameterName.'));
        if (isset($q)&& count($q)>0){
        }else{
            return new JsonResponse(\'Query is void\',412);
        }');
    }elseif ($isGETByIdsEndpoint===true){
        echo(
'        $ids=$parameters->getValueForKey('.$callDataClassName.'::ids);
        $f=$parameters->getValueForKey('.$callDataClassName.'::result_fields);
        if(isset ($ids) && is_array($ids) && count($ids)){
            $q = array( \'_id\'=>array( \'$in\' => $ids ));
        }else{
            return new JsonResponse(VOID_RESPONSE,204);
        }'
    );
    } elseif ($isGenericGETEndpoint===true){
        echo(
'      $q = $parameters->getValueForKey('.$callDataClassName.'::'.$lastParameterName.');
       if(!isset($q)){
           return new JsonResponse(VOID_RESPONSE,417);
       }
       $f=$parameters->getValueForKey('.$callDataClassName.'::result_fields);');
    }


    echo('
        try {'.
    (

        ($resultIsNotACollection===true)?

            // RESULT IS NOT A COLLECTION

            '
            $r = $collection->findOne($q);
            if (isset($r)) {
                return new JsonResponse($r,200);
            } else {
                return new JsonResponse(VOID_RESPONSE,404);
            }'

            :
            // RESULT IS A COLLECTION

            '
           $r=array();
           if(isset($f)){
                $cursor = $collection->find( $q , $f );
           }else{
                $cursor = $collection->find($q);
           }
           // Sort ?
           $s=$parameters->getCastedDictionaryForKey('.$callDataClassName.'::sort);
           if (isset($s) && count($s)>0){
              $cursor=$cursor->sort($s);
           }
           if ($cursor->count ( TRUE ) > 0) {
			foreach ( $cursor as $obj ) {
				$r[] = $obj;
			}
		   }

            if (count($r)>0 ) {
                return new JsonResponse($r,200);
            } else {
                return new JsonResponse(VOID_RESPONSE,404);
            }'
    ) .'
       } catch ( \Exception $e ) {
            return new JsonResponse( array (\'code\'=>$e->getCode(),
                                            \'message\'=>$e->getMessage(),
                                            \'file\'=>$e->getFile(),
                                            \'line\'=>$e->getLine(),
                                            \'trace\'=>$e->getTraceAsString()
                                            ),
                                            417
                                    );
        }
     }');



}elseif ($d->httpMethod=='PUT'){
    echo('
    function call('.$callDataClassName.' $parameters) {
        $db=$this->getDB();
        /* @var \MongoCollection */
        $collection = $db->'.$d->collectionName.';
        // Default write policy
        $options = array (
            "w" => 1,
            "j" => true
        );
        '.
        (
        ($parameterIsNotAcollection===true)?
        '$obj=$parameters->getValueForKey('.$callDataClassName.'::'.$lastParameterName.');
         if(!isset($obj) || count($parameters->getDictionary())==0){
          return new JsonResponse(\'Invalid void object\',406);
        }
        $q = array (\'_id\' =>$obj[\'_id\']);'
            :
            '$arrayOfObject=$parameters->getValueForKey('.$callDataClassName.'::'.$lastParameterName.');
        if(!isset($arrayOfObject) || (is_array($arrayOfObject) && count($arrayOfObject)<1) ){
            return new JsonResponse(\'Invalid void array\',406);
        }'
        )
        .'
        try {
            '.(($parameterIsNotAcollection===true)?
            '$r = $collection->update ($q, $obj,$options );
            if ($r[\'ok\']==1) {
              if(array_key_exists(\'updatedExisting\',$r)){
                    $existed=$r[\'updatedExisting\'];
                    if($existed==true){
                         $s=$this->responseStringWithTriggerIndex($this->createTrigger($parameters),NULL);
                        return new JsonResponse($s,200);
                    }else{
                        return new JsonResponse(VOID_RESPONSE,404);
                    }
                }
                 $s=$this->responseStringWithTriggerIndex($this->createTrigger($parameters),NULL);
                return new JsonResponse($s,200);
            } else {
                return new JsonResponse($r,412);
            }'
            :
            'foreach ($arrayOfObject as $obj){
                $q = array (\'_id\' => $obj[\'_id\']);
                $r = $collection->update( $q, $obj,$options);
                if ($r[\'ok\']==1) {
                    if (array_key_exists(\'updatedExisting\', $r)) {
                        $existed = $r[\'updatedExisting\'];
                        if ($existed == false) {
                            return new JsonResponse($q,404);
                        }
                    }
                }else{
                    return new JsonResponse($q,412);
                }
             }
              $s=$this->responseStringWithTriggerIndex($this->createTrigger($parameters),NULL);
            return new JsonResponse($s,200);'
        ).'

        } catch ( \Exception $e ) {
            return new JsonResponse( array (\'code\'=>$e->getCode(),
                                            \'message\'=>$e->getMessage(),
                                            \'file\'=>$e->getFile(),
                                            \'line\'=>$e->getLine(),
                                            \'trace\'=>$e->getTraceAsString()
                                            ),
                                            417
                                    );
        }
     }'
    );


}elseif ($d->httpMethod=='DELETE'){
    // DELETE
    echo('
    function call('.$callDataClassName.' $parameters) {
        $db=$this->getDB();
        /* @var \MongoCollection */
        $collection = $db->'.$d->collectionName.';
        // Default write policy
        $options = array (
            "w" => 1,
            "j" => true
        );
        '.
    (
        ($parameterIsNotAcollection===true)?

            '$q = array (\'_id\' =>$parameters->getValueForKey('.$callDataClassName.'::'.$lastParameterName.'));'

            :

            '$ids=$parameters->getValueForKey('.$callDataClassName.'::'.$lastParameterName.');
        if(isset ($ids) && count($ids)>0){
            $q = array( \'_id\' =>array( \'$in\' => $ids ));
        }else{
            $s=$this->responseStringWithTriggerIndex($this->createTrigger($parameters),NULL);
            return new JsonResponse(s,204);
        }'

    )
        .'
        try {
            $r = $collection->remove ( $q,$options );
             if ($r[\'ok\']==1) {
                 $hasBeenRemoved=($r[\'n\'] >= 1);
                 if( $hasBeenRemoved || $this->_configuration->IGNORE_MULTIPLE_DELETION_ATTEMPT() === true ){
                     $s=$this->responseStringWithTriggerIndex($this->createTrigger($parameters),$hasBeenRemoved?NULL:\'Already deleted\');
                     return new JsonResponse($s,200);
                 }else{
                     return new JsonResponse(VOID_RESPONSE,404);
                 }
            } else {
                return new JsonResponse($r,412);
            }
        } catch ( \Exception $e ) {
            return new JsonResponse( array (\'code\'=>$e->getCode(),
                                            \'message\'=>$e->getMessage(),
                                            \'file\'=>$e->getFile(),
                                            \'line\'=>$e->getLine(),
                                            \'trace\'=>$e->getTraceAsString()
                                            ),
                                            417
                                    );
        }
     }'
    );
}else{
    echo('// STRANGE METHOD '.$d->httpMethod);
}

if($d->httpMethod != 'GET' && $isGenericGETEndpoint===false){
    if ($d->httpMethod=='DELETE'){
        $action=$classNameWithoutPrefix;
    }else{
        $baseName=str_replace('Create','',$classNameWithoutPrefix);
        $baseName=str_replace('Update','',$baseName);
        $action='Read'.$baseName;
        if ($resultIsNotACollection){
            $action .= "byId";
        }else{
            $action .= "byIds";
        }
    }


    echoIndentCR( '
    

    /**
     * Creates and relay the action using a trigger
     * 
     * @param '.$callDataClassName.' $parameters
     * @return  int  -1 if an error has occured and the trigger index on success
     * @throws \Exception
     */
    function createTrigger('.$callDataClassName.' $parameters){
        $ref=$parameters->getValueForKey('.$callDataClassName.'::'.$lastParameterName.');
        $homologousAction="'.$action.'";
        $user=$parameters->getCurrentUser();
        $userUID=$user["_id"];
        $spaceUID=$this->getSpaceUID();
        return $this->relayTrigger($spaceUID,$userUID,"'.$d->collectionName.'","'.$classNameWithoutPrefix.'",$homologousAction,$ref);
    }',0);

}?>
 }

<?php echo '?>'?><?php /*<- END OF TEMPLATE */?>#BMS#->{"filename":"endpoint.swift.template.php","checksum":2752238537,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/templates\/actions\/endpoint.swift.template.php","size":12719}<-#BME#
<?php
require_once FLEXIONS_MODULES_DIR . '/Bartleby/templates/Requires.php';

/* @var $f Flexed */
/* @var $d ActionRepresentation */

if (isset ($f)) {
    $f->fileName = $d->class . '.swift';
    $f->package = 'xOS/operations/';
}

// Exclusion
$exclusionName = str_replace($h->classPrefix, '', $d->class);
if (isset($excludeActionsWith)) {
    foreach ($excludeActionsWith as $exclusionString) {
        if (strpos($exclusionName, $exclusionString) !== false) {
            return NULL; // We return null
        }
    }
}


$dataSpaceSyntagm='inDataSpace';

/* TEMPLATES STARTS HERE -> */?>
<?php echo GenerativeHelperForSwift::defaultHeader($f,$d); ?>

import Foundation
#if !USE_EMBEDDED_MODULES
<?php
if (isset($isIncludeInBartlebysCommons) && $isIncludeInBartlebysCommons==true){
    echoIndent(cr(),0);
    echoIndentCR("import Alamofire",0);
    echoIndentCR("import ObjectMapper",0);
}else{
    echoIndent(cr(),0);
    echoIndentCR("import Alamofire",0);
    echoIndentCR("import ObjectMapper",0);
    echoIndentCR("import BartlebyKit",0);
}
?>
#endif
<?php

//////////////////////////////
/// START OF PARAMETER MODEL
/////////////////////////////


/*@var array */
$GLOBAL_GENERATED_ACTIONS[]=$d->class.'Parameters';

// We generate the parameter class if there is a least one parameter.
if ($d->containsParametersOutOfPath()) {
    echoIndentCR('@objc('.$d->class .'Parameters'.') public class ' . $d->class . 'Parameters : ' . GenerativeHelperForSwift::getBaseClass($f, $d) . ' {', 0);

    // Universal type support
    echoIndentCR('');
    echoIndentCR('// Universal type support',1);
    echoIndentCR('override public class func typeName() -> String {',1);
        echoIndentCR(' return "'.$d->class . 'Parameters"',2);
    echoIndentCR('}',1);


    while ($d->iterateOnParameters() === true) {
        $parameter = $d->getParameter();
        $name = $parameter->name;

        if (!$d->parameterIsInPath($name)) {
            echoIndentCR('// ' . $parameter->description . cr(), 1);
            if ($d->firstParameter()) {
            }
            if ($parameter->type == FlexionsTypes::ENUM) {
                $enumTypeName = $d->name . ucfirst($name);
                echoIndentCR('public enum ' . $enumTypeName . ' : ' . ucfirst($parameter->instanceOf) . '{', 1);
                foreach ($parameter->enumerations as $element) {
                    if ($parameter->instanceOf == FlexionsTypes::STRING) {
                        echoIndentCR('case ' . ucfirst($element) . ' = "' . $element . '"', 2);
                    } else {
                        echoIndentCR('case ' . ucfirst($element) . ' = ' . $element . '', 2);
                    }
                }
                echoIndentCR('}', 1);
                echoIndentCR('public var ' . $name . ':' . $enumTypeName . '?', 1);
            } else if ($parameter->type == FlexionsTypes::COLLECTION) {
                echoIndentCR('public var ' . $name . ':[' . ucfirst($parameter->instanceOf) . ']?', 1);
            } else if ($parameter->type == FlexionsTypes::OBJECT) {
                echoIndentCR('public var ' . $name . ':' . ucfirst($parameter->instanceOf) . '?', 1);
            } else {
                $nativeType = FlexionsSwiftLang::nativeTypeFor($parameter->type);
                if (strpos($nativeType, FlexionsTypes::NOT_SUPPORTED) === false) {
                    echoIndentCR('public var ' . $name . ':' . $nativeType . '?', 1);
                } else {
                    echoIndentCR('public var ' . $name . ':Not_Supported = Not_Supported//' . ucfirst($parameter->type), 1);
                }
            }
        }
    }
    echo('
    required public init(){
        super.init()
    }
');
    $blockRepresentation = $d;
    // Mappable
    include FLEXIONS_MODULES_DIR . '/Bartleby/templates/blocks/Mappable.swift.block.php';
    // NSSecureCoding?
    if ($modelsShouldConformToNSCoding) {
        include FLEXIONS_MODULES_DIR . '/Bartleby/templates/blocks/NSSecureCoding.swift.block.php';
    }
    echoIndentCR("}",0);
}

?>



<?php
///////////////////////////////////
/// START OF END POINT EXEC CLASS
//////////////////////////////////
?>
@objc(<?php echo $d->class; ?>) public class <?php echo $d->class; ?> : <?php echo GenerativeHelperForSwift::getBaseClass($f,$d) ?>{

    // Universal type support
    override public class func typeName() -> String {
           return "<?php echo $d->class; ?>"
    }


    public static func execute(<?php
// We want to inject the path variable into the
$pathVariables=GenerativeHelper::variablesFromPath($d->path);
$pathVCounter=0;
$hasdID= in_array('spaceUID',$pathVariables);
if (!$hasdID){
    echoIndentCR('fromDataSpace spaceUID:String,',$pathVCounter>0);
}

if(count($pathVariables)>0){
    foreach ($pathVariables as $pathVariable ) {
        if ($pathVariable=='spaceUID'){
            $hasdID=true;
        }
        // Suspended
        echoIndentCR($pathVariable.':String,',6);
        $pathVCounter++;
    }
}


?>
<?php

$successP = $d->getSuccessResponse();
$successTypeString = '';
if ($successP->type == FlexionsTypes::COLLECTION) {
    $successTypeString = '['.$successP->instanceOf.']';
} else if ($successP->type == FlexionsTypes::OBJECT) {
    $successTypeString = ucfirst($successP->instanceOf);
} else if ($successP->type == FlexionsTypes::DICTIONARY) {
    $successTypeString = 'Dictionary<String, AnyObject>';
}else {
    $nativeType = FlexionsSwiftLang::nativeTypeFor($successP->type);
    if($nativeType==FlexionsTypes::NOT_SUPPORTED){
        $successTypeString='';
    }else{
        $successTypeString=$nativeType;
    }
}

$resultSuccessIsACollection=($successP->type == FlexionsTypes::COLLECTION);
if($resultSuccessIsACollection){
    $successParameterName= Pluralization::pluralize(lcfirst($h->ucFirstRemovePrefixFromString($successP->instanceOf)));
}else{
    if($successP->isGeneratedType==true){
        $successParameterName=lcfirst($h->ucFirstRemovePrefixFromString($successTypeString));
    }else{
        $successParameterName='result';
    }
}


$resultSuccessTypeString=$successTypeString!=''?$successParameterName.':'.$successTypeString:'';
if ($d->containsParametersOutOfPath()) {
    echoIndentCR('parameters:' . $d->class . 'Parameters,' , 6);
    echoIndentCR('sucessHandler success:(' . $resultSuccessTypeString . ')->(),', 6);
} else {
    echoIndentCR('sucessHandler success:(' . $resultSuccessTypeString . ')->(),', 6);
}

// We want to inject the path variable
$pathVariables=GenerativeHelper::variablesFromPath($d->path);
$path= (strpos($d->path,'/')!==false) ? substr($d->path,1):$d->path;
if(count($pathVariables)>0){
    foreach ($pathVariables as $pathVariable ) {
        $path=str_ireplace('{'.$pathVariable.'}','\('.$pathVariable.')',$path);
    }
}
echoIndentCR('failureHandler failure:(context:JHTTPResponse)->()){', 6);
echoIndentCR('');
    $parametersString='';
    if ($d->containsParametersOutOfPath()) {
        $parametersString='[';
        while ($d->iterateOnParameters() === true) {
            $parameter = $d->getParameter();
            $name = $parameter->name;
            $parametersString.='"'.$name.'":parameters.'.$name;
            if($parameter->type==FlexionsTypes::ENUM) {
                $parametersString.='?.rawValue';
            }
            if (!$d->lastParameter()){
                $parametersString.=',';
            }
        }
        $parametersString.=']';
    }
// We need to parse the responses.

$status2XXHasBeenDefined=false;
$successMicroBlock=NULL;
ksort($d->responses); // We sort the key by codes
foreach ($d->responses as $rank=>$responsePropertyRepresentation ) {
    /* @var  $responsePropertyRepresentation PropertyRepresentation */
    $code = $responsePropertyRepresentation->name;
    if (strpos($code, '2') === 0) {
        // THERE SHOULD HAVE ONE 2XX HTTP CODE per endpoint
        // THE OTHER WILL CURRENTLY BE IGNORED
        // DEFINE AT LEAST ONE IF YOU WANT TO DETERMINE THE RESPONSE MODEL
        // ELSE IT WILL BE INFERRED
        // YOU CAN CHECK $successTypeString TO UNDERSTAND THE INFERENCE MECANISM
        if ($status2XXHasBeenDefined == false) {
            $status2XXHasBeenDefined = true;

            if($responsePropertyRepresentation->isGeneratedType) {
                // We wanna cast the result if there is one specified
                $successMicroBlock = stringIndent(
''.(($resultSuccessIsACollection)?
    'if let instance = Mapper <' . $successP->instanceOf . '>().mapArray(result.value){
    '
    :'if let instance = Mapper <' . $successTypeString . '>().map(result.value){
    ')
.'
    success(' . $successParameterName . ': instance)
  }else{
   let failureReaction =  Bartleby.Reaction.DispatchAdaptiveMessage(
        context: context,
        title: NSLocalizedString("Deserialization issue",
            comment: "Deserialization issue"),
        body:"(result.value)",
        transmit:{ (selectedIndex) -> () in
    })
   reactions.append(failureReaction)
   failure(context:context)
}',5);
            }
        }
    }
}

if( !isset($successMicroBlock)){

    if($successTypeString==''){
        // there is no return type
        $successMicroBlock =stringIndentCR('success()',4);
    }else{
        $successMicroBlock =stringIndent(
            '
if let r=result.value as? ' . $successTypeString . '{

    success(' . $successParameterName . ':r)
 }else{
    let failureReaction =  Bartleby.Reaction.DispatchAdaptiveMessage(
        context: context,
        title: NSLocalizedString("Deserialization issue",
            comment: "Deserialization issue"),
        body:"(result.value)",
        transmit:{ (selectedIndex) -> () in
    })
   reactions.append(failureReaction)
   failure(context:context)
}',2);
    }


}

$parameterEncodingString='JSON';
if($d->httpMethod=='GET'){
    $parameterEncodingString='URL';
}
    echoIndentCR(
'
    let baseURL=Bartleby.sharedInstance.getCollaborationURLForSpaceUID(spaceUID)
    let pathURL=baseURL.URLByAppendingPathComponent("'.$path.'")
    '.(($d->containsParametersOutOfPath()?'let dictionary:Dictionary<String, AnyObject>?=Mapper().toJSON(parameters)':'let dictionary:Dictionary<String, AnyObject>=[:]')).'
    let urlRequest=HTTPManager.mutableRequestWithToken(inDataSpace:spaceUID,withActionName:"'.$d->class.'" ,forMethod:"'.$d->httpMethod.'", and: pathURL)
    let r:Request=request(ParameterEncoding.'.$parameterEncodingString.'.encode(urlRequest, parameters: dictionary).0)
    r.'.(($successTypeString=='')?'responseJSON':'responseJSON').'{ response in

	    let request=response.request
        let result=response.result
        let response=response.response


        // Bartleby consignation

        let context = JHTTPResponse( code: '.crc32($d->class).',
            caller: "'.$d->class.'.execute",
            relatedURL:request?.URL,
            httpStatusCode: response?.statusCode ?? 0,
            response: response,
            result:result.value)

        // React according to the situation
        var reactions = Array<Bartleby.Reaction> ()
        reactions.append(Bartleby.Reaction.Track(result: result.value, context: context)) // Tracking

        if result.isFailure {
           let failureReaction =  Bartleby.Reaction.DispatchAdaptiveMessage(
                context: context,
                title: NSLocalizedString("Unsuccessfull attempt",comment: "Unsuccessfull attempt"),
                body:NSLocalizedString("Explicit Failure",comment: "Explicit Failure"),
                transmit:{ (selectedIndex) -> () in
            })
            reactions.append(failureReaction)
            failure(context:context)

        }else{
            if let statusCode=response?.statusCode {
                if 200...299 ~= statusCode {
'.$successMicroBlock.'
            }else{
                // Bartlby does not currenlty discriminate status codes 100 & 101
                // and treats any status code >= 300 the same way
                // because we consider that failures differentiations could be done by the caller.
                let failureReaction =  Bartleby.Reaction.DispatchAdaptiveMessage(
                    context: context,
                    title: NSLocalizedString("Unsuccessfull attempt",comment: "Unsuccessfull attempt"),
                    body:NSLocalizedString("Implicit Failure",comment: "Implicit Failure"),
                    transmit:{ (selectedIndex) -> () in
                })
               reactions.append(failureReaction)
               failure(context:context)
            }
        }
     }

     //Let s react according to the context.
     Bartleby.sharedInstance.perform(reactions, forContext: context)

  }
}
',4);

echoIndentCR('}',0)
?><?php /*<- END OF TEMPLATE */ ?>#BMS#->{"filename":"Mappable.swift.block.php","checksum":680691011,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/templates\/blocks\/Mappable.swift.block.php","size":4036}<-#BME#
<?php

/*
 *
 * This is a Block template (not a full template)
 * That can be used to generate a NSCoding block in an entity.
 * $blockRepresentation must be set.
 *
 *  usage sample :
 *
 *      if( $modelsShouldConformToNSCoding ) {
 *          $blockRepresentation=$d // ActionRepresentation || EntityRepresentation
 *          include  FLEXIONS_MODULES_DIR.'/Bartleby/templates/blocks/Mappable.swift.block.php';
 *      }
 *
 */
require_once FLEXIONS_MODULES_DIR . '/Bartleby/templates/Requires.php';
require_once FLEXIONS_MODULES_DIR . 'Languages/FlexionsSwiftLang.php';


/* @var $f Flexed */
/* @var $blockRepresentation ActionRepresentation || EntityRepresentation */

/* @var $blockEndContent string */

if (!isset($blockRepresentation)){
    return NULL;
}

?>


    // MARK: Mappable

    required public init?(_ map: Map) {
        super.init(map)
    }

    override public func mapping(map: Map) {
        super.mapping(map)
        self.lockAutoCommitObserver()
<?php

// We use includes so we need to declare the functions once
if (!defined('MAPPABLE_BLOCK')){
    define('MAPPABLE_BLOCK',true);
    /* @var $property PropertyRepresentation */
    function mappable_block_property_Loop($property){
        $name = $property->name;
        if ($property->isSerializable==false){
            return;
        }
        if (!isset($property->customSerializationMapping)){
            // STANDARD MAPPING
            if ($property->type == FlexionsTypes::DATETIME){
                echoIndentCR('self.'.$name . ' <- ( map["' . $name . '"], ISO8601DateTransform() )', 2);
            } else if ($property->type == FlexionsTypes::URL) {
                echoIndentCR('self.'.$name . ' <- ( map["' . $name . '"], URLTransform() )', 2);
            }else if($property->type == FlexionsTypes::STRING ){
                if ($property->isCryptable){
                    echoIndentCR('self.'.$name . ' <- ( map["' . $name . '"], CryptedStringTransform() )', 2);
                }else{
                    echoIndentCR('self.'.$name . ' <- ( map["' . $name . '"] )', 2);
                }
            }else if($property->type == FlexionsTypes::DATA) {
                if ($property->isCryptable) {
                    echoIndentCR('self.' . $name . ' <- ( map["' . $name . '"], CryptedDataTransform() )', 2);
                } else {
                    echoIndentCR('self.' . $name . ' <- ( map["' . $name . '"], Base64DataTransform() )', 2);
                }
            }else if ($property->isGeneratedType){
                if ($property->isCryptable){
                    echoIndentCR('self.' . $name . ' <- ( map["' . $name . '"], CryptedSerializableTransform() )', 2);
                }else {
                    echoIndentCR('self.' . $name . ' <- ( map["' . $name . '"] )', 2);
                }
            }else{
                if ($property->isCryptable){
                    echoIndentCR('self.' . $name . ' <- ( map["' . $name . '"] )// @todo marked generatively as Cryptable Should be crypted!', 2);
                }else {
                    echoIndentCR('self.' . $name . ' <- ( map["' . $name . '"] )', 2);
                }

            }

        }else{
            // RECURSIVE CALL FOR CUSTOMSERIALIZATION
            foreach ($property->customSerializationMapping as $property) {
                mappable_block_property_Loop($property);
            }
        }
    }
}

// Mappable support for entities and parameters classes.
// $d may be ActionRepresentation or EntityRepresentation
$isEntity=($blockRepresentation instanceof EntityRepresentation);
while ($isEntity?$blockRepresentation->iterateOnProperties():$blockRepresentation->iterateOnParameters() === true) {
    /* @var $property PropertyRepresentation */
    $property = $isEntity?$blockRepresentation->getProperty():$blockRepresentation->getParameter();
    mappable_block_property_Loop($property);
}

if (isset($blockEndContent)){
    echoIndentCR($blockEndContent, 2);
}
?>
        self.unlockAutoCommitObserver()
    }

<?php // End of Block ?>#BMS#->{"filename":"NSSecureCoding.swift.block.php","checksum":3791121364,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/templates\/blocks\/NSSecureCoding.swift.block.php","size":1439}<-#BME#
<?php

/*
 *
 * This is a Block template (not a full template)
 * That can be used to generate a NSCoding block in an entity.
 * $blockRepresentation must be set.
 *
 *  usage sample :
 *
 *      if( $modelsShouldConformToNSCoding ) {
 *          $blockRepresentation=$d // ActionRepresentation || EntityRepresentation
 *          include  FLEXIONS_MODULES_DIR.'/Bartleby/templates/blocks/NSSecureCoding.swift.block.php';
 *      }
 *
 */

require_once FLEXIONS_MODULES_DIR . '/Bartleby/templates/Requires.php';
require_once FLEXIONS_MODULES_DIR . 'Languages/FlexionsSwiftLang.php';


/* @var $f Flexed */
/* @var $blockRepresentation ActionRepresentation || EntityRepresentation */
/* @var $blockEndContent string */

if (!isset($blockRepresentation)){
    return NULL;
}

?>

    // MARK: NSSecureCoding

    required public init?(coder decoder: NSCoder) {
        super.init(coder: decoder)
        self.lockAutoCommitObserver()
<?php GenerativeHelperForSwift::echoBodyOfInitWithCoder($blockRepresentation, 2);
if (isset($blockEndContent)){
    echoIndentCR($blockEndContent, 2);
}
?>
        self.unlockAutoCommitObserver()
    }

    override public func encodeWithCoder(coder: NSCoder) {
        super.encodeWithCoder(coder)
<?php GenerativeHelperForSwift::echoBodyOfEncodeWithCoder($blockRepresentation, 2);?>
    }


    override public class func supportsSecureCoding() -> Bool{
        return true
    }

<?php // End of Block ?>#BMS#->{"filename":"model.php.template.php","checksum":701180752,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/templates\/entities\/model.php.template.php","size":4674}<-#BME#
<?php

require_once FLEXIONS_MODULES_DIR . '/Bartleby/templates/Requires.php';


/* @var $f Flexed */
/* @var $d EntityRepresentation */

if (isset ( $f )) {
    $classNameWithoutPrefix=ucfirst(substr($d->name,strlen($h->classPrefix)));
    $f->fileName = $classNameWithoutPrefix.'.php';
    $f->package = 'php/api/'.$h->majorVersionPathSegmentString().'_generated/Models/';
}


// Exclusion

$exclusion = array();
$exclusionName = str_replace($h->classPrefix, '', $d->name);

if (isset($excludeEntitiesWith)) {
    $exclusion = $excludeEntitiesWith;
}
foreach ($exclusion as $exclusionString) {
    if (strpos($exclusionName, $exclusionString) !== false) {
        return NULL; // We return null
    }
}



/* TEMPLATES STARTS HERE -> */?><?php echo '<?php'?>
<?php echo GenerativeHelperForPhp::defaultHeader($f,$d); ?>
namespace Bartleby\Models;

require_once BARTLEBY_ROOT_FOLDER.'Core/Model.php';
require_once BARTLEBY_PUBLIC_FOLDER . 'Configuration.php';

use Bartleby\Core\Model;
<?php
$hasBeenImported=array();
while ($d->iterateOnProperties()){
    $property=$d->getProperty();
    if($property->isGeneratedType){
        $className=$property->instanceOf;
        $className=$h->ucFirstRemovePrefixFromString($className);

        /*
            Bartleby swift uses Alias<T> to resolve typed external reference
         */

        $genericMarker='\<';
        $genericRes=preg_replace('/<(.*)>/','$0',$className);
        if (preg_match('/^(.*)'.$genericMarker.'/', $className, $matches)) {
            $className = $matches[1];
        }
        $notGenerated=array('Alias');

        if (! in_array($className,$hasBeenImported)) {
            if (in_array($className,$notGenerated)){
                echoIndentCR('require_once BARTLEBY_ROOT_FOLDER.\'/Commons/Models/'.$className.'.php\';',0);
            }else{
                echoIndentCR('require_once __DIR__.\'/'.$className.'.php\';',0);
            }
            echoIndentCR('use Bartleby\Models\\'.$className.';//'.$genericRes,0);
            $hasBeenImported[]=$className;
        }

    }
} ?>

class <?php echo $classNameWithoutPrefix?> extends Model{

<?php
/* @var $property PropertyRepresentation */

// You can distinguish the first, and last property
while ( $d ->iterateOnProperties() === true ) {
    $property = $d->getProperty();
    $name=$property->name;
    $typeOfProp=$property->type;
    $o=FlexionsTypes::OBJECT;
    $c=FlexionsTypes::COLLECTION;
    if (($typeOfProp===$o)||($typeOfProp===$c)) {
        $typeOfProp = $h->ucFirstRemovePrefixFromString($property->instanceOf);
        if($typeOfProp==$c){
            $typeOfProp=' array of '.$typeOfProp;
        }
    }
    if($property->type==FlexionsTypes::ENUM){
        $enumTypeName=ucfirst($name);
        $typeOfProp=$property->instanceOf.' '.$typeOfProp;
        echoIndentCR('// Enumeration of possibles values of '.$name, 1);
        $enumCounter=0;
        foreach ($property->enumerations as $element) {
            if($property->instanceOf==FlexionsTypes::STRING){
                echoIndentCR('const ' .$enumTypeName.'_'.ucfirst($element).' = "'.$element.'";' ,1);
            }else if($property->instanceOf==FlexionsTypes::INTEGER){
                echoIndentCR('const ' .$enumTypeName.'_'.ucfirst($element).' = '.$enumCounter.';', 1);
                $enumCounter++;
            }else{
                echoIndentCR('const ' .$enumTypeName.'_'.ucfirst($element).' = '.$element.';', 1);
            }
        }
    }
    echoIndentCR('/* @var '.$typeOfProp.' '.$property->description.' */',1);
    if($d->firstProperty()){
        echoIndentCR('public $'.$name.';',1);
    }else if ($d->lastProperty()){
        echoIndent('public $'.$name.';',1);
    }else{
        echoIndentCR('public $'.$name.';',1);
    };
    echoIndentCR('',0);

    if($d->lastProperty()){
        echoIndent(cr(),0);
    }
}
?>


    function classMapping(array $mapping=array()){
<?php while ($d->iterateOnProperties()){
    $property=$d->getProperty();
    $typeOfProp=$property->type;
    $o=FlexionsTypes::OBJECT;
    $c=FlexionsTypes::COLLECTION;
    if (($typeOfProp===$o)||($typeOfProp===$c)) {
        $type = $property->instanceOf;
        if ($property->isGeneratedType) {
            $type = $h->ucFirstRemovePrefixFromString($type);
        }
        if ($property->type == FlexionsTypes::COLLECTION) {
            echoIndentCR('$mapping[\'' . $property->name . '\']=array(\'' . $type . '\');', 2);
        } else {
            echoIndentCR('$mapping[\'' . $property->name . '\']=\'' . $type . '\';', 2);
        }
    }


}?>
        return parent::classMapping($mapping);
    }

}

<?php echo '?>'?><?php /*<- END OF TEMPLATE */?>#BMS#->{"filename":"model.swift.template.php","checksum":138812335,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/templates\/entities\/model.swift.template.php","size":5602}<-#BME#
<?php

require_once FLEXIONS_MODULES_DIR . '/Bartleby/templates/Requires.php';
require_once FLEXIONS_MODULES_DIR . 'Languages/FlexionsSwiftLang.php';

/* @var $f Flexed */
/* @var $d EntityRepresentation */

if (isset ( $f )) {
    // We determine the file name.
    $f->fileName = GenerativeHelperForSwift::getCurrentClassNameWithPrefix($d).'.swift';
    // And its package.
    $f->package = 'xOS/models/';
}

// Exclusion

$exclusion = array();
$exclusionName = str_replace($h->classPrefix, '', $d->name);

if (isset($excludeEntitiesWith)) {
    $exclusion = $excludeEntitiesWith;
}
foreach ($exclusion as $exclusionString) {
    if (strpos($exclusionName, $exclusionString) !== false) {
        return NULL; // We return null
    }
}


if (!defined('_propertyValueString_DEFINED')){
    define("_propertyValueString_DEFINED",true);
    function _propertyValueString(PropertyRepresentation $property){
        if ($property->isObservable===false){
            ////////////////////////////
            // Property isn't observable
            ////////////////////////////
            if(isset($property->default)){
                if($property->type==FlexionsTypes::STRING){
                    return " = \"$property->default\"";
                }else{
                    return " = $property->default";
                }
            }
            return "?";
        }else{
            //////////////////////////
            // Property is observable
            //////////////////////////
        if(isset($property->default)){
            if($property->type==FlexionsTypes::STRING){
                return " = \"$property->default\"{\n 
    willSet { 
       if $property->name != newValue {
            self.provisionChanges() 
       } 
    }
}";
            }else{
                return " = $property->default  {\n 
    willSet { 
       if $property->name != newValue {
            self.provisionChanges() 
       } 
    }
}";
}

        }
        return "? {\n 
    willSet { 
       if $property->name != newValue {
            self.provisionChanges() 
       } 
    }
}";
        }
    }
}


/* TEMPLATES STARTS HERE -> */?>
<?php echo GenerativeHelperForSwift::defaultHeader($f,$d); ?>

import Foundation
#if !USE_EMBEDDED_MODULES
<?php
if (isset($isIncludeInBartlebysCommons) && $isIncludeInBartlebysCommons==true){
    echoIndentCR("import Alamofire",0);
    echoIndentCR("import ObjectMapper",0);
}else{
    echoIndentCR("import Alamofire",0);
    echoIndentCR("import ObjectMapper",0);
    echoIndentCR("import BartlebyKit",0);
}
?>
#endif

// MARK: <?php echo $d->description?>

@objc(<?php echo ucfirst($d->name)?>) public class <?php echo ucfirst($d->name)?> : <?php echo GenerativeHelperForSwift::getBaseClass($f,$d); ?>{

    // Universal type support
    override public class func typeName() -> String {
        return "<?php echo ucfirst($d->name)?>"
    }

<?php

while ( $d ->iterateOnProperties() === true ) {
    $property = $d->getProperty();
    $name = $property->name;
    $dynanicString=($property->isDynamic ? 'dynamic ':'');
    if($property->description!=''){
        echoIndentCR('//' .$property->description. cr(), 1);
    }
    if($property->type==FlexionsTypes::ENUM){
        $enumTypeName=ucfirst($name);
        echoIndentCR($dynanicString.'public enum ' .$enumTypeName.':'.ucfirst(FlexionsSwiftLang::nativeTypeFor($property->instanceOf)). '{', 1);
        foreach ($property->enumerations as $element) {
            if($property->instanceOf==FlexionsTypes::STRING){
                echoIndentCR('case ' .ucfirst($element).' = "'.$element.'"', 2);
            }elseif ($property->instanceOf==FlexionsTypes::INTEGER){
                echoIndentCR('case ' .ucfirst($element), 2);
            } else{
                echoIndentCR('case ' .ucfirst($element).' = '.$element, 2);
            }
        }
        echoIndentCR('}', 1);
        echoIndentCR($dynanicString.'public var ' . $name .':'.$enumTypeName._propertyValueString($property), 1);
    }else if($property->type==FlexionsTypes::COLLECTION){
        $instanceOf=FlexionsSwiftLang::nativeTypeFor($property->instanceOf);
        if ($instanceOf==FlexionsTypes::NOT_SUPPORTED){
            $instanceOf=$property->instanceOf;
        }
        echoIndentCR($dynanicString.'public var ' . $name .':['.ucfirst($instanceOf). ']'._propertyValueString($property), 1);
    }else if($property->type==FlexionsTypes::OBJECT){
        echoIndentCR($dynanicString.'public var ' . $name .':'.ucfirst($property->instanceOf)._propertyValueString($property), 1);
    }else{
        $nativeType=FlexionsSwiftLang::nativeTypeFor($property->type);
        if(strpos($nativeType,FlexionsTypes::NOT_SUPPORTED)===false){
            echoIndentCR($dynanicString.'public var ' . $name .':'.$nativeType._propertyValueString($property), 1);
        }else{
            echoIndentCR($dynanicString.'public var ' . $name .':Not_Supported = Not_Supported()//'. ucfirst($property->type), 1);
        }
    }
}

$blockRepresentation=$d;
include  FLEXIONS_MODULES_DIR.'Bartleby/templates/blocks/Mappable.swift.block.php';
if( $modelsShouldConformToNSCoding ) {
    include  FLEXIONS_MODULES_DIR.'Bartleby/templates/blocks/NSSecureCoding.swift.block.php';
}

?>

    required public init() {
        super.init()
    }

    // MARK: Identifiable

    override public class var collectionName:String{
        return "<?php echo lcfirst(Pluralization::pluralize($d->name)) ?>"
    }

    override public var d_collectionName:String{
        return <?php echo ucfirst($d->name)?>.collectionName
    }


}

<?php /*<- END OF TEMPLATE */?>#BMS#->{"filename":"modelCollectionController.swift.template.php","checksum":4089352686,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/templates\/entities\/modelCollectionController.swift.template.php","size":14072}<-#BME#
<?php

require_once FLEXIONS_MODULES_DIR . '/Bartleby/templates/Requires.php';
require_once FLEXIONS_MODULES_DIR . 'Languages/FlexionsSwiftLang.php';

/* @var $f Flexed */
/* @var $d EntityRepresentation*/
/* @var $h Hypotypose */


if (isset( $f,$d,$h)) {


    // We use explicit name (!)
    // And reserve $f , $d , $h possibly for blocks

    /* @var $flexed Flexed*/
    /* @var $entityRepresentation EntityRepresentation*/
    /* @var $hypotypose Hypotypose*/

    $flexed=$f;
    $entityRepresentation=$d;
    $hypotypose=$h;

    // We determine the file name.
    $f->fileName = ucfirst(Pluralization::pluralize($d->name)) . 'CollectionController.swift';
    // And its package.
    $f->package = 'xOS/collectionControllers/';
    
}else{
    return NULL;
}




// Exclusion -

//Collection controllers are related to actions.

$exclusion = array();
$exclusionName = str_replace($h->classPrefix, '', $entityRepresentation->name);

$includeCollectionController = false;
if (isset($xOSIncludeCollectionControllerForEntityNamed)) {
    foreach ($xOSIncludeCollectionControllerForEntityNamed as $inclusion) {
        if (strpos($exclusionName, $inclusion) !== false) {
            $includeCollectionController = true;
        }

    }
    if (!$includeCollectionController) {
        if (isset($excludeActionsWith)) {
            $exclusion = $excludeActionsWith;
        }
        foreach ($exclusion as $exclusionString) {
            if (strpos($exclusionName, $exclusionString) !== false) {
                return NULL; // We return null
            }
        }
    }
}


$collectionControllerClass=ucfirst(Pluralization::pluralize($entityRepresentation->name)).'CollectionController';

/* TEMPLATES STARTS HERE -> */?>
<?php echo GenerativeHelperForSwift::defaultHeader($f,$entityRepresentation); ?>

import Foundation
#if os(OSX)
import AppKit
#endif
#if !USE_EMBEDDED_MODULES
<?php
if (isset($isIncludeInBartlebysCommons) && $isIncludeInBartlebysCommons==true){
    echoIndent(cr(),0);
    echoIndentCR("import Alamofire",0);
    echoIndentCR("import ObjectMapper",0);
}else{
    echoIndentCR(cr(),0);
    echoIndentCR("import Alamofire",0);
    echoIndentCR("import ObjectMapper",0);
    echoIndentCR("import BartlebyKit",0);
}
?>
#endif

// MARK: A  collection controller of "<?php echo lcfirst(Pluralization::pluralize($entityRepresentation->name)); ?>"

// This controller implements data automation features.

@objc(<?php echo $collectionControllerClass ?>) public class <?php echo $collectionControllerClass ?> : <?php echo GenerativeHelperForSwift::getBaseClass($f,$entityRepresentation); ?>,IterableCollectibleCollection{

    // Universal type support
    override public class func typeName() -> String {
        return "<?php echo $collectionControllerClass ?>"
    }

    weak public var undoManager:NSUndoManager?

    public var spaceUID:String=Default.NO_UID

    #if os(OSX) && !USE_EMBEDDED_MODULES

    public weak var arrayController:NSArrayController?

    #endif

    weak public var tableView: BXTableView?

    public func generate() -> AnyGenerator<<?php echo ucfirst($entityRepresentation->name)?>> {
        var nextIndex = -1
        let limit=self.items.count-1
        return AnyGenerator {
            nextIndex += 1
            if (nextIndex > limit) {
                return nil
            }
            return self.items[nextIndex]
        }
    }

    /**
    An iterator that permit dynamic approaches.
    The Registry ignore the real types.
    Currently we do not use SequenceType, Subscript, ...

    - parameter on: the closure
    */
    public func superIterate(@noescape on:(element: Collectible)->()){
        for item in self.items {
            on(element:item)
        }
    }

<?php if ($entityRepresentation->isDistantPersistencyOfCollectionAllowed()) {

   if ($entityRepresentation->groupedOnCommit()){
       echo('
    /**
    Commit all the changes in one bunch
    Marking commit on each item will toggle hasChanged flag.
    */
    public func commitChanges() -> [String] {
        var UIDS=[String]()
        let changedItems=self.items.filter { $0.toBeCommitted == true }
        bprint("\(changedItems.count) \( changedItems.count>1 ? "'.lcfirst(Pluralization::pluralize($entityRepresentation->name)).'" : "'.lcfirst($entityRepresentation->name).'" )  has changed in '.$collectionControllerClass.'",file:#file,function:#function,line:#line,category: Default.BPRINT_CATEGORY)
        if  changedItems.count > 0 {
            UIDS.append(changed.UID)
            Update' . ucfirst(Pluralization::pluralize($entityRepresentation->name)) . '.commit(changedItems, inDataSpace:self.spaceUID)
        }
        return UIDS
    }
');
   }else{
       echo('
    /**
    Commit all the changes in one bunch
    Marking commit on each item will toggle hasChanged flag.
    */
    public func commitChanges() -> [String] {
        var UIDS=[String]()
        let changedItems=self.items.filter { $0.toBeCommitted == true }
        bprint("\(changedItems.count) \( changedItems.count>1 ? "'.lcfirst(Pluralization::pluralize($entityRepresentation->name)).'" : "'.lcfirst($entityRepresentation->name).'" )  has changed in '.$collectionControllerClass.'",file:#file,function:#function,line:#line,category: Default.BPRINT_CATEGORY)
        for changed in changedItems{
            UIDS.append(changed.UID)
            Update' . ucfirst($entityRepresentation->name) . '.commit(changed, inDataSpace:self.spaceUID)
        }
        return UIDS
    }
');
   }




}else{
echo('

    /**
     Commit is ignored because
     Distant persistency is not allowed for '.$entityRepresentation->name.'
    */
    public func commitChanges() ->[String] { 
        return [String]()
    }
    
');
}
?>

    required public init() {
        super.init()
    }


    dynamic public var items:[<?php echo ucfirst($entityRepresentation->name)?>]=[<?php echo ucfirst($entityRepresentation->name)?>]()

    public func getCollectibleItems()->[Collectible]{
        return items
    }

    // MARK: Identifiable

    override public class var collectionName:String{
        return <?php echo ucfirst($entityRepresentation->name)?>.collectionName
    }

    override public var d_collectionName:String{
        return <?php echo ucfirst($entityRepresentation->name)?>.collectionName
    }

<?php


    // We just want to inject an item property Items
    $virtualEntity=new EntityRepresentation();
    $itemsProperty=new PropertyRepresentation();
    $itemsProperty->name="items";
    $itemsProperty->type=FlexionsTypes::COLLECTION;
    $itemsProperty->instanceOf=ucfirst($entityRepresentation->name);
    $itemsProperty->required=true;
    $itemsProperty->isDynamic=true;
    $itemsProperty->default=NULL;
    $itemsProperty->isGeneratedType=true;

    $virtualEntity->properties[]=$itemsProperty;
    $blockRepresentation=$virtualEntity;

$blockEndContent="";// This is injected in the block
include  FLEXIONS_MODULES_DIR.'Bartleby/templates/blocks/Mappable.swift.block.php';
if( $modelsShouldConformToNSCoding ) {
    include  FLEXIONS_MODULES_DIR.'Bartleby/templates/blocks/NSSecureCoding.swift.block.php';
}?>



    // MARK: Upsert

    public func upsert(item: Collectible, commit:Bool){

        if let idx=items.indexOf({return $0.UID == item.UID}){
            // it is an update
            // we must patch it
            let currentInstance=items[idx]
            if commit==false{
                // When upserting from a trigger
                // We do not want to produce Larsen effect on data.
                // So we lock the auto commit observer before applying the patch
                // And we unlock the autoCommit Observer after the patch.
                currentInstance.lockAutoCommitObserver()
            }

            let dictionary=item.dictionaryRepresentation()
            currentInstance.patchFrom(dictionary)
            if commit==false{
                currentInstance.unlockAutoCommitObserver()
            }
        }else{
            // It is a creation
            self.add(item, commit:commit)
        }
    }

    // MARK: Add

    public func add(item:Collectible, commit:Bool){
        #if os(OSX) && !USE_EMBEDDED_MODULES
        if let arrayController = self.arrayController{
            self.insertObject(item, inItemsAtIndex: arrayController.arrangedObjects.count, commit:commit)
        }else{
            self.insertObject(item, inItemsAtIndex: items.count, commit:commit)
        }
        #else
        self.insertObject(item, inItemsAtIndex: items.count, commit:commit)
        #endif
    }

    // MARK: Insert

    public func insertObject(item: Collectible, inItemsAtIndex index: Int, commit:Bool) {
        if let item=item as? <?php echo ucfirst($entityRepresentation->name)?>{

<?php if ($entityRepresentation->isUndoable()) {
    echo('
            if let undoManager = self.undoManager{
                // Has an edit occurred already in this event?
                if undoManager.groupingLevel > 0 {
                    // Close the last group
                    undoManager.endUndoGrouping()
                    // Open a new group
                    undoManager.beginUndoGrouping()
                }
            }

            // Add the inverse of this invocation to the undo stack
            if let undoManager: NSUndoManager = undoManager {
                undoManager.prepareWithInvocationTarget(self).removeObjectFromItemsAtIndex(index, commit:commit)
                if !undoManager.undoing {
                    undoManager.setActionName(NSLocalizedString("Add' . ucfirst($entityRepresentation->name) . '", comment: "Add' . ucfirst($entityRepresentation->name) . ' undo action"))
                }
            }
            ');
}
?>

            #if os(OSX) && !USE_EMBEDDED_MODULES
            if let arrayController = self.arrayController{
                // Add it to the array controller's content array
                arrayController.insertObject(item, atArrangedObjectIndex:index)

                // Re-sort (in case the use has sorted a column)
                arrayController.rearrangeObjects()

                // Get the sorted array
                let sorted = arrayController.arrangedObjects as! [<?php echo ucfirst($entityRepresentation->name)?>]

                if let tableView = self.tableView{
                    // Find the object just added
                    let row = sorted.indexOf(item)!
                    // Begin the edit in the first column
                    tableView.editColumn(0, row: row, withEvent: nil, select: true)
                 }

            }else{
                // Add directly to the collection
                self.items.insert(item, atIndex: index)
            }
            #else
                self.items.insert(item, atIndex: index)
            #endif

<?php if ($entityRepresentation->isDistantPersistencyOfCollectionAllowed()){
    echo("
            if item.committed==false && commit==true{
               Create$entityRepresentation->name.commit(item, inDataSpace:self.spaceUID)
            }".cr());
}else{
        echo('
            // Commit is ignored because
            // Distant persistency is not allowed for '.$entityRepresentation->name.'
            ');
}
?>

        }else{
           
        }
    }




    // MARK: Remove

    public func removeObjectFromItemsAtIndex(index: Int, commit:Bool) {
        if let item : <?php echo ucfirst($entityRepresentation->name)?> = items[index] {
<?php if ($entityRepresentation->isUndoable()) {
    echo(
'
            // Add the inverse of this invocation to the undo stack
            if let undoManager: NSUndoManager = undoManager {
                // We don\'t want to introduce a retain cycle
                // But with the objc magic casting undoManager.prepareWithInvocationTarget(self) as? UsersCollectionController fails
                // That\'s why we have added an registerUndo extension on NSUndoManager
                undoManager.registerUndo({ () -> Void in
                   self.insertObject(item, inItemsAtIndex: index, commit:commit)
                })
                if !undoManager.undoing {
                    undoManager.setActionName(NSLocalizedString("Remove' . ucfirst($entityRepresentation->name) . '", comment: "Remove ' . ucfirst($entityRepresentation->name) . ' undo action"))
                }
            }
            ');
}
?>

            // Unregister the item
            Registry.unRegister(item)

            //Update the commit flag
            item.committed=false
            #if os(OSX) && !USE_EMBEDDED_MODULES
            // Remove the item from the array
            if let arrayController = self.arrayController{
                arrayController.removeObjectAtArrangedObjectIndex(index)
            }else{
                items.removeAtIndex(index)
            }
            #else
            items.removeAtIndex(index)
            #endif

        <?php if ($entityRepresentation->isDistantPersistencyOfCollectionAllowed()) {
            echo('
            if commit==true{
                Delete'.$entityRepresentation->name.'.commit(item.UID,fromDataSpace:self.spaceUID) 
            }'.cr());
        }else{
            echo('
            // Commit is ignored because
            // Distant persistency is not allowed for '.$entityRepresentation->name.'
            ');
        }
        ?>


        }
    }

    public func removeObject(item: Collectible, commit:Bool)->Bool{
        var index=0
        for storedItem in items{
            if item.UID==storedItem.UID{
                self.removeObjectFromItemsAtIndex(index, commit:commit)
                return true
            }
            index += 1
        }
        return false
    }

    public func removeObjectWithID(id:String, commit:Bool)->Bool{
        var index=0
        for storedItem in items{
            if id==storedItem.UID{
                self.removeObjectFromItemsAtIndex(index, commit:commit)
                return true
            }
            index += 1
        }
        return false
    }

    
}#BMS#->{"filename":"filePrototypeTemplate.php","checksum":2506251213,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/templates\/filePrototypeTemplate.php","size":319}<-#BME#
<?php

/*
 * This template can be used to copy prototype files.
 */

require_once FLEXIONS_MODULES_DIR . 'Bartleby/templates/Requires.php';


if (isset($f,$filemame,$package,$prototypePath)){
    $f->fileName = $filemame;
    $f->package = $package;
    echo file_get_contents($prototypePath);
}else{
    return NULL;
}#BMS#->{"filename":"commons.configuration.php.template.php","checksum":512091796,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/templates\/project\/commons.configuration.php.template.php","size":16121}<-#BME#
<?php

require_once FLEXIONS_MODULES_DIR . '/Bartleby/templates/Requires.php';

/* @var $f Flexed */
/* @var $d ProjectRepresentation */


if (isset ( $f )) {
    $f->fileName = 'BartlebyCommonsConfiguration.php';
    $f->package = 'php/_generated/';
}
/* TEMPLATES STARTS HERE -> */?>
<?php echo '<?php'?>
<?php echo GenerativeHelperForPhp::defaultHeader($f,$d); ?>

// SHARED CONFIGURATION BETWEEN THE API & MAIN PAGES

namespace Bartleby;

require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoConfiguration.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/RoutesAliases.php';
require_once BARTLEBY_ROOT_FOLDER . 'Commons/Filters/FilterEntityPasswordRemover.php';
require_once BARTLEBY_ROOT_FOLDER . 'Commons/Filters/FilterCollectionOfEntityPasswordsRemover.php';
require_once BARTLEBY_ROOT_FOLDER . 'Commons/Filters/FilterHookByClosure.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/KeyPath.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/Stages.php';

use Bartleby\Core\RoutesAliases;
use Bartleby\Core\Stages;
use Bartleby\Mongo\MongoConfiguration;
use Bartleby\Core\KeyPath;
use Bartleby\Filters\FilterCollectionOfEntityPasswordsRemover;
use Bartleby\Filters\FilterEntityPasswordRemover;
use Bartleby\Filters\FilterHookByClosure;

use \MongoClient;
use \MongoCursorException;
use \MongoDB;


class BartlebyCommonsConfiguration extends MongoConfiguration {


    /**
    * The constructor
    * @param String $baseDirectory
    * @param String,$bartlebysRootDirectory
    */
    public function __construct($executionDirectory,$bartlebyRootDirectory){
        parent::__construct($executionDirectory,$bartlebyRootDirectory);
        $this->_configureFilters();
        $this->_configurePermissions();
        $this->_configuresFixedPaths();
    }

    private function  _configuresFixedPaths(){
    // We force the resolution
    // So You can Overload the standard path and define a fixed One
    // To to so you can call `definePath`:
    // $this->definePath("ClassName", $this->_bartlebyRootDirectory . 'Commons/Overloads/EndPoints/ClassName.php');`

    // (!) IMPORTANT
    // If you put files in the Overloads folder that extends an existing class.
    // The nameSpace of the Overload must be post fixed with \Overloads
    // Check UpdateUser for a sample.

    // Update user(s) overload for security purposes.
    $this->definePath("UpdateUser", $this->_bartlebyRootDirectory . 'Commons/Overloads/EndPoints/UpdateUser.php');
    $this->definePath("UpdateUsers", $this->_bartlebyRootDirectory . 'Commons/Overloads/EndPoints/UpdateUsers.php');
    }

    private function _configureFilters(){

        //NEVER DISCLOSE THE PASSWORDS!

        $filterReadUser=new FilterEntityPasswordRemover();
        $filterReadUser->passwordKeyPath='password';
        $this->addFilterOut('ReadUserById->call',$filterReadUser);

        $filterReadUsers=new FilterCollectionOfEntityPasswordsRemover();
        $filterReadUsers->passwordKeyPath='password';// Each entity has directly a "password" key
        $filterReadUsers->iterableCollectionKeyPath=NULL;// the response is a collection.
        $this->addFilterOut('ReadUsersByIds->call',$filterReadUsers);


        // Salt the passwords on Create and Update

        $data=NULL;// Dummy data for the IDE

        $filterCreateUser=new FilterHookByClosure();
        $filterCreateUser->closure=function($data) {
            $password=KeyPath::valueForKeyPath($data,"user.password");
            // let's salt the password
            KeyPath::setValueByReferenceForKeyPath($data,"user.password",$this->salt($password));
            return $data;
        };
        $this->addFilterIn('CreateUser->call',$filterCreateUser);

        $filterCreateUsers=new FilterHookByClosure();
        $filterCreateUsers->closure=function($data) {
            $password=KeyPath::valueForKeyPath($data,"user.password");
            // let's salt the password
            KeyPath::setValueByReferenceForKeyPath($data,"user.password",$this->salt($password));
            return $data;
        };
        $this->addFilterIn('CreateUsers->call',$filterCreateUsers);

        $filterUpdateUser=new FilterHookByClosure();
        $filterUpdateUser->closure=function($data) {
            // let's salt the password
            $password=KeyPath::valueForKeyPath($data,"user.password");
            KeyPath::setValueByReferenceForKeyPath($data,"user.password",$this->salt($password));
            return $data;
        };
        $this->addFilterIn('UpdateUser->call',$filterUpdateUser);

        $filterUpdateUsers=new FilterHookByClosure();
        $filterUpdateUsers->closure=function($data) {
            $password=KeyPath::valueForKeyPath($data,"user.password");
            // let's salt the password
            KeyPath::setValueByReferenceForKeyPath($data,"user.password",$this->salt($password));
            return $data;
        };
        $this->addFilterIn('UpdateUsers->call',$filterUpdateUsers);
    }
    /**
    * Configure the permissions
    * By default we provide a good level of security
    */
    private function _configurePermissions(){

        $this->_permissionsRules = array(

            'NotFound->GET'=> array('level'=> PERMISSION_NO_RESTRICTION),
            'Reachable->GET'=> array('level'=> PERMISSION_NO_RESTRICTION),
            'Reachable->verify'=> array('level'=> PERMISSION_BY_IDENTIFICATION),
            'Auth->POST' => array('level' => PERMISSION_BY_TOKEN,TOKEN_CONTEXT=>'LoginUser#spaceUID'),// (!) do not change
            'Auth->DELETE' => array('level'  => PERMISSION_NO_RESTRICTION), // (!)
            'SSETime->GET'=> array('level'=> PERMISSION_BY_IDENTIFICATION),

            // The configuration infos endpoint
            'Infos->GET'=>array('level' => PERMISSION_NO_RESTRICTION),

            // USERS

            'ReadUserById->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
            'CreateUser->call'=>array('level' => PERMISSION_BY_TOKEN,TOKEN_CONTEXT=>'CreateUser#spaceUID'),

            'UpdateUser->call'=>array(
				'level' => PERMISSION_RESTRICTED_BY_QUERIES,
					ARRAY_OF_QUERIES =>array(
						"hasBeenCreatedByCurrentUser"=>array(
							SELECT_COLLECTION_NAME=>'users',
							WHERE_VALUE_OF_ENTITY_KEY=>'_id',
							EQUALS_VALUE_OF_PARAMETERS_KEY_PATH=>'user._id',

							COMPARE_WITH_OPERATOR=>'==',
							RESULT_ENTITY_KEY=>'creatorUID',
							AND_CURRENT_USERID=>true
						),
						"isCurrentUser"=>array(
							SELECT_COLLECTION_NAME=>'users',
							WHERE_VALUE_OF_ENTITY_KEY=>'_id',
							EQUALS_VALUE_OF_PARAMETERS_KEY_PATH=>'user._id',

							COMPARE_WITH_OPERATOR=>'==',
							RESULT_ENTITY_KEY=>'_id',
							AND_CURRENT_USERID=>true
					)
                )
            ),

            'DeleteUser->call'=>array(
                'level' => PERMISSION_RESTRICTED_BY_QUERIES,
                    ARRAY_OF_QUERIES =>array(
                        "hasBeenCreatedByCurrentUser"=>array(
							SELECT_COLLECTION_NAME=>'users',
							WHERE_VALUE_OF_ENTITY_KEY=>'_id',
							EQUALS_VALUE_OF_PARAMETERS_KEY_PATH=>'userId',

							COMPARE_WITH_OPERATOR=>'==',
							RESULT_ENTITY_KEY=>'creatorUID',
							AND_CURRENT_USERID=>true
						),
                        "isCurrentUser"=>array(
							SELECT_COLLECTION_NAME=>'users',
							WHERE_VALUE_OF_ENTITY_KEY=>'_id',
							EQUALS_VALUE_OF_PARAMETERS_KEY_PATH=>'userId',

							COMPARE_WITH_OPERATOR=>'==',
							RESULT_ENTITY_KEY=>'_id',
							AND_CURRENT_USERID=>true
						)
                	)
            )
            ,
            'CreateUsers->call'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),
            'ReadUsersByIds->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
            'UpdateUsers->call'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),
            'DeleteUsers->call'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),
            'ReadUsersByQuery->call'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),


            // Locker

			/*
				1# A distant locker can be accessed only by Authenticated users.
     			2# A Locker can be "Created Updated Deleted" only by its creator. Locker.creatorUID
     			3# A locker cannot be read distantly but only verifyed
     			4# On successful verification the locker is returned with its cake :)
			*/

			'VerifyLocker->POST' => array('level' => PERMISSION_BY_IDENTIFICATION),
			'CreateLocker->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
			'UpdateLocker->call'=>array(
				'level' => PERMISSION_RESTRICTED_BY_QUERIES,
				ARRAY_OF_QUERIES =>array(
					"hasBeenCreatedByCurrentUser"=>array(
						SELECT_COLLECTION_NAME=>'lockers',
						WHERE_VALUE_OF_ENTITY_KEY=>'_id',
						EQUALS_VALUE_OF_PARAMETERS_KEY_PATH=>'user._id',

						COMPARE_WITH_OPERATOR=>'==',
						RESULT_ENTITY_KEY=>'creatorUID',
						AND_CURRENT_USERID=>true
					)
				)
			),
			'DeleteLocker->call'=>array(
				'level' => PERMISSION_RESTRICTED_BY_QUERIES,
				ARRAY_OF_QUERIES =>array(
					"hasBeenCreatedByCurrentUser"=>array(
						SELECT_COLLECTION_NAME=>'lockers',
						WHERE_VALUE_OF_ENTITY_KEY=>'_id',
						EQUALS_VALUE_OF_PARAMETERS_KEY_PATH=>'lockerId',

						COMPARE_WITH_OPERATOR=>'==',
						RESULT_ENTITY_KEY=>'creatorUID',
						AND_CURRENT_USERID=>true
					)
				)
			),
			'ReadLockerById->call'=>array('level' => PERMISSION_IS_BLOCKED),
			'ReadLockersByIds->call'=>array('level' => PERMISSION_IS_BLOCKED),
			'UpdateLockers->call'=>array('level' => PERMISSION_IS_BLOCKED),
			'DeleteLockers->call'=>array('level' => PERMISSION_IS_BLOCKED),
			'ReadLockersByQuery->call'=>array('level' => PERMISSION_IS_BLOCKED),


            // GROUPS

            'ReadGroupById->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
            'CreateGroup->call'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),
            'UpdateGroup->call'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),
            'DeleteGroup->call'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),
            'CreateGroups->call'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),
            'ReadGroupsByIds->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
            'UpdateGroups->call'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),
            'DeleteGroups->call'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),
            'ReadGroupsByQuery->call'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),

            // DYNAMIC PERMISSIONS

            'ReadPermissionById->call'=>array('level' => PERMISSION_BY_TOKEN,TOKEN_CONTEXT=>'ReadPermissionById#spaceUID'),
            'CreatePermission->call'=>array('level' => PERMISSION_BY_TOKEN,TOKEN_CONTEXT=>'CreatePermission#spaceUID'),

            'UpdatePermission->call'=>array(
                'level' => PERMISSION_RESTRICTED_BY_QUERIES,
                ARRAY_OF_QUERIES =>array(
                    "hasBeenCreatedByCurrentUser"=>array(
                        SELECT_COLLECTION_NAME=>'users',
                        WHERE_VALUE_OF_ENTITY_KEY=>'_id',
                        EQUALS_VALUE_OF_PARAMETERS_KEY_PATH=>'userId',

                        COMPARE_WITH_OPERATOR=>'==',
                        RESULT_ENTITY_KEY=>'creatorUID',
                        AND_CURRENT_USERID=>true
					)
                )
			),
			'DeletePermission->call'=>array(
                        'level' => PERMISSION_RESTRICTED_BY_QUERIES,
                        ARRAY_OF_QUERIES =>array(
                        "hasBeenCreatedByCurrentUser"=>array(
                        SELECT_COLLECTION_NAME=>'users',
                        WHERE_VALUE_OF_ENTITY_KEY=>'_id',
                        EQUALS_VALUE_OF_PARAMETERS_KEY_PATH=>'userId',

                        COMPARE_WITH_OPERATOR=>'==',
                        RESULT_ENTITY_KEY=>'creatorUID',
                        AND_CURRENT_USERID=>true
                    )
                )
            ),
            'CreatePermissions->call'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),
            'ReadPermissionsByIds->call'=>array('level' => PERMISSION_BY_TOKEN,TOKEN_CONTEXT=>'ReadPermissionsByIds#spaceUID'),
            'UpdatePermissions->call'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),
            'DeletePermissions->call'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),
            'ReadPermissionsByQuery->call'=>array('level' => PERMISSION_BY_TOKEN,TOKEN_CONTEXT=>'ReadPermissionsByQuery#spaceUID'),


            // Nobody can delete triggers.

            'SSETriggers->GET'=>array('level' => PERMISSION_BY_IDENTIFICATION),
            'TriggerAfterIndex->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
            'TriggerForIndexes->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
            'TriggersByIds->call'=>array('level' => PERMISSION_BY_IDENTIFICATION)


<?php
echoIndentCR("/*",2);
$permissionHistory=array();
/* @var $d ProjectRepresentation */
/* @var $action ActionRepresentation */


while ($d->iterateOnActions() ) {

    $action=$d->getAction();
    $shouldBeExlcuded=false;
    foreach ($h->excludePath as $pathToExclude ) {
        if(strpos($action->class.'.php',$pathToExclude)!==false){
            $shouldBeExlcuded=true;
        }
    }
    if (isset($excludeActionsWith)) {
        foreach ($excludeActionsWith as $actionTobeExcluded ) {
            if (strpos($action->class, $actionTobeExcluded) !== false) {
                $shouldBeExlcuded = true;
            }
        }
    }

    if($shouldBeExlcuded==true){
        continue;
    }

    $path=$action->path;
    $path=ltrim($path,'/');
    $classNameWithoutPrefix=ucfirst(substr($action->class,strlen($d->classPrefix)));


    //$string= "'".$classNameWithoutPrefix."->call'=>array('level' => PERMISSION_BY_TOKEN,TOKEN_CONTEXT=>'$classNameWithoutPrefix#rUID')";
    $string= "'".$classNameWithoutPrefix."->call'=>array('level' => PERMISSION_BY_IDENTIFICATION)";

    if(!$d->lastAction()){
        $string.=',';
    }
    if(!in_array($string,$permissionHistory)){
        $permissionHistory[]=$string;
        echoIndentCR($string,3);
    }
}
echoIndentCR("*/",2);
?>      );
    }

    /**
    * Setups a returns the commons Routes aliases
    * @return RoutesAliases
    */
    protected function _getEndPointsRouteAliases () {
        $mapping = array(
            'POST:/user/login' => array('Auth','POST'),
            'POST:/user/logout' => array('Auth','DELETE'), // Will call explicitly DELETE (equivalent to explicit call of DELETE login)
            'GET:/verify/credentials' => array('Reachable','verify'),
            'POST:/locker/verify' => array('VerifyLocker','POST'),
            'GET:/{spaceUID}/triggers/after/{lastIndex}' => array('TriggerAfterIndex','call'),// Multi route test
            'GET:/triggers/after/{lastIndex}' => array('TriggerAfterIndex','call'),
<?php
$history=array();
/* @var $d ProjectRepresentation */
/* @var $action ActionRepresentation */

while ($d->iterateOnActions() ) {

    $action=$d->getAction();
    $shouldBeExlcuded=false;
    foreach ($h->excludePath as $pathToExclude ) {
        if(strpos($action->class.'.php',$pathToExclude)!==false){
            $shouldBeExlcuded=true;
        }
    }
    if (isset($excludeActionsWith)) {
        foreach ($excludeActionsWith as $actionTobeExcluded ) {
            if (strpos($action->class, $actionTobeExcluded) !== false) {
                $shouldBeExlcuded = true;
            }
        }
    }

    if($shouldBeExlcuded==true){
        continue;
    }
    
    $path=$action->path;
    $path=ltrim($path,'/');
    $classNameWithoutPrefix=ucfirst(substr($action->class,strlen($d->classPrefix)));
    $string= '\''.$action->httpMethod.':/'.lcfirst($path).'\'=>array(\''.$classNameWithoutPrefix.'\',\'call\')';
    if(!$d->lastAction()){
        $string.=',';
    }
    if(!in_array($string,$history)){
        $history[]=$string;
        echoIndentCR($string,3);
    }
}
?>
        );
        return new RoutesAliases($mapping);
    }
}
<?php echo '?>'?><?php /*<- END OF TEMPLATE */?>#BMS#->{"filename":"configuration.php.template.php","checksum":1492125666,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/templates\/project\/configuration.php.template.php","size":4347}<-#BME#
<?php

require_once FLEXIONS_MODULES_DIR . '/Bartleby/templates/Requires.php';

/* @var $f Flexed */
/* @var $d ProjectRepresentation */


if (isset ( $f )) {
    $f->fileName = 'GeneratedConfiguration.php';
    $f->package =  'php/api/'.$h->majorVersionPathSegmentString().'_generated/';
}
/* TEMPLATES STARTS HERE -> */?>
<?php echo '<?php'?>
<?php echo GenerativeHelperForPhp::defaultHeader($f,$d); ?>

// SHARED CONFIGURATION BETWEEN THE API & MAIN PAGES

namespace Bartleby;

require_once BARTLEBY_ROOT_FOLDER . 'Commons/_generated/BartlebyCommonsConfiguration.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/RoutesAliases.php';

use Bartleby\Core\RoutesAliases;
use Bartleby\Core\Stages;
use Bartleby\Mongo\MongoConfiguration;

class GeneratedConfiguration extends BartlebyCommonsConfiguration {


    protected function _configurePermissions(){

        $permissionsRules = array(
<?php
$permissionHistory=array();
/* @var $d ProjectRepresentation */
/* @var $action ActionRepresentation */
while ($d->iterateOnActions() ) {

    $action=$d->getAction();
    $shouldBeExlcuded=false;
    foreach ($h->excludePath as $pathToExclude ) {
        if(strpos($action->class.'.php',$pathToExclude)!==false){
            $shouldBeExlcuded=true;
        }
    }
    if (isset($excludeActionsWith)) {
        foreach ($excludeActionsWith as $actionTobeExcluded ) {
            if (strpos($action->class, $actionTobeExcluded) !== false) {
                $shouldBeExlcuded = true;
            }
        }
    }


    if($shouldBeExlcuded==true){
        continue;
    }

    $path=$action->path;
    $path=ltrim($path,'/');
    $classNameWithoutPrefix=ucfirst(substr($action->class,strlen($d->classPrefix)));


    //$string= "'".$classNameWithoutPrefix."->call'=>array('level' => PERMISSION_BY_TOKEN,TOKEN_CONTEXT=>'$classNameWithoutPrefix#rUID')";
    $string= "'".$classNameWithoutPrefix."->call'=>array('level' => PERMISSION_BY_IDENTIFICATION)";

    if(!$d->lastAction()){
        $string.=',';
    }
    if(!in_array($string,$permissionHistory)){
        $permissionHistory[]=$string;
        echoIndentCR($string,2);
    }
}
?>      );
        $this->addPermissions($permissionsRules);
    }

/*
    In your Configuration you can override the aliases.

    protected function _getPagesRouteAliases () {
        $routes=parent::_getEndPointsRouteAliases();
        $mapping = array(
        ''=>'Start',
        'time'=>'Time',
        '*' => 'NotFound'
        );
        $routes->addAliasesToMapping($mapping);
    return $routes;
    }

    protected function _getEndPointsRouteAliases () {
        $routes=parent::_getEndPointsRouteAliases();
        $mapping = array(
        'POST:/user/{userId}/comments'=>array('CommentsByUser','POST_method_for_demo'),
        'DELETE:/user/{userId}/comments'=>array('CommentsByUser','DELETE'),
        'time'=>'SSETime' // A server sent event sample
        );
        $routes->addAliasesToMapping($mapping);
        return $routes;
    }


*/

    protected function _getEndPointsRouteAliases () {
        $routes=parent::_getEndPointsRouteAliases();
        $mapping = array(
<?php
$history=array();
/* @var $d ProjectRepresentation */
/* @var $action ActionRepresentation */

while ($d->iterateOnActions() ) {

    $action=$d->getAction();
    $shouldBeExlcuded=false;
    foreach ($h->excludePath as $pathToExclude ) {
        if(strpos($action->class.'.php',$pathToExclude)!==false){
            $shouldBeExlcuded=true;
        }
    }
    if (isset($excludeActionsWith)) {
        foreach ($excludeActionsWith as $actionTobeExcluded ) {
            if (strpos($action->class, $actionTobeExcluded) !== false) {
                $shouldBeExlcuded = true;
            }
        }
    }

    if($shouldBeExlcuded==true){
        continue;
    }

    $path=$action->path;
    $path=ltrim($path,'/');
    $classNameWithoutPrefix=ucfirst(substr($action->class,strlen($d->classPrefix)));
    $string= '\''.$action->httpMethod.':/'.lcfirst($path).'\'=>array(\''.$classNameWithoutPrefix.'\',\'call\')';
    if(!$d->lastAction()){
        $string.=',';
    }
    if(!in_array($string,$history)){
        $history[]=$string;
        echoIndentCR($string,3);
    }

}
?>
        );
        $routes->addAliasesToMapping($mapping);
        return $routes;
    }
}
<?php echo '?>'?><?php /*<- END OF TEMPLATE */?>#BMS#->{"filename":"destructiveInstaller.template.php","checksum":2616949946,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/templates\/project\/destructiveInstaller.template.php","size":3998}<-#BME#
<?php

require_once FLEXIONS_MODULES_DIR . '/Bartleby/templates/Requires.php';

/* @var $f Flexed */


if (isset ( $f )) {
    $f->fileName = 'generated_destructiveInstaller.php';
    $f->package = "php/";
}
/* TEMPLATES STARTS HERE -> */?>
<?php echo '<?php'?>

/**
*
* This script should be destroyed and not deployed.
* A destructive installer script for YouDub
*
**/

namespace Bartleby;

require_once __DIR__.'/Configuration.php';

use \MongoClient;
use Bartleby\Core\Stages;

error_reporting(E_ALL);
ini_set('display_errors', 1);


$configuration=new Configuration(__DIR__,BARTLEBY_ROOT_FOLDER);

function logMessage($message=""){
    echo ($message."<br>\n");
}

$today = date("Ymd-H:m:s");
logMessage ("Running installer on ".$today);
try {
    logMessage("Connecting to MONGO");
    $m = new MongoClient();
} catch (Exception $e) {
    logMessage("Mongo client must be installed ". $e->getMessage());
}
logMessage("Selecting the database  ".$configuration->MONGO_DB_NAME());
$db = $m->selectDB($configuration->MONGO_DB_NAME());// Selecting  base

$collectionList=$db->listCollections();

if ($configuration->STAGE()==Stages::PRODUCTION){
    logMessage("Destructive installer is blocked on Production stage");
    return;
}

if ( $configuration->ALLOW_DESTRUCTIVE_INSTALLER()===false && count($collectionList)>0 ){
    logMessage("ALLOW_DESTRUCTIVE_INSTALLER is set to FALSE! ");
    logMessage("Turn it to true once if you are sure you want to totally reset the DB.");
    return;
}

logMessage("Erasing all the collections if necessary");
// Erase all the collections

logMessage("Number of collection ".count($collectionList));
foreach ($collectionList as $collection) {
logMessage("Droping ".$collection->getName());
$collection->drop();
}
logMessage("Recreating the collections");

// Collection creation

// Bartleby's commons
logMessage("Creating the 'users' collection");
$users=$db->createCollection("users");
logMessage("Creating 'ephemeral' Index for 'users'");
$users->createIndex(array("ephemeral" => 1));
logMessage("Creating the 'groups' collection");
$groups=$db->createCollection("groups");
logMessage("Creating 'ephemeral' Index for 'groups'");
$groups->createIndex(array("ephemeral" => 1));
logMessage("Creating the 'permissions' collection");
$permissions=$db->createCollection("permissions");
logMessage("Creating 'ephemeral' Index for 'permissions'");
$permissions->createIndex(array("ephemeral" => 1));
logMessage("Creating the 'triggers' collection");
$triggers=$db->createCollection("triggers");
logMessage("Creating 'ephemeral' Index for 'triggers'");
$triggers->createIndex(array("ephemeral" => 1));

<?php
/* @var $d ProjectRepresentation */
/* @var $entity EntityRepresentation */
foreach ($d->entities as $entity ) {
    $name=$entity->name;
    if(isset($prefix)){
        $name=str_replace($prefix,'',$name);
    }
    $shouldBeExlcuded=false;
    if (isset($excludeActionsWith)) {
        foreach ($excludeActionsWith as $actionTobeExcluded ) {
            if (strpos(strtolower($name), strtolower($actionTobeExcluded)) !== false) {
                $shouldBeExlcuded = true;
            }
        }
    }

    if ($shouldBeExlcuded==true){
        continue;
    }

    $pluralized=lcfirst(Pluralization::pluralize($name));
    echoIndentCR('logMessage("Creating the \''.$pluralized.'\' collection");',0);
    echoIndentCR('$'.$pluralized.'=$db->createCollection("'.$pluralized.'");',0);
    echoIndentCR('logMessage("Creating \'ephemeral\' Index for \''.$pluralized.'\'");',0);
    echoIndentCR('$'.$pluralized.'->createIndex(array("ephemeral" => 1));',0);

}
?>

logMessage("");
logMessage("**********************************************************************");
logMessage("Please set  Configuration::ALLOW_DESTRUCTIVE_INSTALLER const to FALSE!");



require_once BARTLEBY_PUBLIC_FOLDER.'Protected/PostInstaller.php';
use Bartleby\PostInstaller;
$postInstaller=new PostInstaller();
$postInstaller->run($configuration);

<?php /*<- END OF TEMPLATE */?>
#BMS#->{"filename":"document.swift.template.php","checksum":3939565237,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/templates\/project\/document.swift.template.php","size":12237}<-#BME#
<?php

require_once FLEXIONS_MODULES_DIR . '/Bartleby/templates/Requires.php';
require_once FLEXIONS_MODULES_DIR . 'Languages/FlexionsSwiftLang.php';
require_once FLEXIONS_MODULES_DIR . 'Bartleby/templates/project/SwiftDocumentConfigurator.php';

/*
 * This template is an advanced template that must be configured
 * to be used multiple time within the same project
 * You must declare $configurator a SwitfDocumentConfigurator instance its before invocation.
 */

/* @var $f Flexed */
/* @var $d ProjectRepresentation */
/* @var $project ProjectRepresentation */
/* @var $action ActionRepresentation*/
/* @var $entity EntityRepresentation */
/* @var $configurator SwiftDocumentConfigurator */

if (isset ( $f ) && isset($configurator)) {
    // We determine the file name.
    $f->fileName = $configurator->filename;
    // And its package.
    $f->package = 'xOS/';
}else{
    return 'THIS TEMPLATES REQUIRES A SwitfDocumentConfigurator IN $configurator';
}


$project=$d;// It is a project template

//Collection controllers are related to actions.


/* TEMPLATES STARTS HERE -> */?>
//
//  <?php echo($configurator->filename.cr()) ?>
//
//  The is the central piece of the Document oriented architecture.
//  We provide a universal implementation with conditionnal compilation
//
//  The document stores references to Bartleby's style CollectionControllers.
//  This allow to use intensively bindings and distributed data automation.
//  With the mediation of standard Bindings approach with NSArrayControler
//
//  We prefer to centralize the complexity of data handling in the document.
//  Thats why for example we implement projectBindingsArrayController.didSet with an CGD dispatching
//  We could have set the binding programmatically in the WindowController
//  But we consider for clarity that the Storyboarded Bindings Settings should be as exhaustive as possible.
//  And the potential complexity masked.
//
//  Generated by flexions
//

import Foundation

#if os(OSX)
import AppKit
#else
import UIKit
#endif

<?php
if ($isIncludeInBartlebysCommons==false) {
    echoIndentCR('#if !USE_EMBEDDED_MODULES', 0);
    echoIndentCR('import BartlebyKit', 0);
    echoIndentCR('#endif', 0);
}
?>


public class <?php echo($configurator->getClassName())?> : <?php
    if (isset($isIncludeInBartlebysCommons) && $isIncludeInBartlebysCommons==true){
        echo('JDocument');
    }else{
        echo('BartlebyDocument');
    }
?> {

    // MARK - Universal Type Support

    override public class func declareTypes() {
        super.declareTypes()
<?php
// ENTITIES

/*@ Hypotypose */
$hypotypose=$h;
$list=$hypotypose->getFlatFlexedList();

// FLEXED
$declareAllCollectibileType=false;
if ($declareAllCollectibileType==true) {
    foreach ($list as $flexed) {
        /*@var Flexed */
        $flexedElement = $flexed;
        $fileName = $flexedElement->fileName;
        if ((strpos($fileName, '.swift') !== false) && (strpos($fileName, "Abstract") === false && strpos($fileName, "Document") === false)) {
            $fileName = str_replace('.swift', '', $fileName);
            echoIndentCR('Registry.declareCollectibleType(' . $fileName . ')', 2);
            echoIndentCR('Registry.declareCollectibleType(Alias<' . $fileName . '>)', 2);
        }
    }
}

?>
    }

    private var _KVOContext: Int = 0

    // Collection Controller
    // The initial instances are proxies
    // On document deserialization the collection are populated.

<?php
foreach ($project->entities as $entity) {
    if ($configurator->collectionControllerShouldBeSupportedForEntity($project,$entity)){
        $pluralizedEntity=Pluralization::pluralize($entity->name);
        $collectionControllerClassName=ucfirst($pluralizedEntity).'CollectionController';
        $collectionControllerVariableName=lcfirst($pluralizedEntity).'CollectionController';
        echoIndentCR('public var '.lcfirst($pluralizedEntity).'='.$collectionControllerClassName.'()',1);
    }
}
?>

    // MARK: - OSX
 #if os(OSX) && !USE_EMBEDDED_MODULES


    // KVO
    // Those array controllers are Owned by their respective ViewControllers
    // Those view Controller are observed here to insure a consistent persitency


<?php
foreach ($project->entities as $entity) {
    if ($configurator->collectionControllerShouldBeSupportedForEntity($project,$entity)){
        $pluralizedEntity=Pluralization::pluralize($entity->name);
        $arrayControllerClassName=ucfirst($pluralizedEntity).'ArrayController';
        $arrayControllerVariableName=lcfirst($pluralizedEntity).'ArrayController';
        echoIndentCR('

    public var '.$arrayControllerVariableName.': NSArrayController?{

        willSet{
            // Remove observer on previous array Controller
            '.lcfirst($arrayControllerVariableName).'?.removeObserver(self, forKeyPath: "selectionIndexes", context: &self._KVOContext)
        }
        didSet{
            // Setup the Array Controller in the CollectionController
            self.'.lcfirst($pluralizedEntity).'.arrayController='.lcfirst($arrayControllerVariableName).'
            // Add observer
            '.lcfirst($arrayControllerVariableName).'?.addObserver(self, forKeyPath: "selectionIndexes", options: .New, context: &self._KVOContext)
            if let index=self.registryMetadata.stateDictionary['.$configurator->getClassName().'.kSelected'.ucfirst($entity->name).'IndexKey] as? Int{
               if self.'.lcfirst($pluralizedEntity).'.items.count > index{
                   let selection=self.'.lcfirst($pluralizedEntity).'.items[index]
                   self.'.lcfirst($arrayControllerVariableName).'?.setSelectedObjects([selection])
                }
             }
        }
    }
        ',0);
    }
}
?>


#endif

//Focus indexes persistency

<?php
foreach ($project->entities as $entity) {
    if ($configurator->collectionControllerShouldBeSupportedForEntity($project,$entity)){
        $pluralizedEntity=Pluralization::pluralize($entity->name);
        $arrayControllerClassName=ucfirst($pluralizedEntity).'ArrayController';
        $arrayControllerVariableName=lcfirst($pluralizedEntity).'ArrayController';
        echoIndentCR('

    static public let kSelected'.ucfirst($entity->name).'IndexKey="selected'.ucfirst($entity->name).'IndexKey"
    static public let '.strtoupper($entity->name).'_SELECTED_INDEX_CHANGED_NOTIFICATION="'.strtoupper($entity->name).'_SELECTED_INDEX_CHANGED_NOTIFICATION"
    dynamic public var selected'.ucfirst($entity->name).':'.ucfirst($entity->name).'?{
        didSet{
            if let '.lcfirst($entity->name).' = selected'.ucfirst($entity->name).' {
                if let index='.lcfirst($pluralizedEntity).'.items.indexOf('.lcfirst($entity->name).'){
                    self.registryMetadata.stateDictionary['.$configurator->getClassName().'.kSelected'.ucfirst($entity->name).'IndexKey]=index
                     NSNotificationCenter.defaultCenter().postNotificationName('.$configurator->getClassName().'.'.strtoupper($entity->name).'_SELECTED_INDEX_CHANGED_NOTIFICATION, object: nil)

                }
            }
        }
    }
        ',0);
    }
}
?>



    // MARK: - DATA life cycle

    /**

    In this func you should :

    #1  Define the Schema
    #2  Register the collections

    */
    override public func configureSchema(){

        // #1  Defines the Schema
        super.configureSchema()

<?php
foreach ($project->entities as $entity) {
    if ($configurator->collectionControllerShouldBeSupportedForEntity($project,$entity)){
        $pluralizedEntity=Pluralization::pluralize($entity->name);
        $arrayControllerClassName=ucfirst($pluralizedEntity).'ArrayController';
        $arrayControllerVariableName=lcfirst($pluralizedEntity).'ArrayController';
        $entityDefinition=lcfirst($entity->name).'Definition';
        echoIndentCR('

        let '.$entityDefinition.' = CollectionMetadatum()
        '.$entityDefinition.'.proxy = self.'.lcfirst($pluralizedEntity).'
        // By default we group the observation via the rootObjectUID
        '.$entityDefinition.'.collectionName = '.$entity->name.'.collectionName
        '.$entityDefinition.'.observableViaUID = self.registryMetadata.rootObjectUID
        '.$entityDefinition.'.storage = CollectionMetadatum.Storage.MonolithicFileStorage
        '.$entityDefinition.'.allowDistantPersistency = '. (($entity->isDistantPersistencyOfCollectionAllowed())? 'true':'false').'
        '.$entityDefinition.'.inMemory = '. (($entity->shouldPersistsLocallyOnlyInMemory())? 'true':'false').'
        ',0);
    }
}
?>

        // Proceed to configuration
        do{

<?php
foreach ($project->entities as $entity) {
    if ($configurator->collectionControllerShouldBeSupportedForEntity($project,$entity)){
        $pluralizedEntity=Pluralization::pluralize($entity->name);
        $arrayControllerClassName=ucfirst($pluralizedEntity).'ArrayController';
        $arrayControllerVariableName=lcfirst($pluralizedEntity).'ArrayController';
        $entityDefinition=lcfirst($entity->name).'Definition';
        echoIndentCR('try self.registryMetadata.configureSchema('.$entityDefinition.')',3);
    }
}
?>

        }catch RegistryError.DuplicatedCollectionName(let collectionName){
            bprint("Multiple Attempt to add the Collection named \(collectionName)",file:#file,function:#function,line:#line)
        }catch {
            bprint("\(error)",file:#file,function:#function,line:#line)
        }

        // #2 Registers the collections
        do{
            try self.registerCollections()
        }catch{
        }
    }

    // MARK: - OSX specific

 #if os(OSX) && !USE_EMBEDDED_MODULES

    // MARK: KVO

    override public func observeValueForKeyPath(keyPath: String?, ofObject object: AnyObject?, change: [String : AnyObject]?, context: UnsafeMutablePointer<Void>) {
        guard context == &_KVOContext else {
            // If the context does not match, this message
            // must be intended for our superclass.
            super.observeValueForKeyPath(keyPath, ofObject: object, change: change, context: context)
            return
        }

        // We prefer to centralize the KVO for selection indexes at the top level
        if let keyPath = keyPath, object = object {

        <?php
        foreach ($project->entities as $entity) {
            if ($configurator->collectionControllerShouldBeSupportedForEntity($project,$entity)){
                $pluralizedEntity=Pluralization::pluralize($entity->name);
                $collectionControllerClassName=ucfirst($pluralizedEntity).'CollectionController';
                $arrayControllerVariableName=lcfirst($pluralizedEntity).'ArrayController';
                echoIndentCR('
            
            if keyPath=="selectionIndexes" && self.'.$arrayControllerVariableName.' == object as? NSArrayController {
                if let '.lcfirst($entity->name).'=self.'.$arrayControllerVariableName.'?.selectedObjects.first as? '.ucfirst($entity->name).'{
                    self.selected'.ucfirst($entity->name).'='.lcfirst($entity->name).'
                    return
                }
            }
            ',0);
            }
        }
        ?>
        }

    }

    // MARK:  Delete currently selected items
    <?php
    echoIndentCR('',0);
    foreach ($project->entities as $entity) {
        if ($configurator->collectionControllerShouldBeSupportedForEntity($project,$entity)){
            $entityName=ucfirst($entity->name);
            $pluralizedEntity=lcfirst(Pluralization::pluralize($entity->name));
            echoIndentCR('
    public func deleteSelected'.$entityName.'() {
        // you should override this method if you want to cascade the deletion(s)
        if let selected=self.selected'.$entityName.'{
            self.'.$pluralizedEntity.'.removeObject(selected, commit:true)
        }
    }
        ',0);
        }
    }
    ?>

    #else


    #endif
    
    #if os(OSX)

    required public init() {
        super.init()
        <?php echo($configurator->getClassName().'.declareTypes()'); ?>
    }
    #else

    public required init(fileURL url: NSURL) {
        super.init(fileURL: url)
        <?php echo($configurator->getClassName().'.declareTypes()'); ?>
    }

    #endif

}
#BMS#->{"filename":"SwiftDocumentConfigurator.php","checksum":508710326,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/templates\/project\/SwiftDocumentConfigurator.php","size":1214}<-#BME#
<?php
class SwiftDocumentConfigurator{

    /**
     * @var string The file name to be used
     */
    public $filename;// E.g = WorkspaceDocument.swift

    /**
     * @var array the array of the actions to be used.
     */
    public $includeCollectionControllerForEntityContainingString=array();

    /**
     * @var arrays the array of action name to explicitly exclude
     */
    public $excludeCollectionControllerForEntityContainingString=Array();

    function getClassName(){
        return str_replace('.swift','',$this->filename);
    }

    function collectionControllerShouldBeSupportedForEntity(ProjectRepresentation $project, EntityRepresentation $entity){
        $inclusionName = strtolower(str_replace($project->classPrefix, '', $entity->name));
        foreach ($this->excludeCollectionControllerForEntityContainingString as $exclusion){
            if ($entity->name===$exclusion){
                return false;
            }
        }
        foreach ($this->includeCollectionControllerForEntityContainingString as $inclusion) {
            if (!(strpos($inclusionName, strtolower($inclusion)) === false)){
                return true;
            }
        }
        return false;
    }

}
#BMS#->{"filename":"Requires.php","checksum":2416621261,"relativePath":"BartlebyFlexions\/src\/modules\/Bartleby\/templates\/Requires.php","size":295}<-#BME#
<?php
require_once FLEXIONS_ROOT_DIR.  'flexions/representations/flexions/FlexionsRepresentationsIncludes.php';
require_once FLEXIONS_MODULES_DIR . 'GenHelpers/classes/GenerativeHelperForPhp.class.php';
require_once FLEXIONS_MODULES_DIR . 'GenHelpers/classes/GenerativeHelperForSwift.class.php';#BMS#->{"filename":"FtpClient.php","checksum":2184814579,"relativePath":"BartlebyFlexions\/src\/modules\/Deploy\/dependencies\/FTP\/FtpClient.php","size":13087}<-#BME#
<?php namespace Melihucar\FtpClient;

use \Exception;

/**
 * FTP Client for PHP
 * 
 * @package FTPClient
 * @version 1.0
 * 
 * @copyright Melih Ucar
 * @author Melih Ucar
 * @license http://opensource.org/Licenses/MIT (The MIT License)
 * 
 * Copyright (c) 2013, Melih Ucar (http://www.melihucar.net/)
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
 * OR OTHER DEALINGS IN THE SOFTWARE.
 */
class FtpClient {

    // Const variables
    const ASCII = FTP_ASCII;
    const BINARY = FTP_BINARY;

    const TIMEOUT_SEC = FTP_TIMEOUT_SEC;
    const AUTOSEEK = FTP_AUTOSEEK;

    /**
     * FTP connection
     * @var Resource
     */
    private $connection = null;

    /**
     * passive mode active / to be activated
     *
     * @var bool
     */
    protected $passive = false;

    /**
     * verbose mode
     *
     * @todo allow verbose mode to call ftp functions without "@"
     * @var bool
     */
    protected $verbose = false;

    /**
     *
     * @var bool
     */
    protected $binary = false;

    /**
     * Constructor
     * 
     * Checks if ftp extension is loaded.
     */
    public function __construct()
    {
        if ( !extension_loaded('ftp') ) {
            throw new Exception('FTP extension is not loaded!');            
        }
    }

    /**
     * Opens a FTP connection
     * 
     * @param string $host
     * @param bool $ssl
     * @param int $port
     * @param int $timeout
     * 
     * @return FTPClient
     */
    public function connect($host, $ssl = false, $port = 21, $timeout = 90)
    {
        if ($ssl) {
            $this->connection = @ftp_ssl_connect($host, $port, $timeout);
        } else {
            $this->connection = @ftp_connect($host, $port, $timeout);
        }

        if ($this->connection == null) {
            throw new Exception('Unable to connect');            
        } else {
            return $this;
        }
    }

    /**
     * Logins to FTP Server
     * 
     * @param string $username
     * @param string $password
     * 
     * @return FTPClient
     */
    public function login($username = 'anonymous', $password = '')
    {
        $result = @ftp_login($this->connection, $username, $password);

        if ($result === false) {
            throw new Exception('Login incorrect');
        } else {
            // set passive mode
            if (!is_null($this->passive)) {
                $this->passive($this->passive);
            }

            return $this;
        }
    }

    /**
     * Closes FTP connection
     * 
     * @return void
     */
    public function close()
    {
        $result = @ftp_close($this->connection);

        if ($result === false) {
            throw new Exception('Unable to close connection');
        }
    }

    /**
     * Changes passive mode,,,
     * 
     * @param bool $passive
     * 
     * @return FTPClient,
     */
    public function passive($passive = true)
    {
        $this->passive = $passive;

        if ($this->connection) {
            $result = ftp_pasv($this->connection, $passive);
            if ($result === false) {
                throw new Exception('Unable to change passive mode');
            }
        }

        return $this;
    }

    public function binary($binary)
    {
        $this->binary = $binary;

        return $this;
    }

    /**
     * @return int
     */
    public function getMode()
    {
        return $this->binary ? FTPClient::BINARY : FTPClient::ASCII;
    }

    /**
     * Changes the current directory to the specified one
     * 
     * @return FTPClient
     */
    public function changeDirectory($directory)
    {
        $result = @ftp_chdir($this->connection, $directory);
        
        if ($result === false) {
            throw new Exception('Unable to change directory');
        }

        return $this;
    }

    /**
     * Changes to the parent directory
     * 
     * @return FTPClient
     */
    public function parentDirectory()
    {
        $result = @ftp_cdup($this->connection);
        
        if ($result === false) {
            throw new Exception('Unable to get parent folder');
        }

        return $this;
    }

    /**
     * Returns the current directory name
     *
     * @return string
     */
    public function getDirectory()
    {
        $result = @ftp_pwd($this->connection);
        
        if ($result === false) {
            throw new Exception('Unable to get directory name');
        }

        return $result;
    }

    /**
     * Creates a directory
     *
     * @param string $directory
     *
     * @return FTPClient
     */
    public function createDirectory($directory)
    {
        $result = @ftp_mkdir($this->connection, $directory);
        
        if ($result === false) {
            throw new Exception('Unable to create directory');
        }

        return $this;
    }

    /**
     * Removes a directory
     *
     * @param string $directory
     * 
     * @return FTPClient
     */
    public function removeDirectory($directory)
    {
        $result = @ftp_rmdir($this->connection, $directory);
        
        if ($result === false) {
            throw new Exception('Unable to remove directory');
        }

        return $this;
    }

    /**
     * Returns a list of files in the given directory
     *
     * @param string $directory
     *
     * @return array
     */
    public function listDirectory($directory)
    {
        $result = @ftp_nlist($this->connection, $directory);
        
        if ($result === false) {
            throw new Exception('Unable to list directory');
        }
        
        asort($result);

        return $result;
    }

    /**
     * @param string $parameters
     * @param bool $recursive
     *
     * @return array
     *
     * @throws \Exception
     */
    public function rawlistDirectory($parameters, $recursive = false)
    {
        $result = @ftp_rawlist($this->connection, $parameters, $recursive);

        if ($result === false) {
            throw new Exception('Unable to list directory');
        }

        return $result;
    }

    /**
     * Deletes a file on the FTP server
     *
     * @param string $path
     * 
     * @return FTPClient
     */
    public function delete($path)
    {
        $result = @ftp_delete($this->connection, $path);
        
        if ($result === false) {
            throw new Exception('Unable to get parent folder');
        }

        return $this;
    }

    /**
     * Returns the size of the given file.
     * Return -1 on error
     *
     * @param string $remoteFile
     *
     * @return int
     * 
     */
    public function size($remoteFile)
    {
        $size = @ftp_size($this->connection, $remoteFile);

        if ($size === -1) {
            throw new Exception('Unable to get file size');
        }

        return $size;
    }

    /**
     * Returns the last modified time of the given file.
     * Return -1 on error
     *
     * @param string $remoteFile
     *
     * @return int
     * 
     */
    public function modifiedTime($remoteFile, $format = null)
    {
        $time = ftp_mdtm($this->connection, $remoteFile);

        if ( $time !== -1 && $format !== null ) {
            return date($format, $time);
        } else {
            return $time;
        }
    }

    /**
     * Renames a file or a directory on the FTP server
     *
     * @param string $currentName
     * @param string $newName
     *
     * @return bool
     */
    public function rename($currentName, $newName)
    {
        $result = @ftp_rename($this->connection, $currentName, $newName);

        return $result;
    }

    /**
     * Downloads a file from the FTP server
     *
     * @param string $localFile
     * @param string $remoteFile
     * @param int $mode
     * @param int $resumepos
     * 
     * @return FTPClient
     */
    public function get($localFile, $remoteFile, $resumePosision = 0)
    {
        $mode = $this->getMode();
        $result = @ftp_get($this->connection, $localFile, $remoteFile, $mode, $resumePosision);

        if ($result === false)
        {
            throw new Exception(sprintf('Unable to get or save file "%s" from %s', $localFile, $remoteFile));
        }

        return $this;
    }

    /**
     * Uploads from an open file to the FTP server
     *
     * @param string $remoteFile
     * @param string $localFile
     * @param int $mode
     * @param int $startPosision
     * 
     * @return FTPClient
     */
    public function put($remoteFile, $localFile, $startPosision = 0)
    {
        $mode = $this->getMode();
        $result = @ftp_put($this->connection, $remoteFile, $localFile, $mode, $startPosision);
        
        if ($result === false) {
            throw new Exception('Unable to put file');
        }

        return $this;
    }

    /**
     * Downloads a file from the FTP server and saves to an open file
     *
     * @param resource $handle
     * @param string $remoteFile
     * @param int $mode
     * @param int $resumepos
     * 
     * @return FTPClient
     */
    public function fget($handle, $remoteFile, $resumePosision = 0)
    {
        $mode = $this->getMode();
        $result = @ftp_fget($this->connection, $handle, $remoteFile, $mode, $resumePosision);
        
        if ($result === false) {
            throw new Exception('Unable to get file');
        }

        return $this;
    }

    /**
     * Uploads from an open file to the FTP server
     *
     * @param string $remoteFile
     * @param resource $handle
     * @param int $mode
     * @param int $startPosision
     * 
     * @return FTPClient
     */
    public function fput($remoteFile, $handle, $startPosision = 0)
    {
        $mode = $this->getMode();
        $result = @ftp_fput($this->connection, $remoteFile, $handle, $mode, $startPosision);
        
        if ($result === false) {
            throw new Exception('Unable to put file');
        }

        return $this;
    }

    /**
     * Retrieves various runtime behaviours of the current FTP stream
     * TIMEOUT_SEC | AUTOSEEK
     *
     * @param mixed $option
     *
     * @return mixed
     */
    public function getOption($option)
    {
        switch ($option) {
            case FTPClient::TIMEOUT_SEC:
            case FTPClient::AUTOSEEK:
                $result = @ftp_get_option($this->connection, $option);

                return $result;
                break;
            
            default:
                throw new Exception('Unsupported option');
                break;
        }
    }

    /**
     * Set miscellaneous runtime FTP options
     * TIMEOUT_SEC | AUTOSEEK
     *
     * @param mixed $option
     * @param mixed $value
     *
     * @return mixed
     */
    public function setOption($option, $value)
    {
        switch ($option) {
            case FTPClient::TIMEOUT_SEC:
                if ($value <= 0) {
                    throw new Exception('Timeout value must be greater than zero');
                }
                break;

            case FTPClient::AUTOSEEK:
                if (!is_bool($value)) {
                    throw new Exception('Autoseek value must be boolean');
                }
                break;
            
            default:
                throw new Exception('Unsupported option');
                break;
        }

        return @ftp_set_option($this->connection, $option, $value);
    }

    /**
     * Allocates space for a file to be uploaded
     * 
     * @param int $filesize
     * 
     * @return FTPClient
     */
    public function allocate($filesize)
    {
        $result = @ftp_alloc($this->connection, $filesize);
        
        if ($result === false) {
            throw new Exception('Unable to allocate');
        }

        return $this;
    }

    /**
     * Set permissions on a file via FTP
     *
     * @param int $mode
     * @param string $filename
     * 
     * @return FTPClient
     */
    public function chmod($mode, $filename)
    {
        $result = @ftp_chmod($this->connection, $mode, $filename);
        
        if ($result === false) {
            throw new Exception('Unable to change permissions');
        }

        return $this;
    }

    /**
     * Requests execution of a command on the FTP server
     *
     * @param string $command
     * 
     * @return FTPClient
     */
    public function exec($command)
    {
        $result = @ftp_exec($this->connection, $command);
        
        if ($result === false) {
            throw new Exception('Unable to exec command');
        }

        return $this;
    }

    /**
     * Destructor
     */
    public function __destruct()
    {
        $this->close();
    }
}
#BMS#->{"filename":"Deploy.php","checksum":3635263315,"relativePath":"BartlebyFlexions\/src\/modules\/Deploy\/Deploy.php","size":4606}<-#BME#
<?php
/**
 * Created by PhpStorm.
 * User: bpds
 * Date: 13/07/15
 * Time: 17:11
 */



require_once FLEXIONS_ROOT_DIR . 'flexions/Core/Hypotypose.php';
require_once FLEXIONS_ROOT_DIR . 'flexions/Core/Flexed.php';

interface IDeploy{
    function rmPathImplementation($path);
    function copyFilesImplementation($filePath,$destination);
}

class Deploy {

    /*@var $_hypotypose Hypotypose */
    protected $_hypotypose;


    /**
     * @var string this absolute destination should exists
     */
    protected $_absoluteBaseDestination='';

    function __construct(\Hypotypose $hypotypose){
        $this->_hypotypose=$hypotypose;
    }

    /**
     * Deletes the root folder.
     *
     * @param $package
     * @param $absoluteDestination
     * @param bool $removelastpackagecomponent
     */
    function rmPath($path) {
        $this->rmPathImplementation($path);
    }
    
    /**
     * Copies the files.
     *
     * @param $package
     * @param $absoluteDestination
     * @param bool|true $removelastpackagecomponent most of the time you want to remove for example the /php/ folder
     * @throws \Exception
     */
    function copyFiles($package,$absoluteDestination,$removelastpackagecomponent=true){

        if(substr($absoluteDestination,-1) != DIRECTORY_SEPARATOR){
            $absoluteDestination=$absoluteDestination.DIRECTORY_SEPARATOR;
        }
        $this->_absoluteBaseDestination=$absoluteDestination;


        if (isset($this->_hypotypose)) {
            $list = $this->_hypotypose->getFlatFlexedList();
            /* @var $flexed Flexed */
            foreach ( $list as $flexed ) {
                $filePath=$flexed->packagePath.$flexed->fileName;
                $packPosition=stripos($flexed->packagePath.$flexed->fileName,$package);
                //fLog('  '.$flexed->packagePath.$flexed->fileName.' '.$package.'->'.$packPosition.cr(),true);
                // This file should be copied
                if ($removelastpackagecomponent==true){
                    $packagecomponents=explode('/',$flexed->package);
                    array_shift($packagecomponents); // remove the last component
                    $joinedpackage=join('/',$packagecomponents);
                    $destination=$absoluteDestination.$joinedpackage.$flexed->fileName;
                }else{
                    $destination=$absoluteDestination.$flexed->package.$flexed->fileName;
                }
                if($packPosition!=false){
                    if($this instanceof IDeploy){
                        $this->copyFilesImplementation($filePath,$destination);
                    }else{
                        throw new \Exception('Deploy classes must implement IDeploy');
                    }
                }else{
                }
            }
        }else{
            throw new \Exception('LocalDeploy requires a valid hypotypose');
        }
    }

    /**
     * Equivalent to copy but we keep only the terminal folder.
     * @param $package
     * @param $absoluteDestination
     * @throws \Exception
     */
    function flatCopyFiles($package,$absoluteDestination){

        if(substr($absoluteDestination,-1) != DIRECTORY_SEPARATOR){
            $absoluteDestination=$absoluteDestination.DIRECTORY_SEPARATOR;
        }

        $this->_absoluteBaseDestination=$absoluteDestination;
        if (isset($this->_hypotypose)) {
            $list = $this->_hypotypose->getFlatFlexedList();
            /* @var $flexed Flexed */
            foreach ( $list as $flexed ) {
                $filePath=$flexed->packagePath.$flexed->fileName;
                $packPosition=stripos($flexed->packagePath.$flexed->fileName,$package);
                /* @var $packagecomponents array */
                $packagecomponents=explode('/',$flexed->package);
                if (count($packagecomponents)>0){
                    $packageSegment=$packagecomponents[count($packagecomponents)-1];
                    $destination=$absoluteDestination.$packageSegment.$flexed->fileName;
                }else{
                    $destination=$absoluteDestination.$flexed->fileName;
                }
                if($packPosition!=false){
                    if($this instanceof IDeploy){
                        $this->copyFilesImplementation($filePath,$destination);
                    }else{
                        throw new \Exception('Deploy classes must implement IDeploy');
                    }
                }else{
                }
            }
        }else{
            throw new \Exception('LocalDeploy requires a valid hypotypose');
        }
    }

}#BMS#->{"filename":"FTPDeploy.php","checksum":3840862648,"relativePath":"BartlebyFlexions\/src\/modules\/Deploy\/FTPDeploy.php","size":4772}<-#BME#
<?php
/**
 * Created by PhpStorm.
 * User: bpds
 * Date: 13/07/15
 * Time: 16:23
 */

// Dependency

require_once FLEXIONS_MODULES_DIR.'Deploy/dependencies/FTP/FtpClient.php';
require_once FLEXIONS_MODULES_DIR."Deploy/Deploy.php";


class FTPDeploy extends Deploy implements IDeploy{

    /* @var $ftpClient \Melihucar\FtpClient\FtpClient*/
    var $ftpClient;

    var $loggedIn=false;

    var $createdFolders=array();


    var $currentDirectory;

    function __construct(\Hypotypose $hypotypose){
        $this->_hypotypose=$hypotypose;
        fLog(cr().'FTP deploy is running'.cr().cr(),true);
    }

    function setUp($host, $port = 21){
        $this->ftpClient=new \Melihucar\FtpClient\FtpClient();
        $this->ftpClient->connect($host,false,21,90);
    }

    function login($user,$password){
        if (isset($this->ftpClient)){
            $this->ftpClient->login($user,$password);
            $this->loggedIn=true;
        }
        return  $this->loggedIn;
    }

    function rmPathImplementation($path) {
        if($this->loggedIn==true){
            // TODO implement the delete logic
        }else{
            throw new \Exception('Ftp client is not logged in login()');
        }
    }

    function copyFilesImplementation($filePath,$destination){
        if($this->loggedIn==true){
            $folder=dirname($destination);
            $this->currentDirectory=$this->ftpClient->getDirectory();
            if($folder!=$this->currentDirectory){
                // Create the directory
                $this->createDirectoriesForPath($destination);
                // GO TO THE DIRECTORY
                $cd=$this->ftpClient->changeDirectory(dirname($destination));
            }
            // UPLOAD
            $path_parts=pathinfo($destination);
            $destinationFileName=$path_parts['basename'];
            $upload=$this->ftpClient->put($destinationFileName,$filePath);
            fLog('FTP COPIED FROM : '.$filePath.cr().'TO'.$destination.cr(),true);
        }else{
            throw new \Exception('Ftp client is not logged in login()');
        }

    }


    function createDirectoriesForPath($path){
        $directory=dirname($path);
        if(in_array($directory,$this->createdFolders)==false){
            // We need to create the folder.
            $baseFolder=$this->_absoluteBaseDestination;
            $this->cdToFolderPath($baseFolder);
            $relativeBaseDirectory=dirname(str_replace($this->_absoluteBaseDestination,'',$path ));
            $relativeComponent=explode(DIRECTORY_SEPARATOR,$relativeBaseDirectory);
            foreach ($relativeComponent as $pathSegment){
                $baseFolder.=$pathSegment.DIRECTORY_SEPARATOR;
                if(in_array($directory,$this->createdFolders)==false){
                    $l=$this->ftpClient->listDirectory('');
                    if(is_array($l) && (!in_array($pathSegment,$l))) {
                        // Create the directory if necessary
                        $this->ftpClient->createDirectory($pathSegment);
                        $this->createdFolders[] = rtrim($baseFolder, '/');
                        fLog('FTP Created /' . $pathSegment . cr(), true);
                    }
                }
                $this->cdToFolderPath($baseFolder);
            }
        }
    }

    function cdToFolderPath($destination){
        if(! isset($this->currentDirectory)){
            $this->currentDirectory=$this->ftpClient->getDirectory();
        }
        $destinationDir=rtrim($destination,DIRECTORY_SEPARATOR);
        if($this->currentDirectory!=$destinationDir) {
            $relativePath = str_replace($this->currentDirectory, '', $destination);
            $relativePath = rtrim($relativePath,DIRECTORY_SEPARATOR);
            $relativePath = ltrim($relativePath,DIRECTORY_SEPARATOR);
            $symRelativePath = str_replace($destination, '', $this->currentDirectory);
            if ($symRelativePath == $this->currentDirectory) {
                // We are down in the hierarchy
                $delta=explode('/',$relativePath);
                foreach ($delta as $deltaSegment ) {
                    if ($deltaSegment!=''){
                        $this->ftpClient->changeDirectory($deltaSegment);
                        $this->currentDirectory.=DIRECTORY_SEPARATOR.$deltaSegment;
                    }
                }
            } else {
                // We are up in the hierarchy
                while( $this->currentDirectory!=$destinationDir){
                    $result=$this->ftpClient->parentDirectory();
                    $this->currentDirectory=dirname($this->currentDirectory);
                }
            }
        }
        fLog('FTP Changed directory to '. $this->currentDirectory.cr(),true);

    }


}#BMS#->{"filename":"LocalDeploy.php","checksum":238426920,"relativePath":"BartlebyFlexions\/src\/modules\/Deploy\/LocalDeploy.php","size":1938}<-#BME#
<?php
/**
 * Created by PhpStorm.
 * User: bpds
 * Date: 13/07/15
 * Time: 16:23
 */


require_once "Deploy.php";

class LocalDeploy extends Deploy implements IDeploy{

    function __construct(\Hypotypose $hypotypose){
        $this->_hypotypose=$hypotypose;
        fLog(cr().'LOCAL deploy is running'.cr().cr(),true);
    }

    function  rmPathImplementation($path) {
        $this->_delete($path);
    }

    /**
     * Deletes a file or recursively a folder
     * Returns true if the file or the folder does not exists.
     * @see IOManagerPersistency::delete()
     * @param $filename
     * @return bool
     */
    private function _delete($filename){
        if(!file_exists($filename)){
            return true;
        }
        if(is_dir($filename)){
            // we delete folders with a recursive deletion method
            return $this->_rmdir($filename,true);
        }else{
            return unlink($filename);
        }
    }

    /**
     * @param $dir
     * @param $result
     * @return bool
     */
    private function _rmdir($dir,$result) {
        if (is_dir($dir)) {
            $objects = scandir($dir);
            foreach ($objects as $object) {
                if ($object != "." && $object != "..") {
                    if (filetype($dir.DIRECTORY_SEPARATOR.$object) == "dir")
                        $result=$result&&$this->_rmdir($dir.DIRECTORY_SEPARATOR.$object,$result);
                    else
                        $result=$result&&unlink($dir.DIRECTORY_SEPARATOR.$object);
                }
            }
            $result=$result&&rmdir($dir);
        }
        return $result;
    }


    function copyFilesImplementation($filePath,$destination){
        if(!file_exists( dirname ($destination))) {
            mkdir(dirname($destination), 0777, true);
        }
        fLog('COPYING FROM : '.$filePath.cr().'TO'.$destination.cr(),true);
        copy($filePath,$destination);
    }
}#BMS#->{"filename":"GenerativeHelper.php","checksum":1970899302,"relativePath":"BartlebyFlexions\/src\/modules\/GenHelpers\/classes\/GenerativeHelper.php","size":332}<-#BME#
<?php

require_once FLEXIONS_ROOT_DIR . 'flexions/Core/Hypotypose.php';

class GenerativeHelper{
    
    static function defaultHeader(Flexed $f, $d){
        return '// DEFAULT HEADER';
    }

    static function variablesFromPath($path){
        preg_match_all('/{(.*?)}/', $path, $matches);
        return $matches[1];
    }

}
#BMS#->{"filename":"GenerativeHelperForPhp.class.php","checksum":2759211453,"relativePath":"BartlebyFlexions\/src\/modules\/GenHelpers\/classes\/GenerativeHelperForPhp.class.php","size":522}<-#BME#
<?php
/**
 * Created by PhpStorm.
 * User: bpds
 * Date: 13/07/15
 * Time: 10:37
 */
require_once 'GenerativeHelper.php';

class GenerativeHelperForPhp extends GenerativeHelper {

    static function defaultHeader(Flexed $f, $d) {
        $header = "
/**
* Generated by BARTLEBY'S Flexions for $f->author on ?
* https://github.com/Bartlebys
*
* DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
*
* Copyright (c) 2016  $f->company  All rights reserved.
*/
";
        return $header;

    }


}#BMS#->{"filename":"GenerativeHelperForSwift.class.php","checksum":651925143,"relativePath":"BartlebyFlexions\/src\/modules\/GenHelpers\/classes\/GenerativeHelperForSwift.class.php","size":16567}<-#BME#
<?php

require_once 'GenerativeHelper.php';
require_once FLEXIONS_MODULES_DIR . 'Languages/FlexionsSwiftLang.php';


class GenerativeHelperForSwift extends GenerativeHelper {


    static function getCurrentClassNameWithPrefix($d, $classesPrefix = "") {
        if (!$d) return '$d should be set in getCurrentClassFragment( )';
        if (property_exists($d, 'name')) {
            return $classesPrefix . $d->name;
        } else {
            return 'UNDEFINDED-CLASS-FRAGMENT';
        }
    }

    static function defaultHeader(Flexed $f, $d) {
        $swiftHeader = "//
//  $f->fileName
//  $f->projectName
//
// THIS FILE AS BEEN GENERATED BY BARTLEBYFLEXIONS for $f->author
// DO NOT MODIFY THIS FILE YOUR MODIFICATIONS WOULD BE ERASED ON NEXT GENERATION!
//
// Copyright (c) 2016  $f->company  All rights reserved.
//";
        return $swiftHeader;

    }


    static function getBaseClass($f, $d) {
        /* @var $d EntityRepresentation */
        /* @var $f Flexed */

        if (isset($d) && isset($d->instanceOf)) {
            return $d->instanceOf;
        } else {
            // Default base  for bartleby
            return GenerativeHelperForSwift::defaultBaseClass($d);
        }
    }

    static function defaultBaseClass($d){
        /* @var $d EntityRepresentation */
         return 'JObject';
    }


    static function isAGeneratedSubClass($d){
        /* @var $d EntityRepresentation */
        return (isset($d) && isset($d->instanceOf));
    }

    //  NSCODING support

    /**
     * @param $d ActionRepresentation || EntityRepresentation
     * @param $increment integer
     */
    static function echoBodyOfInitWithCoder($d, $increment) {

        // NSCoding support for entities and parameters classes.
        // $d may be ActionRepresentation or EntityRepresentation
        $isEntity=($d instanceof EntityRepresentation);

        while ($isEntity?$d->iterateOnProperties():$d->iterateOnParameters() === true) {
            $property = $isEntity?$d->getProperty():$d->getParameter();
            if ($isEntity==true && $property->isSerializable==false){
                continue;
            }
            if (!isset($property->customSerializationMapping)){
                GenerativeHelperForSwift::_echoPropertyForInitWithCoder($property,$increment);
            }else {
                // RECURSIVE CALL FOR CUSTOMSERIALIZATION
                foreach ($property->customSerializationMapping as $property) {
                    GenerativeHelperForSwift::_echoPropertyForInitWithCoder($property, $increment);
                }
            }
        }
    }

    /**
     * @param $property PropertyRepresentation
     * @param $increment integer
     */
    static private function _echoPropertyForInitWithCoder($property, $increment) {
        $name = $property->name;
        $flexionsType = $property->type;
        $asString=(($property->required || $property->default != NULL )? 'as!' : 'as?');
        $nativeType = FlexionsSwiftLang::nativeTypeFor($flexionsType);
        if ($property->isSerializable==false){
            return;
        }
        switch ($flexionsType) {
            case FlexionsTypes::STRING:
                echoIndentCR('self.'.$name . '='.GenerativeHelperForSwift::_decodingFunctionFor($property,$name,$flexionsType) , $increment);
                break;
            case FlexionsTypes::INTEGER:
                echoIndentCR('self.'.$name . '='.GenerativeHelperForSwift::_decodingFunctionFor($property,$name,$flexionsType) , $increment);
                break;
            case FlexionsTypes::BOOLEAN:
                echoIndentCR('self.'.$name . '='.GenerativeHelperForSwift::_decodingFunctionFor($property,$name,$flexionsType) , $increment);
                break;
            case FlexionsTypes::OBJECT:
                echoIndentCR('self.'.$name . '='.GenerativeHelperForSwift::_decodingFunctionFor($property,$name,$flexionsType), $increment);
                break;
            case FlexionsTypes::COLLECTION:
                $instanceOf=FlexionsSwiftLang::nativeTypeFor($property->instanceOf);
                if ($instanceOf==FlexionsTypes::NOT_SUPPORTED){
                    $instanceOf=$property->instanceOf;
                }
                echoIndentCR('self.'.$name . '='.GenerativeHelperForSwift::_decodingFunctionFor($property,$name,$flexionsType) .$asString.' [' . ucfirst($instanceOf) . ']' , $increment);
                break;
            case FlexionsTypes::ENUM:
                echoIndentCR('self.'.$name . '='.GenerativeHelperForSwift::_decodingFunctionFor($property,$name,$flexionsType), $increment);
                break;
            case FlexionsTypes::FILE:
                echoIndentCR('self.'.$name . '='.GenerativeHelperForSwift::_decodingFunctionFor($property,$name,$flexionsType).$asString.' ' .$nativeType . '' , $increment);
                break;
            case FlexionsTypes::DICTIONARY:
                echoIndentCR('self.'.$name . '='.GenerativeHelperForSwift::_decodingFunctionFor($property,$name,$flexionsType).$asString.' ' .$nativeType . '' , $increment);
                break;
            case FlexionsTypes::FLOAT:
                echoIndentCR('self.'.$name . '='.GenerativeHelperForSwift::_decodingFunctionFor($property,$name,$flexionsType) , $increment);
                break;
            case FlexionsTypes::DOUBLE:
                echoIndentCR('self.'.$name . '='.GenerativeHelperForSwift::_decodingFunctionFor($property,$name,$flexionsType) , $increment);
                break;
            case FlexionsTypes::BYTE:
                echoIndentCR('var ref' . ucfirst($name) . '=1;' , $increment);
                // ??
                echoIndentCR('self.'.$name . '='.GenerativeHelperForSwift::_decodingFunctionFor($property,$name,$flexionsType).'("' . $name . '",&ref' . ucfirst($name) . ')' , $increment);
                break;
            case FlexionsTypes::DATETIME:
                echoIndentCR('self.'.$name . '='.GenerativeHelperForSwift::_decodingFunctionFor($property,$name,$flexionsType) , $increment);
                break;
            case FlexionsTypes::URL:
                echoIndentCR('self.'.$name . '='.GenerativeHelperForSwift::_decodingFunctionFor($property,$name,$flexionsType), $increment);
                break;
            case FlexionsTypes::DATA:
                echoIndentCR('self.'.$name . '='.GenerativeHelperForSwift::_decodingFunctionFor($property,$name,$flexionsType), $increment);
                break;
            case FlexionsTypes::NOT_SUPPORTED:
                echoIndentCR('//' . 'self.'.$name . 'is not supported' , $increment);
                break;
            default :
                echoIndentCR('//TODO:' . $name . ' HAS NOT BEEN GENERATED (GENERATIVE TEMPLATE NEEDS TO BE AMENDED)' , $increment);
                break;

        }
    }

    /**
     * @param $property PropertyRepresentation
     * @param $keyName string
     * @param $flexionsType string
     * @return string
     */
    private static function _decodingFunctionFor($property,$keyName,$flexionsType){
        $isNotOptionnal = ($property->required || $property->default != NULL );
        switch ($flexionsType) {
            case FlexionsTypes::STRING:
                if ($isNotOptionnal){
                    return 'String(decoder.decodeObjectOfClass(NSString.self, forKey: "'.$keyName.'")! as NSString)';
                }else{
                    return 'String(decoder.decodeObjectOfClass(NSString.self, forKey:"'.$keyName.'") as NSString?)';
                }
            case FlexionsTypes::INTEGER:
                return 'decoder.decodeIntegerForKey("'.$keyName.'") ';
            case FlexionsTypes::BOOLEAN:
                return 'decoder.decodeBoolForKey("'.$keyName.'") ';
            case FlexionsTypes::OBJECT:
                //return 'decodeObjectForKey("'.$keyName.'") ';
                $instanceOf=$property->instanceOf;
              /*
                if (strpos($instanceOf,'Alias')!==false){
                    $instanceOf="Alias";
                }
              */
              return  'decoder.decodeObjectOfClass('.$instanceOf.'.self, forKey: "'.$keyName.'")'.($isNotOptionnal ?'! ':' ');
            case FlexionsTypes::COLLECTION:
                if ($property->instanceOf == FlexionsTypes::STRING ){
                    return  'decoder.decodeObjectOfClasses(NSSet(array: [NSArray.classForCoder(),NSString.self]), forKey: "'.$keyName.'")'.($isNotOptionnal ?'! ':' ');
                }else if($property->instanceOf == FlexionsTypes::INTEGER || $property->instanceOf == FlexionsTypes::DOUBLE || $property->instanceOf == FlexionsTypes::FLOAT){
                    return  'decoder.decodeObjectOfClasses(NSSet(array: [NSArray.classForCoder(),NSNumber.self]), forKey: "'.$keyName.'")'.($isNotOptionnal ?'! ':' ');
                }else{
                    return  'decoder.decodeObjectOfClasses(NSSet(array: [NSArray.classForCoder(),'.$property->instanceOf.'.classForCoder()]), forKey: "'.$keyName.'")'.($isNotOptionnal ?'! ':' ');
                }

            case FlexionsTypes::ENUM:
                // .$asString.' '. ucfirst($property->emumPreciseType)
                // User.Status(rawValue:String(decoder.decodeObjectOfClass(NSString.self, forKey: "status")! as NSString))!
                return $property->emumPreciseType.'(rawValue:'.GenerativeHelperForSwift::_decodingFunctionFor($property,$keyName,$property->instanceOf).')'.($isNotOptionnal ?'! ':' ');
            case FlexionsTypes::DICTIONARY;
                return  'decoder.decodeObjectOfClasses(NSSet(array: [NSDictionary.classForCoder(),NSString.classForCoder(),NSNumber.classForCoder(),NSObject.classForCoder(),NSSet.classForCoder()]), forKey: "'.$keyName.'")';
            case FlexionsTypes::FLOAT:
                return 'decoder.decodeFloatForKey("'.$keyName.'") ';
            case FlexionsTypes::DOUBLE:
                return 'decoder.decodeDoubleForKey("'.$keyName.'") ';
            case FlexionsTypes::BYTE:
                return 'decoder.decodeBytesForKey("'.$keyName.'") ';
            case FlexionsTypes::DATETIME:
                if ($isNotOptionnal){
                    return 'decoder.decodeObjectOfClass(NSDate.self, forKey: "'.$keyName.'")! as NSDate';
                }else{
                    return 'decoder.decodeObjectOfClass(NSDate.self, forKey:"'.$keyName.'") as NSDate?';
                }
            case FlexionsTypes::URL :
                if ($isNotOptionnal){
                    return 'decoder.decodeObjectOfClass(NSURL.self, forKey: "'.$keyName.'")! as NSURL';
                }else{
                    return 'decoder.decodeObjectOfClass(NSURL.self, forKey:"'.$keyName.'") as NSURL?';
                }
            case FlexionsTypes::FILE :
                if ($isNotOptionnal){
                    return 'decoder.decodeObjectOfClass(NSURL.self, forKey: "'.$keyName.'")! as NSURL';
                }else{
                    return 'decoder.decodeObjectOfClass(NSURL.self, forKey:"'.$keyName.'") as NSURL?';
                }
            case FlexionsTypes::DATA:
                if ($isNotOptionnal){
                    return 'decoder.decodeObjectOfClass(NSData.self, forKey: "'.$keyName.'")! as NSData';
                }else{
                    return 'decoder.decodeObjectOfClass(NSData.self, forKey:"'.$keyName.'") as NSData?';
                }
            case FlexionsTypes::NOT_SUPPORTED:
                return FlexionsTypes::NOT_SUPPORTED;
                break;
            default :
                return FlexionsTypes::VOID;
                break;
        }
    }



    /**
     * @param $d ActionRepresentation || EntityRepresentation
     * @param $increment integer
     */
    static  function echoBodyOfEncodeWithCoder($d,$increment){

        // NSCoding support for entities and parameters classes.
        // $d may be ActionRepresentation or EntityRepresentation
        $isEntity=($d instanceof EntityRepresentation);

        while ($isEntity?$d->iterateOnProperties():$d->iterateOnParameters() === true) {

            /* @var $property PropertyRepresentation */
            $property = $isEntity?$d->getProperty():$d->getParameter();
            if ($isEntity==true && $property->isSerializable==false){
                continue;
            }
            if (!isset($property->customSerializationMapping)){
                GenerativeHelperForSwift::_echoPropertyForEncodeWithCoder($property,$increment);
            }else {
                // RECURSIVE CALL FOR CUSTOMSERIALIZATION
                foreach ($property->customSerializationMapping as $property) {
                    GenerativeHelperForSwift::_echoPropertyForEncodeWithCoder($property, $increment);
                }
            }

        }
    }

    /**
     * @param $property PropertyRepresentation
     * @param $increment integer
     */
    static private function _echoPropertyForEncodeWithCoder($property, $increment) {
        $name = $property->name;
        $incrementPlusOne=$increment+1;
        $securizedName=$name;

        $shouldUseIfString=($property->required===false);
        if (isset($property->default) && $property->default!='' && $property->default!=' ' && $property->required==false ){
            $shouldUseIfString=false;
        }

        // We may enclose the encoding within a it let ... { ... } expression
        // to unwrap optionnals.

        if ($shouldUseIfString){
            $securizedName=str_replace(".","_",$name);
            $currentIncrement=$incrementPlusOne;
            echoIndentCR('if let '.$securizedName.' = self.'.$name.' {', $increment);
        }else{
            $currentIncrement=$increment;
        }
        $encodingFunction=NULL;
        if (!isset($property->type)){
            echoIndentCR('//' . $name . ' HAS NOT BEEN GENERATED (GENERATIVE TEMPLATE NEEDS TO BE AMENDED)' , $increment);
            return;
        }
        if ($property->type===FlexionsTypes::NOT_SUPPORTED){
            echoIndentCR('//'.$name .'is not supported' , $increment);
            return;
        }

        $keyToEncode=$securizedName;
        if ($property->type===FlexionsTypes::ENUM && ($property->instanceOf===FlexionsTypes::STRING || $property->instanceOf===FlexionsTypes::INTEGER)){
            //Casting is required
            $keyToEncode=$securizedName.'.rawValue ';
        }

        if (!$shouldUseIfString){
            $keyToEncode='self.'.$keyToEncode;
        }

        echoIndentCR('coder.'.GenerativeHelperForSwift::_encodingFunctionFor($property->type,$property->instanceOf).'('.$keyToEncode.',forKey:"'. $name .'")' , $currentIncrement);
        if ($shouldUseIfString){
            echoIndentCR('}', $increment);
        }
    }


    /**
     * @param $flexionsType
     * @param string $instanceOf
     * @return string
     */
    private static function _encodingFunctionFor($flexionsType,$instanceOf='UNDEFINED'){
        switch ($flexionsType) {
            case FlexionsTypes::STRING:
                return 'encodeObject';
            case FlexionsTypes::INTEGER:
                return 'encodeInteger';
            case FlexionsTypes::BOOLEAN:
                return 'encodeBool';
            case FlexionsTypes::OBJECT:
                return 'encodeObject';
            case FlexionsTypes::COLLECTION:
                return 'encodeObject';
            case FlexionsTypes::ENUM;
                // We have 3 levels :
                // When the type is an ENUM, you can specify its precise type
                // Swift enum can be typed. We want to be able to cast the enums.
                // E.g : property status type=enum, instanceOf=string , enumPreciseType=User.status
                return GenerativeHelperForSwift::_encodingFunctionFor($instanceOf);
            case FlexionsTypes::FILE:
                return 'encodeObject';
            case FlexionsTypes::DICTIONARY:
                return 'encodeObject';
            case FlexionsTypes::FLOAT:
                return 'encodeFloat';
            case FlexionsTypes::DOUBLE:
                return 'encodeDouble';
            case FlexionsTypes::BYTE:
                return 'encodeBytes';
            case FlexionsTypes::DATETIME:
                return 'encodeObject';
            case FlexionsTypes::URL:
                return 'encodeObject';
            case FlexionsTypes::DATA:
                return 'encodeObject';
            case FlexionsTypes::NOT_SUPPORTED:
                return FlexionsTypes::NOT_SUPPORTED;
            default :
                return FlexionsTypes::VOID;
        }
    }

}

?>#BMS#->{"filename":"FlexionsSwiftLang.php","checksum":3765346128,"relativePath":"BartlebyFlexions\/src\/modules\/Languages\/FlexionsSwiftLang.php","size":1651}<-#BME#
<?php

require_once FLEXIONS_ROOT_DIR . 'flexions/representations/flexions/IFlexionsLanguageMapping.php';
require_once FLEXIONS_ROOT_DIR . 'flexions/representations/flexions/FlexionsTypes.php';

class FlexionsSwiftLang implements IFlexionsLanguageMapping {

    /**
     * @param  $flexionsType
     * @return String the native type
     */
    static function nativeTypeFor($flexionsType){
        switch ($flexionsType) {
            case FlexionsTypes::STRING:
                return 'String';
            case FlexionsTypes::INTEGER:
                return 'Int';
            case FlexionsTypes::BOOLEAN:
                return 'Bool';
            case FlexionsTypes::OBJECT:
                return 'Object';//Pseudo type (the instanceOf type will apply)
            case FlexionsTypes::COLLECTION:
                return 'Collection';//Pseudo type (the instanceOf type will apply)
            case FlexionsTypes::ENUM:
                return 'Emum';//Pseudo type (the instanceOf type will apply)
            case FlexionsTypes::FILE:
                return 'NSURL';
            case FlexionsTypes::FLOAT:
                return 'Float';
            case FlexionsTypes::DOUBLE:
                return 'Double';
            case FlexionsTypes::BYTE:
                return 'UInt8';
            case FlexionsTypes::DATETIME:
                return 'NSDate';
            case FlexionsTypes::URL:
                return 'NSURL';
            case FlexionsTypes::DICTIONARY:
                return '[String:AnyObject]';
            case FlexionsTypes::DATA:
                return 'NSData';
        }
        return FlexionsTypes::NOT_SUPPORTED;
    }
}#BMS#->{"filename":"LGPL.template.php","checksum":1627426981,"relativePath":"BartlebyFlexions\/src\/modules\/Licenses\/LGPL.template.php","size":824}<-#BME#
<?php /* @var $f Flexed */ ?>
// This file is part of "<?php echo $f->projectName."\"\n";?>
// 
// "<?php echo $f->projectName;?>" is free software: you can redistribute it and/or modify
// it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// "<?php echo $f->projectName;?>" is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU LESSER GENERAL PUBLIC LICENSE for more details.
// 
// You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
// along with "<?php echo $f->projectName;?>"  If not, see <http://www.gnu.org/licenses/>
// 
#BMS#->{"filename":"ISwaggerDelegate.php","checksum":790965171,"relativePath":"BartlebyFlexions\/src\/modules\/SwaggerToFlexions\/ISwaggerDelegate.php","size":235}<-#BME#
<?php
/**
* Created by PhpStorm.
* User: bpds
* Date: 11/07/15
* Time: 10:36
*/

interface ISwaggerDelegate{
/**
* @param $prefix
* @param $baseClassName
* @return string
*/
function getCollectionClassName($prefix,$baseClassName);
}
?>#BMS#->{"filename":"README.md","checksum":1861028345,"relativePath":"BartlebyFlexions\/src\/modules\/SwaggerToFlexions\/README.md","size":3727}<-#BME#
# Swagger to Flexions 
 
**TODO CHECK the IMPLEMENTATION AND VALIDATE THIS DOCUMENT**
 
Our modeling approach was inspired by SWAGGER 2.0. **But it is not strictly compliant!**
We have added optional extensions : Bartleby Metadata. 
That's enough for modeling APIS and Entities with Flexions.


NOT SUPPORTED ANYMORE? 
IMPORTANT to support login and logout generation you must include the signature in the path
And add a security key that maps to the security definitions.

SWAGGER complete specs are available accessible [on github] (https://github.com/swagger-api/swagger-spec/blob/master/versions/2.0.md)

## Not supported ##

- "object" + "additionalProperties" Swagger usage of additionalProperties is not compliant with [JSON Schema](http://json-schema.org/example2.html)
- "consumes" and "produces" (as we generate both client and servers the generation template can decide to use JSON or XML or anything else)
- Resolution of $ref we extract the entity from the reference
- We prefer to use a fully typed approach so you should define (in definitions) and $ref an entity as much as possible.

# Actions extensions

# Entities extensions

## Entities Metadata 

The metadata model is extensible.

```Javascript
     		
			 "metadata": {
                "urdMode": false,
                "persistsLocallyOnlyInMemory": false,
                "allowDistantPersistency": false,
                "undoable":false,
                "groupable":true
            }
```
            

### Currently used keys :

+ urdMode (to specify to the generator if it should generate  a URD or CRUD stack. It can be used in templates by calling ```$entityRepresentation->usesUrdMode()```
+ persistsLocallyOnlyInMemory ( is saved locally?)
+ allowDistantPersistency (create a CRUD stack)
+ undoable  ( undo manager support )
+ groupable (groupable on auto commit)


## Entities explicitType 

You can add an explicitType for an entity (that as not been generated)

```javascript
     "A": {
            "explicitType": "NSObject",
            "description": "A is ...",
            "allOf": []
            }
```


# Properties extensions


## dynamic 
mark as dynamic 

## serializable

In this case we don't want the property proxy to serialized

```
  "proxy": {
                            "explicitType": "JObject",
                            "description": "",
                            "dynamic": false,
                            "serializable":false
                        },
```


## observable

If a property is marked as observable any change will mark its parent as changed.

```
  "fruit": {
                            ...
                            "observable":false
                        },
```

## cryptable

If a property is marked as cryptable on serialization it should be crypted.

```
  "password": {
                            ...
                            "cryptable":true
                        },
```




## Properties explicitType 

You can specify an explicit type (that is not necessarly generated) by specifying the type "object".

```javascript
 "dmgCard": {
	"description": "The associated dmg Card",
    "type": "object",
    "explicitType":"BsyncDMGCard"
},
```

## Properties dictionaries

You can use the **dictionary** type, for parameters & properties

```javascript
"parameters":[
	{
		"in": "body",
		"name": "sort",
		"description": "the sort (MONGO DB)",
		"required": true,
		"type": "dictionary"
	}
]
```


# Tip and Tricks 

You can add **default native functions** if your generated targets can afford it!


### native functions

```javascript
      "startDate": {
         "type": "date",
       	"definition": "the starting date",
          "default": "NSDate()"
	}             
```#BMS#->{"filename":"SwaggerDelegate.php","checksum":2303217113,"relativePath":"BartlebyFlexions\/src\/modules\/SwaggerToFlexions\/SwaggerDelegate.php","size":511}<-#BME#
<?php

require_once 'ISwaggerDelegate.php';

// If necessary we define COLLECTION_OF
if (!defined('COLLECTION_OF')) {
    define("COLLECTION_OF", "CollectionOf");
}

/**
 * Class XcdataModelDelegate
 * Default implementation
 */
class SWaggerDelegate implements ISwaggerDelegate {

    /**
     * @param $prefix
     * @param $baseClassName
     * @return string
     */
    function getCollectionClassName($prefix, $baseClassName) {
        return ucfirst($prefix) . COLLECTION_OF . $baseClassName;
    }
}

?>#BMS#->{"filename":"SwaggerToFlexionsRepresentations.php","checksum":1899232455,"relativePath":"BartlebyFlexions\/src\/modules\/SwaggerToFlexions\/SwaggerToFlexionsRepresentations.php","size":25446}<-#BME#
<?php

require_once FLEXIONS_ROOT_DIR . 'flexions/representations/flexions/FlexionsRepresentationsIncludes.php';
require_once FLEXIONS_MODULES_DIR . 'SwaggerToFlexions/ISwaggerDelegate.php';

if (!defined('SWAGGER_VERSION')) {

    define('SWAGGER_VERSION', 'swagger');
    define('SWAGGER_INFO', 'info');
    define('SWAGGER_TITLE', 'title');
    define('SWAGGER_HOST', 'host');
    define('SWAGGER_BASE_PATH', 'basePath');
    define('SWAGGER_TAGS', 'tags');
    define('SWAGGER_SCHEMES', 'schemes');
    define('SWAGGER_PATHS', 'paths');
    define('SWAGGER_SECURITY_DEFINITIONS', 'securityDefinitions');
    define('SWAGGER_DEFINITIONS', 'definitions');
    define('SWAGGER_EXTERNAL_DOCS', 'externalDocs');
    define('SWAGGER_TYPE', 'type');
    define('SWAGGER_ENUM', 'enum');
    define('SWAGGER_OBJECT', 'object');
    define('SWAGGER_PROPERTIES', 'properties');
    define('SWAGGER_DESCRIPTION', 'description');
    define('SWAGGER_FORMAT', 'format');
    define('SWAGGER_ITEMS', 'items');
    define('SWAGGER_REF', '$ref');
    define('SWAGGER_DEFAULT','default');
    define('SWAGGER_ALL_OF','allOf');// Inheritance and composition
    define('SWAGGER_OPERATION_ID', 'operationId');
    define('SWAGGER_PARAMETERS', 'parameters');
    define('SWAGGER_NAME', 'name');
    define('SWAGGER_SCHEMA', 'schema');
    define('SWAGGER_REQUIRED', 'required');
    define('SWAGGER_RESPONSES', 'responses');
    define('SWAGGER_OAUTH_AUTHORIZATION_URL','authorizationUrl');
    define('SWAGGER_OAUTH_SCOPES','scopes');
    define('SWAGGER_IN','in');
    define('SWAGGER_SECURITY','security');

    define ('SWAGGER_HEADERS','headers');

    define('EXTENDED_INSTANCE_OF','instanceOf');
    define('EXTENDED_IS_DYNAMIC','dynamic');
    define('EXTENDED_SERIALIZABLE','serializable');
    define('EXTENDED_OBSERVABLE','observable');
    define('EXTENDED_CRYPTABLE','cryptable');// Crypted on serialization
    define('EXTENDED_ENUM_PRECISE_TYPE','emumPreciseType');
    define('EXTENDED_EXPLICIT_TYPE','explicitType'); // used to pass an explicit type that has not been generated

    define('EXTENDED_METADATA','metadata');
    define('USE_COMPOSITION_MODE',true); // If set to true entities are composed else they use inheritance
}



/**
* Check README.md
 * Class SwaggerToFlexionsRepresentations
 */
class SwaggerToFlexionsRepresentations {


    /**
     * @param $descriptorFilePath
     * @param string $nativePrefix
     * @param ISwaggerDelegate|null $delegate
     * @param array $signInSignature
     * @param array $signOutSignature
     * @return ProjectRepresentation|void
     * @throws Exception
     */
    function projectRepresentationFromSwaggerJson($descriptorFilePath, $nativePrefix = "", ISwaggerDelegate $delegate=null,array $signInSignature=array(),array $signOutSignature=array(),$useCompositionMode=USE_COMPOSITION_MODE) {

        if (!isset($delegate)) {
            fLog("projectRepresentationFromSwaggerJson.projectRepresentationFromSwaggerJson() module requires an ISwaggerDelegate", true);
            return;
        }

        fLog("Invoking projectRepresentationFromSwaggerJson.projectRepresentationFromSwaggerJson() on " . $descriptorFilePath . cr() . cr(), true);

        // #1 Create the ProjectRepresentation

        $r = new ProjectRepresentation ();
        $r->classPrefix = $nativePrefix;
        $r->name = 'NO_NAME';
        $s = file_get_contents($descriptorFilePath);
        $json = json_decode($s, true);
        $r->metadata = $json;// We store the raw descriptor as a metadata

        if (array_key_exists(SWAGGER_INFO, $json)) {
            if (array_key_exists(SWAGGER_INFO, $json)) {
                $nameOfProject = $json[SWAGGER_INFO][SWAGGER_TITLE];
                $nameOfProject = str_replace(' ', '_', $nameOfProject);
                $r->name = $nameOfProject;
            }
        }

        if ($json[SWAGGER_VERSION] = '2.0') {

            $r->baseUrl = $json[SWAGGER_SCHEMES][0] . '://' . $json[SWAGGER_HOST] . $json[SWAGGER_BASE_PATH];
            $r->apiVersion = rtrim($json[SWAGGER_BASE_PATH], '/');

            // Store a reference of PermissionRepresentation to be cloned in each action.
            if (array_key_exists(SWAGGER_SECURITY_DEFINITIONS, $json)) {
                $securityDefinitions = $json[SWAGGER_SECURITY_DEFINITIONS];
                foreach ($securityDefinitions as $name => $descriptor) {
                   if(array_key_exists(SWAGGER_TYPE, $descriptor)){
                       $type=strtolower($descriptor[SWAGGER_TYPE]);
                       /*@var $p PermissionRepresentation */
                       $p = null;
                       if($type=="oauth2"){
                           $p=new PermissionRepresentationOauth();
                           $p->setPermissionName($name);
                           if(array_key_exists(SWAGGER_OAUTH_AUTHORIZATION_URL, $descriptor)){
                             $p->authorizationUrl=$descriptor[SWAGGER_OAUTH_AUTHORIZATION_URL];
                           }
                           if(array_key_exists(SWAGGER_OAUTH_SCOPES, $descriptor)){
                               $scopes=$descriptor[SWAGGER_OAUTH_SCOPES];
                               foreach ($scopes as $scopeName=>$description) {
                                   if(isset($scopeName) && isset($description)){
                                       $p->addScope(array($scopeName=>$description));
                                   }else{
                                       throw new Exception('Invalid scope' . json_encode($scopes),90);
                                   }
                                }
                           }
                       }
                       if($type=="apikey"){
                           $p=new PermissionRepresentationWithAccessRights();
                           $p->setPermissionName($name);
                           if(array_key_exists(SWAGGER_IN, $descriptor)){
                               $in=strtolower($descriptor[SWAGGER_IN]);
                               if($in=='header'){
                                   $p->setLocation(PermissionLocation::IN_HEADERS);
                               }else{
                                   $p->setLocation(PermissionLocation::IN_PARAMETERS);
                               }
                           }

                       }
                       if(isset ($p)){
                           $this->_permissionsByName[$name] = $p;
                       }else{
                           throw new Exception('Unsupported PermissionRepresentation type :' . $type,100);
                       }

                    }else{
                       throw new Exception('Malformed security definition name:' . $name.' descriptor as a json:'.json_encode($descriptor),101);
                   }
                }
            }


            // #2 Extract the entities EntityRepresentation
            //from definitions :
            if (array_key_exists(SWAGGER_DEFINITIONS, $json)) {
                $definitions = $json[SWAGGER_DEFINITIONS];
                foreach ($definitions as $entityName => $descriptor) {
                    $e = new EntityRepresentation();

                    if(array_key_exists(SWAGGER_DESCRIPTION,$descriptor)){
                        $e->description=$descriptor[SWAGGER_DESCRIPTION];
                    }

                    $e->name = $nativePrefix . ucfirst($entityName);

                    $properties=array();


                    $explicitTypeIsDefined=array_key_exists(EXTENDED_EXPLICIT_TYPE, $descriptor);
                    if ( array_key_exists(SWAGGER_TYPE, $descriptor) ||  $explicitTypeIsDefined ){

                        // It is root Object not AllOf
                        if ($explicitTypeIsDefined){
                            $explicitType = $descriptor[EXTENDED_EXPLICIT_TYPE];
                            $e->instanceOf=$explicitType;
                        }

                        if ($descriptor[SWAGGER_TYPE] === SWAGGER_OBJECT || $explicitTypeIsDefined ) {
                            if (array_key_exists(SWAGGER_PROPERTIES, $descriptor)) {
                                $properties = $descriptor[SWAGGER_PROPERTIES];
                            }
                        }
                    } else {
                        // Entity is not a base object
                        if(array_key_exists(SWAGGER_ALL_OF,$descriptor)){
                            $allOF=$descriptor[SWAGGER_ALL_OF];
                            $refs=array();
                            $parentRef=NULL;
                            foreach ($allOF as $currentItem) {
                                if (is_array($currentItem)){
                                    if(array_key_exists(SWAGGER_REF, $currentItem)){

                                        if ($useCompositionMode == true) {
                                            // COMPOSITION
                                            $keyForRef=$currentItem[SWAGGER_REF];
                                            $keyForRef=str_replace("#/definitions/","",$keyForRef);
                                            $subDefinition=$definitions[$keyForRef];
                                            if(array_key_exists(SWAGGER_PROPERTIES, $subDefinition)){
                                                $properties=$subDefinition[SWAGGER_PROPERTIES];
                                            }
                                        }else{
                                            // INHERITANCE :
                                            $parentRef=$currentItem[SWAGGER_REF];
                                            $refs[]=$parentRef;
                                        }

                                    }
                                    if(array_key_exists(SWAGGER_PROPERTIES, $currentItem)){
                                        $currentItemProperties=$currentItem[SWAGGER_PROPERTIES];
                                        $properties=array_merge($properties,$currentItemProperties);
                                    }
                                }
                            }

                            if(count($refs)==1){
                                // Inheritance support
                                $e->instanceOf=$this->typeFromRef($parentRef,$nativePrefix);
                            }else if( count($refs)>1){
                                // ??? WE DONNOT SUPPORT MULTIPLE INHERITANCE
                            }
                            if(array_key_exists(SWAGGER_PROPERTIES,$allOF)){
                                $properties=$allOF[SWAGGER_PROPERTIES];
                            }
                        }
                    }
                    // Parse the properties
                    foreach ($properties as $propertyName => $propertyValue) {
                        $e->properties[] = $this->_extractPropertyFrom($propertyName, $propertyValue, $nativePrefix);
                    }

                    // Entity metadata
                    if (array_key_exists(EXTENDED_METADATA, $descriptor)) {
                        $e->metadata = $descriptor[EXTENDED_METADATA];
                    }
                    $r->entities[] = $e;
                }

            }

            //#3 Extract the actions ActionRepresentation
            if (array_key_exists(SWAGGER_PATHS, $json)) {
                $paths = $json[SWAGGER_PATHS];
                foreach ($paths as $path => $pathDescriptor) {

                    foreach ($pathDescriptor as $method => $methodPathDescriptor) {
                        $className = '';

                        if (array_key_exists(SWAGGER_OPERATION_ID, $methodPathDescriptor)) {
                            $className = $nativePrefix . ucfirst($methodPathDescriptor[SWAGGER_OPERATION_ID]);
                        } else {
                            $className = $nativePrefix . $this->_classNameForPath($path);
                        }
                        $action = new ActionRepresentation();
                        $action->class = $className;
                        $action->path = $path;
                        $action->httpMethod = strtoupper($method);

                        if(array_key_exists(SWAGGER_TAGS,$methodPathDescriptor)){
                            $tags=$methodPathDescriptor[SWAGGER_TAGS];
                            if(is_array($tags)&&count($tags)>0){
                                $action->collectionName=$tags[0];
                            }
                        }

                        if (array_key_exists(SWAGGER_PARAMETERS, $methodPathDescriptor)) {
                            $parameters = $methodPathDescriptor[SWAGGER_PARAMETERS];
                            foreach ($parameters as $parameter) {
                                if (array_key_exists(SWAGGER_NAME, $parameter)) {
                                    $property = $this->_extractPropertyFrom($parameter[SWAGGER_NAME], $parameter, $nativePrefix);
                                    $action->parameters[] = $property;
                                }
                            }
                        }

                        if (array_key_exists(SWAGGER_RESPONSES, $methodPathDescriptor)) {
                            $responses = $methodPathDescriptor[SWAGGER_RESPONSES];
                            foreach ($responses as $name => $response) {
                                if ($name=="default"){
                                    $name="200";// We consider default as a succes.
                                }
                                $property = $this->_extractPropertyFrom("$name", $response, $nativePrefix);
                                $action->responses[] = $property;
                            }
                        }

                        // security

                        if (array_key_exists(SWAGGER_SECURITY, $methodPathDescriptor)) {
                            $security = $methodPathDescriptor[SWAGGER_SECURITY];
                            foreach ($security as $collection) {
                                foreach ($collection as $securityItemName=>$securityItem) {
                                    // The security context is extracted using the action name semantics.


                                    $actionPath=strtolower($action->class);
                                    $actionPath=str_replace('_','',$actionPath);
                                    $actionPath=str_replace('-','',$actionPath);

                                    $containsSignInSignature=false;
                                    foreach ($signInSignature as $signature ) {
                                        if((strpos($actionPath,$signature)!==false)){
                                            $containsSignInSignature=true;
                                        }
                                    }

                                    $containsSignOutSignature=false;
                                    foreach ($signOutSignature as $signature ) {
                                        if((strpos($actionPath,$signature)!==false)){
                                            $containsSignOutSignature=true;
                                        }
                                    }
                                    if($containsSignInSignature==true){
                                        $action->security=$this->getContextPermissionByName($securityItemName,RelationToPermission::PROVIDES);
                                    }else if($containsSignOutSignature==true){
                                        $action->security=$this->getContextPermissionByName($securityItemName,RelationToPermission::DISCARDS);
                                    }else{
                                        // By default we consider that the security is required.
                                        $action->security=$this->getContextPermissionByName($securityItemName,RelationToPermission::REQUIRES);
                                    }
                                }
                            }
                        }

                        // Action metadata
                        if (array_key_exists(EXTENDED_METADATA, $methodPathDescriptor)) {
                            $action->metadata = $methodPathDescriptor[EXTENDED_METADATA];
                        }
                        $r->actions[] = $action;
                    }
                }
            }
        } else {
            throw new Exception('Unsupported swagger version' . $json[SWAGGER_VERSION],0);
        }
        return $r;
    }



    private $_permissionsByName=array();


    /**
     * Returns the context for a given permission name
     * @param $name
     * @param string $relationToPermission
     * @throws exception
     * @return SecurityContextRepresentation
     */
    private function getContextPermissionByName($name,$relationToPermission=RelationToPermission::REQUIRES){

        $rtp=new RelationToPermission();
        if(!$rtp->isValid($relationToPermission)){
            throw new exception("invalid RelationToPermission the relation is not present in the enumeration : ".$relationToPermission,10);
        }

        if (array_key_exists($name,$this->_permissionsByName)) {
            $permission=$this->_permissionsByName[$name];
            $cloned=clone $permission;// We clone the permission
            $context=new SecurityContextRepresentation();
            $context->setPermission($cloned);
            $context->setRelation($relationToPermission);
            return $context;
        }else{
            throw new Exception('Permission with name : '.$name.' does not exists :',11);
        }
    }



    /**
     * @param string $propertyName
     * @param $propertyValue
     * @param string $nativePrefix
     * @return PropertyRepresentation
     */
    private function _extractPropertyFrom($propertyName, $propertyValue, $nativePrefix) {
        // type, format, description
        $propertyR = new PropertyRepresentation();
        $propertyR->name = $propertyName;
        if (is_array($propertyValue)) {
            $context=$propertyValue;
            if (array_key_exists(SWAGGER_SCHEMA, $propertyValue)) {
                // Seen in parameters.
                $context=$propertyValue[SWAGGER_SCHEMA];
            }
            // Most common
            $this->_parsePropertyType($propertyR, $context, $nativePrefix);
        }
        return $propertyR;
    }


    /**
     * Sub parsing method used to factorize parsing (as swagger is not fully regular)
     *
     * @param PropertyRepresentation $propertyR
     * @param $dictionary
     * @param $nativePrefix
     */
    private function _parsePropertyType(PropertyRepresentation $propertyR, $dictionary, $nativePrefix) {
        if (array_key_exists(SWAGGER_ITEMS, $dictionary)) {
            $subDictionary = $dictionary[SWAGGER_ITEMS];
            $propertyR->type = FlexionsTypes::COLLECTION;
            $this->_propertyFromDictionary($propertyR,$subDictionary,$nativePrefix);
        }else{
            $this->_propertyFromDictionary($propertyR,$dictionary,$nativePrefix);
        }
    }

    /**
     * @param $propertyR PropertyRepresentation
     * @param $dictionary
     */
    private function _propertyFromDictionary($propertyR,$dictionary,$nativePrefix){

        if (array_key_exists(SWAGGER_ENUM, $dictionary)) {
            $propertyR->type = FlexionsTypes::ENUM;
            $enums = $dictionary[SWAGGER_ENUM];
            foreach ($enums as $enumerableElement) {
                $propertyR->enumerations[] = $enumerableElement;
            }
            if (array_key_exists(SWAGGER_ENUM, $dictionary)){
                $propertyR->emumPreciseType=$dictionary[EXTENDED_ENUM_PRECISE_TYPE];
            }else {
                $propertyR->emumPreciseType = "Enum extended type is not defined for property " . $propertyR->name ;
            }

        }

        $swaggerType = null;
        if (array_key_exists(SWAGGER_TYPE, $dictionary)) {
            $swaggerType = $dictionary[SWAGGER_TYPE];
            $propertyR->metadata['SWAGGER_TYPE'] = $swaggerType;
        }

        if (array_key_exists(EXTENDED_INSTANCE_OF, $dictionary)) {
            $propertyR->instanceOf= $dictionary[EXTENDED_INSTANCE_OF];;
        }

        if (array_key_exists(EXTENDED_IS_DYNAMIC, $dictionary)) {
            $propertyR->isDynamic=$dictionary[EXTENDED_IS_DYNAMIC];
        }

        $swaggerFormat = null;
        if (array_key_exists(SWAGGER_FORMAT, $dictionary)) {
            $swaggerFormat = $dictionary[SWAGGER_FORMAT];
            $propertyR->metadata['SWAGGER_FORMAT'] = $swaggerFormat;
        }

      if (array_key_exists(SWAGGER_REF, $dictionary)) {
            $ref = $dictionary[SWAGGER_REF];
            // Its it a single reference.
            if (!isset($propertyR->type)) {
                $propertyR->type = FlexionsTypes::OBJECT;
            }
             if (!isset($propertyR->instanceOf)) {
              $propertyR->instanceOf = $this->typeFromRef($ref, $nativePrefix);
            }
            $propertyR->isGeneratedType = true;
        } else {

            if (($propertyR->type == FlexionsTypes::COLLECTION) || $propertyR->type == FlexionsTypes::ENUM ) {
                if (!isset($propertyR->instanceOf)){
                    $propertyR->instanceOf = $this->_swaggerTypeToFlexions($swaggerType, $swaggerFormat);
                }
            } else if (($propertyR->type == FlexionsTypes::OBJECT)&&(isset($propertyR->instanceOf))){
                $propertyR->type=$propertyR->instanceOf;
            }else{
                $propertyR->type = $this->_swaggerTypeToFlexions($swaggerType, $swaggerFormat);
            }
        }


        if (array_key_exists(SWAGGER_DESCRIPTION, $dictionary)) {
            $propertyR->description = $dictionary[SWAGGER_DESCRIPTION];
        }

        // EXPLICIT TYPE EXTENSION
        if (array_key_exists(EXTENDED_EXPLICIT_TYPE, $dictionary)) {
            $explicitType = $dictionary[EXTENDED_EXPLICIT_TYPE];
            $propertyR->instanceOf=$explicitType;
            if ($propertyR->type===FlexionsTypes::NOT_SUPPORTED){
                $propertyR->type=FlexionsTypes::OBJECT;
            }
            $propertyR->isGeneratedType=true;// Even if its false
        }
        
        // DISCREET SERIALIZATION SUPPORT
        if (array_key_exists(EXTENDED_SERIALIZABLE, $dictionary)) {
            $propertyR->isSerializable = $dictionary[EXTENDED_SERIALIZABLE];
        }

        // DISCREET OBSERVABLE SUPPORT
        if (array_key_exists(EXTENDED_OBSERVABLE, $dictionary)) {
            $propertyR->isObservable = $dictionary[EXTENDED_OBSERVABLE];
        }

        // DISCREET CRYPTABLE SUPPORT
        if (array_key_exists(EXTENDED_CRYPTABLE, $dictionary)) {
            $propertyR->isCryptable = $dictionary[EXTENDED_CRYPTABLE];
        }

        if (array_key_exists(SWAGGER_REQUIRED, $dictionary)) {
            $propertyR->required = $dictionary[SWAGGER_REQUIRED];
        }
        if (array_key_exists(SWAGGER_DEFAULT, $dictionary)) {
            $propertyR->default = $dictionary[SWAGGER_DEFAULT];
        }
    }


    private  function typeFromRef($ref,$nativePrefix){
        // @todo resolve refs really  ?
        $components = explode('/', $ref);
        $instanceOf = end($components);
        $type=$nativePrefix . ucfirst($instanceOf); // We add the prefix
        return $type;
    }


    /**
     * @param $type
     * @param $format
     * @return string
     */
    private function _swaggerTypeToFlexions($type, $format) {
        $type = strtolower($type);
        if ($type == 'string') {
            return FlexionsTypes::STRING;
        }
        if ($type == 'integer') {
            return FlexionsTypes::INTEGER;
        }
        if ($type == 'long') {
            return FlexionsTypes::INTEGER;
        }
        if ($type == 'float') {
            return FlexionsTypes::FLOAT;
        }
        if ($type == 'double') {
            return FlexionsTypes::DOUBLE;
        }
        if ($type == 'byte') {
            return FlexionsTypes::BYTE;
        }
        if ($type == 'boolean') {
            return FlexionsTypes::BOOLEAN;
        }
        if ($type == 'file') {
            return FlexionsTypes::FILE;
        }
        // Non standard Swagger
        if ($type == 'url') {
            return FlexionsTypes::URL;
        }

        if ($type == 'date' || $type == 'dateTime') {
            return FlexionsTypes::DATETIME;
        }
        // EXTENSION TO SWAGGER

        if ($type == 'dictionary') {
           return FlexionsTypes::DICTIONARY;
        }

        if ($type == 'data') {
            return FlexionsTypes::DATA;
        }

        return FlexionsTypes::NOT_SUPPORTED;
    }

    /**
     * @param String $path
     * @return string
     */
    protected function _classNameForPath($path) {
        $components = explode('/', $path);
        $className = '';
        foreach ($components as $component) {
            preg_match('#\{(.*?)\}#', $component, $match);

            if (is_null($match) || count($match) == 0) {
                $className .= ucfirst($component);
            } else {
                $cp = $match[1];
                $className .= 'With' . ucfirst($cp);
            }
        }
        return $className;
    }
}

?>
}#BMS#->{"filename":"Pluralization.php","checksum":1371876850,"relativePath":"BartlebyFlexions\/src\/modules\/Utils\/Pluralization.php","size":4276}<-#BME#
<?php

// Extracted from https://github.com/whiteoctober/RestBundle/blob/master/Pluralization/Pluralization.php

class Pluralization{


    static function pluralize($word){
        $plurals = array(
            '/(quiz)$/i' => '\1zes',
            '/^(ox)$/i' => '\1en',
            '/([m|l])ouse$/i' => '\1ice',
            '/(matr|vert|ind)ix|ex$/i' => '\1ices',
            '/(x|ch|ss|sh)$/i' => '\1es',
            '/([^aeiouy]|qu)ies$/i' => '\1y',
            '/([^aeiouy]|qu)y$/i' => '\1ies',
            '/(hive)$/i' => '\1s',
            '/(?:([^f])fe|([lr])f)$/i' => '\1\2ves',
            '/sis$/i' => 'ses',
            '/([ti])um$/i' => '\1a',
            '/(buffal|tomat)o$/i' => '\1oes',
            '/(bu)s$/i' => '\1ses',
            '/(alias|status)/i' => '\1es',
            '/(octop|vir)us$/i' => '\1i',
            '/(ax|test)is$/i' => '\1es',
            '/s$/i' => 's',
            '/$/' => 's'
        );
        $uncountables = array(
            'equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep'
        );
        $irregulars = array(
            'person' => 'people',
            'man' => 'men',
            'child' => 'children',
            'sex' => 'sexes',
            'move' => 'moves'
        );
        $lowerCasedWord = strtolower($word);
        foreach ($uncountables as $uncountable) {
            if (substr($lowerCasedWord, (-1 * strlen($uncountable))) == $uncountable) {
                return $word;
            }
        }
        foreach ($irregulars as $plural => $singular) {
            if (preg_match('/(' . $plural . ')$/i', $word, $arr)) {
                return preg_replace(
                    '/(' . $plural . ')$/i',
                    substr($arr[0], 0, 1) . substr($singular, 1),
                    $word
                );
            }
        }
        foreach ($plurals as $rule => $replacement) {
            if (preg_match($rule, $word)) {
                return preg_replace($rule, $replacement, $word);
            }
        }
        return 'NOT_PLURALIZED';
    }

    static function singularize($word){
        $singulars = array(
            '/(quiz)zes$/i' => '\1',
            '/(matr)ices$/i' => '\1ix',
            '/(vert|ind)ices$/i' => '\1ex',
            '/^(ox)en/i' => '\1',
            '/(alias|status)es$/i' => '\1',
            '/([octop|vir])i$/i' => '\1us',
            '/(cris|ax|test)es$/i' => '\1is',
            '/(shoe)s$/i' => '\1',
            '/(o)es$/i' => '\1',
            '/(bus)es$/i' => '\1',
            '/([m|l])ice$/i' => '\1ouse',
            '/(x|ch|ss|sh)es$/i' => '\1',
            '/(m)ovies$/i' => '\1ovie',
            '/(s)eries$/i' => '\1eries',
            '/([^aeiouy]|qu)ies$/i' => '\1y',
            '/([lr])ves$/i' => '\1f',
            '/(tive)s$/i' => '\1',
            '/(hive)s$/i' => '\1',
            '/([^f])ves$/i' => '\1fe',
            '/(^analy)ses$/i' => '\1sis',
            '/((a)naly|(b)a|(d)iagno|(p)arenthe|(p)rogno|(s)ynop|(t)he)ses$/i' => '\1\2sis',
            '/([ti])a$/i' => '\1um',
            '/(n)ews$/i' => '\1ews',
            '/s$/i' => '',
        );
        $uncountables = array(
            'equipment', 'information', 'rice', 'money', 'species', 'series', 'fish', 'sheep'
        );
        $irregulars = array(
            'person' => 'people',
            'man' => 'men',
            'child' => 'children',
            'sex' => 'sexes',
            'move' => 'moves'
        );
        $lowerCasedWord = strtolower($word);
        foreach ($uncountables as $uncountable) {
            if (substr($lowerCasedWord, (-1 * strlen($uncountable))) == $uncountable) {
                return $word;
            }
        }
        foreach ($irregulars as $plural => $singular) {
            if (preg_match('/(' . $singular . ')$/i', $word, $arr)) {
                return preg_replace(
                    '/(' . $singular . ')$/i',
                    substr($arr[0], 0, 1) . substr($plural, 1),
                    $word
                );
            }
        }
        foreach ($singulars as $rule => $replacement) {
            if (preg_match($rule, $word)) {
                return preg_replace($rule, $replacement, $word);
            }
        }
        return 'NOT_SINGULARIZED';
    }
}#BMS#->{"filename":"NotesXcdata.txt","checksum":3249140636,"relativePath":"BartlebyFlexions\/src\/modules\/XcDataModelXMLImporter\/NotesXcdata.txt","size":1868}<-#BME#
Modeling tool constraint :
--------------------------------

"1-N relationship" will generate intermediary collection entity.
"1-1 relationship" will reference to an entity

You can reference an external relationship directly by using #2

NOT SUPPORTED :  automation of relationship reciprocity 
You need to manage manually reciprocity (future extension may generate setters to deal with reciprocity)


Modeling tool extensions
--------------------------------------


// Entities

#4 If an entity has in its userInfos  a key == "generate" and a value =="collection"
It will generate an independent collection class for this object.
(Normally collection are generated using to 1-n relationships);

#5 If an entity has in its userInfos  a key == "parent" and a value =="MyParent"
1- the entity prefix will not apply !!
2- this directive overrides the "parentEntity"

// Attributes or Properties 

#1 If a property has in its userInfos dictionary a key=="type" : 
"type:array" this directive will cast to the native type NSArray
"type:rect" this directive will cast to the native type CGrect 
Any of the ObjectiveCHelper->getSupportedNativeTypes() types should work.

#2 You can generate a relationship attribute adding to the property key == "relationship" value="ClassName"
This is used in WTMShelf to reference Watt classes (users=WattCollectionOfUser,...)

#3  If a property has in its userInfos dictionary a key=="extractible" : 
"extractible:NO" when the subgraph is copyied (extracted) the related entity is not copyed (it is null) 

// Attributes for relationship 
#6 "extractible:no" when the subgraph is copyied (extracted) the related entity is not copyed (it is null) 

NOTE  : 
For entities, properties (and relationship that are converted to properties)
We store any metadata (key values stored in userInfo) in an associative array for specific extension.
#BMS#->{"filename":"XcdataModelDelegate.Interface.php","checksum":3118474071,"relativePath":"BartlebyFlexions\/src\/modules\/XcDataModelXMLImporter\/XcdataModelDelegate.Interface.php","size":201}<-#BME#
<?php

interface XcdataModelDelegateInterface{
    /**
     * @param $prefix
     * @param $baseClassName
     * @return string
     */
    function getCollectionClassName($prefix,$baseClassName);
}
?>#BMS#->{"filename":"XcdataModelDelegate.php","checksum":2601788009,"relativePath":"BartlebyFlexions\/src\/modules\/XcDataModelXMLImporter\/XcdataModelDelegate.php","size":533}<-#BME#
<?php

require_once 'XcdataModelDelegate.Interface.php';

// If necessary we define COLLECTION_OF
if (!defined('COLLECTION_OF')){
    define ( "COLLECTION_OF","CollectionOf");
}

/**
 * Class XcdataModelDelegate
 * Default implementation
 */
class XcdataModelDelegate implements XcdataModelDelegateInterface{

    /**
     * @param $prefix
     * @param $baseClassName
     * @return string
     */
    function getCollectionClassName($prefix,$baseClassName){
        return ucfirst($prefix).COLLECTION_OF.$baseClassName;
    }
}

?>#BMS#->{"filename":"XcdatamodelXMLToFlexionsRepresentation.php","checksum":2870685613,"relativePath":"BartlebyFlexions\/src\/modules\/XcDataModelXMLImporter\/XcdatamodelXMLToFlexionsRepresentation.php","size":11931}<-#BME#
<?php

/*
Created by Benoit Pereira da Silva on 20/04/2013.
Copyright (c) 2013  http://www.chaosmos.fr

This file is part of Flexions

Flexions is free software: you can redistribute it and/or modify
it under the terms of the GNU LESSER GENERAL PUBLIC LICENSE as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Flexions is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU LESSER GENERAL PUBLIC LICENSE for more details.

You should have received a copy of the GNU LESSER GENERAL PUBLIC LICENSE
along with Flexions  If not, see <http://www.gnu.org/Licenses/>
*/


require_once FLEXIONS_ROOT_DIR . 'flexions/representations/flexions/FlexionsRepresentationsIncludes.php';

require_once 'XcdataModelDelegate.Interface.php';


/**
 * Class XCDDataXMLToFlexionsRepresentation
 */
class XCDDataXMLToFlexionsRepresentation {

	function projectRepresentationFromXcodeModel($descriptorFilePath, $nativePrefix = "", XcdataModelDelegateInterface $delegate) {

		if(!isset($delegate)){
			fLog ( "XCDDataXMLToFlexionsRepresentation.projectRepresentationFromXcodeModel() module requires a XcdataModelDelegate" , true );
			return;
		}

		fLog ( "Invoking XCDDataXMLToFlexionsRepresentation.projectRepresentationFromXcodeModel()" . cr () . cr (), true );
		
		$r = new ProjectRepresentation ();
		$r->classPrefix = $nativePrefix;
		$r->entities = array ();
		
		$dom = new DomDocument ();
		$pth = realpath ( $descriptorFilePath );
		$dom->load ( $pth );
		$entities = $dom->getElementsByTagName ( 'entity' );
		
		// /////////////////////////
		// ENTITIES
		// /////////////////////////
		
		fLog ( 	 "********************".cr(),true );
		fLog ( 	 "Parsing Entities".cr(),true );
		fLog ( 	 "********************".cr().cr(),true );
		
		foreach ( $entities as $entity ) {
			
			/* @var DOMNode $entity */
			$entityR = new EntityRepresentation ();
			$entityR->metadata=array();
			
			// ////////////////////////////////////////////////////////////////
			//
			// -> ENTITY
			// Stored in <model ><entity>...
			//
			// sample :
			// <entity name="Activity" representedClassName="Activity" syncable="YES">
			// ...
			//
			// ////////////////////////////////////////////////////////////////
			
			// We parse the attribute of the <entity> element
			
			if ($entity->hasAttribute ( "representedClassName" )) {
				$entityR->name = $entity->getAttribute ( "representedClassName" );
				fLog ( cr ().'Parsing : ' . $entityR->name . cr (), true );
				fLog ( '------------------------'. cr (), true );
			}
			if ($entity->hasAttribute ( "name" ) && strlen ( $entityR->name ) <= 1) {
				$entityR->name = $entity->getAttribute ( "name" );
			}
			if (strlen ( $entityR->name ) <= 1) {
				throw new Exception ( 'entity with no representedClassName and no name' );
			}
			
			$entityR->type = "object"; // Entities are objects
			if ($entity->hasAttribute ( "parentEntity" )) {
				$entityR->instanceOf = $nativePrefix . $entity->getAttribute ( "parentEntity" );
			} else {
				// We donnot qualifiy the instance
				// a requalification can be done according to the situation in
				// the template
			}
			
			// ////////////////////////////////////////////////////////////////
			//
			// -> ENTITY->metadata
			// Stored in <userInfo><entry> elements
			//
			// Sample :
			// <entity name="Activity" representedClassName="Activity" syncable="YES">
			// ...
			// <userInfo>
			// <entry key="parent" value="WattModel"/>
			// </userInfo>
			// </entity>
			//
			// ////////////////////////////////////////////////////////////////
			
			$entityUserInfos = $entity->getElementsByTagName ( "userInfo" );
			foreach ( $entityUserInfos as $entityUserInfo ) {
				$userInfoEntries = $entityUserInfo->getElementsByTagName ( "entry" );
				foreach ( $userInfoEntries as $userInfoEntry ) {
					fLog ( 	 $entityR->name .'.metadata : '.$this->elementToString($userInfoEntry).cr(),true );
					
					if ($userInfoEntry->hasAttribute ( "key" ) && $userInfoEntry->hasAttribute ( "value" )){
						$entityR->metadata[ rtrim ( $userInfoEntry->getAttribute ( "key" ))]=rtrim( $userInfoEntry->getAttribute ( "value" ));
					}
					
					if ($userInfoEntry->hasAttribute ( "key" ) && rtrim ( $userInfoEntry->getAttribute ( "key" ) ) == "generate" && ($userInfoEntry->hasAttribute ( "value" ) && strtolower ( rtrim ( $userInfoEntry->getAttribute ( "value" ) ) ) == "collection")) {
						$entityR->generateCollectionClass = true;
					}
					if ($userInfoEntry->hasAttribute ( "key" ) && rtrim ( $userInfoEntry->getAttribute ( "key" ) ) == "parent" && $userInfoEntry->hasAttribute ( "value" )) {
						$entityR->instanceOf = $userInfoEntry->getAttribute ( "value" );
					}
				}
			}
			
			// ////////////////////////////////////////////////////////////////
			//
			// -> ENTITY->properties
			// Stored in <attribute> elements
			//
			// Sample :
			//
			// <entity name="Activity" representedClassName="Activity" syncable="YES">
			// <attribute name="level" optional="YES" attributeType="Integer 16"
			// defaultValueString="0" syncable="YES"/>
			// <attribute name="rating" optional="YES" attributeType="Integer 16"
			// defaultValueString="0" syncable="YES"/>
			// ...
			//
			// ////////////////////////////////////////////////////////////////
			
			$attributes = $entity->getElementsByTagName ( 'attribute' );
			foreach ( $attributes as $attribute ) {
				
				// For each attribute : here attribute == property
				$property = new PropertyRepresentation ();
				
				// We parse the attribute of the <attribute> element
				if ($attribute->hasAttribute ( "name" )) {
					$property->name = $attribute->getAttribute ( "name" );
				} else {
					throw new Exception ( 'property with no name' );
				}
				
				fLog ( $entityR->name.'.'.$property->name.' '.cr(),true );
				
				if ($attribute->hasAttribute ( "attributeType" )) {
					$property->type = $attribute->getAttribute ( "attributeType" );
				} else {
					$property->type = ObjectiveCHelper::UNDEFINED_TYPE;
				}
				
				if ($attribute->hasAttribute ( "defaultValueString" )) {
					$property->default = $attribute->getAttribute ( "defaultValueString" );
				}
				
				// We parse the property metadata

				$propertyUserInfos = $attribute->getElementsByTagName ( "userInfo" );
				foreach ( $propertyUserInfos as $propertyUserInfo ) {
					$userInfos = $propertyUserInfo->getElementsByTagName ( "entry" );
					// We parse the entries
					
					$property->metadata=array();
					
					foreach ( $userInfos as $propertyInfoEntry ) {
			
						fLog ( 	 $entityR->name.'.'.$property->name .'.metadata : '.$this->elementToString($propertyInfoEntry).cr(),true );
						
						if ($propertyInfoEntry->hasAttribute ( "key" ) && $propertyInfoEntry->hasAttribute ( "value" )){
							$property->metadata[ rtrim ( $propertyInfoEntry->getAttribute ( "key" ))]=rtrim( $propertyInfoEntry->getAttribute ( "value" ));
						}
						
						if ($propertyInfoEntry->hasAttribute ( "key" ) && rtrim ( $propertyInfoEntry->getAttribute ( "key" ) ) == "type" && rtrim ( $propertyInfoEntry->hasAttribute ( "value" ) )) {
							$propertyType = $propertyInfoEntry->getAttribute ( "value" );
							$property->type = $propertyType;
						}
						if ($propertyInfoEntry->hasAttribute ( "key" ) && rtrim ( $propertyInfoEntry->getAttribute ( "key" ) ) == "relationship" && rtrim ( $propertyInfoEntry->hasAttribute ( "value" ) )) {
							/* Support of external relationship */
							$propertyType = $propertyInfoEntry->getAttribute ( "value" );
							$property->type = "object";
							$property->instanceOf = $propertyType;
							$property->isGeneratedType = true;
							$property->isExternal = true; // Used to prevent from generation
						}
						if ($propertyInfoEntry->hasAttribute ( "key" ) && rtrim ( $propertyInfoEntry->getAttribute ( "key" ) ) == "extractible" && rtrim ( $propertyInfoEntry->hasAttribute ( "value" ) )) {
							/* Support of extractibility */
							$property->isExtractible = (strtolower ( $propertyInfoEntry->getAttribute ( "value" ) ) != "no");
							var_dump ( $property->extractible );
						}
					}
				}
				$entityR->properties [$property->name] = $property;
				
				
			}
			
			
			// ////////////////////////////////////////////////////////////////
			//
			// -> ENTITY->relationships
			// Stored in <relationship> elements
			//
			// Sample :
			//
			// <entity name="Cell" syncable="YES">
			// ...
			// <relationship name="column" optional="YES" minCount="1" maxCount="1"
			// deletionRule="Nullify" destinationEntity="Column" inverseName="cells"
			// inverseEntity="Column" syncable="YES"/>
			// <relationship name="element" optional="YES" minCount="1" maxCount="1"
			// deletionRule="Nullify" destinationEntity="Element" inverseName="cells"
			// inverseEntity="Element" syncable="YES"/>
			//
			// ////////////////////////////////////////////////////////////////
			
			$relationships = $entity->getElementsByTagName ( 'relationship' );
			foreach ( $relationships as $relationship ) {
				
				// We create a property to hold the relationship
				$property = new PropertyRepresentation ();
				$property->metadata=array();
				
				if ($relationship->hasAttribute ( "name" )) {
					$property->name = $relationship->getAttribute ( "name" );
				} else {
					throw new Exception ( 'property with no name' );
				}
				fLog ( $entityR->name.'.'.$property->name.' '.cr(),true );
				$tooMany = false;
				if ($relationship->hasAttribute ( "toMany" )) {
					$tooMany = ($relationship->getAttribute ( "toMany" ) == "YES");
				}
				if ($relationship->hasAttribute ( "destinationEntity" )) {
					$destinationEntity = $relationship->getAttribute ( "destinationEntity" );
					if ($tooMany == true) {
						$property->type = "object";
						$property->instanceOf = $delegate->getCollectionClassName( $nativePrefix, $destinationEntity );
						$property->isGeneratedType = true;
					} else {
						$property->type = "object";
						$property->instanceOf = $nativePrefix . ucfirst ( $destinationEntity );
						$property->isGeneratedType = true;
					}
				} else {
					$property->type = ObjectiveCHelper::UNDEFINED_TYPE;
				}
				
				// Relationship metadata user infos
				
				$relationshipUserInfos = $relationship->getElementsByTagName ( 'userInfo' );
				foreach ( $relationshipUserInfos as $relationshipUserInfo ) {
					$userInfoEntries = $relationshipUserInfo->getElementsByTagName ( "entry" );
					foreach ( $userInfoEntries as $propertyInfoEntry ) {
						
						fLog ( 	 $entityR->name.'.'.$property->name .'.metadata : '.$this->elementToString($propertyInfoEntry).cr(),true );
						
						if ($propertyInfoEntry->hasAttribute ( "key" ) && $propertyInfoEntry->hasAttribute ( "value" )){
							$property->metadata[ rtrim ( $propertyInfoEntry->getAttribute ( "key" ))]=rtrim( $propertyInfoEntry->getAttribute ( "value" ));
						}
						
						if ($propertyInfoEntry->hasAttribute ( "key" ) && rtrim ( $propertyInfoEntry->getAttribute ( "key" ) ) == "extractible" && rtrim ( $propertyInfoEntry->hasAttribute ( "value" ) )) {
							/* Support of extractibility */
							$property->isExtractible = (strtolower ( $propertyInfoEntry->getAttribute ( "value" ) ) != "no");
						}
					}
				}
				
				// Add the property to the entity
				$entityR->properties [$property->name] = $property;
			}
			
			// We add the entity representations to the entities.
			$r->entities [$entityR->name] = $entityR;
		}
		
		fLog ( "" . cr (), true );
		
		fLog ( 	 "********************".cr(),true );
		fLog ( 	 "End of  Entities".cr(),true );
		fLog ( 	 "********************".cr().cr(),true );
		
		
		return $r;
	}
	
	public function elementToString($domElement){
		return $domElement->ownerDocument->saveXML($domElement);
	}
}

?>#BMS#->{"filename":"BartlebySyncConfiguration.php","checksum":3112100276,"relativePath":"BartlebySync\/BartlebySyncConfiguration.php","size":2130}<-#BME#
<?php

if (!defined('BARTLEBY_SYNC_ROOT_PATH')) {

    define('BARTLEBY_SYNC_ROOT_PATH', dirname(__FILE__).'/');

    ///////////////////////
    // KEYS
    ///////////////////////

    
    define('BARTLEBY_SYNC_SECRET_KEY', 'AP_BS_SSK'); // Used create the data system folder

    ///////////////////////
    // REPOSITORY
    ///////////////////////


    // At this point $configuration is set
    $stage=$configuration->STAGE();

    if ($stage==Stages::DEVELOPMENT){
        define('BARTLEBY_SYNC_SECRET_KEY', 'AP_BS_SSK_LOCAL'); // Used create the data system folder
        define('REPOSITORY_HOST','AP_BS_RH_DEVELOPMENT');
        define('REPOSITORY_WRITING_PATH', dirname(__DIR__) .DIRECTORY_SEPARATOR.'files'.DIRECTORY_SEPARATOR);
    }elseif($stage==Stages::PRODUCTION){
        define('BARTLEBY_SYNC_SECRET_KEY', 'AP_BS_SSK_PRODUCTION'); // Used create the data system folder
        define('REPOSITORY_HOST','AP_BS_RH_PRODUCTION');
        define('REPOSITORY_WRITING_PATH', dirname(__DIR__) .DIRECTORY_SEPARATOR.'files'.DIRECTORY_SEPARATOR);
    }elseif($stage==Stages::ALTERNATIVE){
        define('BARTLEBY_SYNC_SECRET_KEY', 'AP_BS_SSK_ALTERNATIVE'); // Used create the data system folder
        define('REPOSITORY_HOST','AP_BS_RH_ALTERNATIVE');
        define('REPOSITORY_WRITING_PATH', dirname(__DIR__) .DIRECTORY_SEPARATOR.'files'.DIRECTORY_SEPARATOR);
    }else{
        // It is local Stages::LOCAL
        define('BARTLEBY_SYNC_SECRET_KEY', 'AP_BS_SSK_LOCAL'); // Used create the data system folder
        define('REPOSITORY_HOST','AP_BS_RH_LOCAL');
        define('REPOSITORY_WRITING_PATH', dirname(__DIR__) .DIRECTORY_SEPARATOR.'files'.DIRECTORY_SEPARATOR);
    }


    ///////////////////////
    // PERSITENCY
    ///////////////////////

    $a=BARTLEBY_SYNC_ROOT_PATH . 'Core/IOManagerFS.php';
    require_once BARTLEBY_SYNC_ROOT_PATH . 'Core/IOManagerFS.php';  // Default adapter
    define('PERSISTENCY_CLASSNAME', 'BartlebySync\Core\IOManagerFS');

    //////////////////////
    // MISC
    //////////////////////

    define('MIN_TREE_ID_LENGTH', 1);

    define('CLEAN_UP_ON_ERROR',false);


}#BMS#->{"filename":"BartlebySyncConst.php","checksum":1803188375,"relativePath":"BartlebySync\/Core\/BartlebySyncConst.php","size":939}<-#BME#
<?php


if (!defined('BARTLEBY_SYNC_VERSION')) {

    define('BARTLEBY_SYNC_VERSION', '1.0.beta1');


// Responses key consts

    define('INFORMATIONS_KEY', 'informations');
    define('METHOD_KEY', 'method');

    define('HASHMAP_FILENAME', 'hashmap');
    define('TREE_INFOS_FILENAME', 'treeInfos');
    define('SYSTEM_DATA_PREFIX', '.');
    define('METADATA_FOLDER', '.bsync');


    define('DEBUG_MODE_WITH_REAL_TREE_ID', true);

///////////////////////////////
// BartlebySyncCommands
///////////////////////////////

    define('BCreate', 0);        // W source - un prefix the asset
    define('BUpdate', 1);        // W source - un prefix the asset
    define('BMove', 2);          // R source W destination
    define('BCopy', 3);          // R source W destination
    define('BDelete', 4);        // W source

// BartlebySyncCMDParamsRank

    define('BCommand', 0);
    define('BDestination', 1);
    define('BSource', 2);

}#BMS#->{"filename":"CommandInterpreter.php","checksum":142928795,"relativePath":"BartlebySync\/Core\/CommandInterpreter.php","size":8561}<-#BME#
<?php

namespace BartlebySync\Core;

require_once 'BartlebySyncConst.php';

class CommandInterpreter {
	
	/**
	 * The $ioManager
	 *
	 * @var IOManager
	 */
	protected $ioManager = NULL;
	
	/**
	 * References the current list of files to be used for finalization.
	 *
	 * @var array
	 */
	private $listOfFiles = array ();
	
	/**
	 *
	 * @param IOManager $ioManager        	
	 */
	public function setIOManager($ioManager) {
		$this->ioManager = $ioManager;
	}
	
	/**
	 * Interprets the command bunch
     * We try be resilient to potential client side errors (doubles, sequences, orders, ...)
	 * That's why we proceed use a double pass approach and so on...
     *
	 * @param string $treeId        	
	 * @param string $syncIdentifier        	
	 * @param array $bunchOfCommand        	
	 * @param string $finalHashMap
	 * @return null on success and a string with the error in case of any error
	 */
	function interpretBunchOfCommand($treeId, $syncIdentifier, array $bunchOfCommand, $finalHashMap) {

		$failures = array ();
		$hasProceededToUnPrefixing = FALSE;

		// Order matters.
		// Sort the command to execute delete commands at the end (after create, copy and move)
		usort ( $bunchOfCommand, array (
				$this,
				'_compareCommand' 
		) );

        //////////////////////////////////
        // Let's remove possible double
        //////////////////////////////////

        $filteredBunchOfCommand=array();
        foreach ($bunchOfCommand as $command){
            $alreadyExists=false;
            foreach($filteredBunchOfCommand as $filteredCommand){
                if(count ($filteredCommand)===count($command)){
                    $nbOfArguments=count($filteredCommand);
                    $match=true;
                    for($i=0;$i<$nbOfArguments;$i++){
                        $match=(($filteredBunchOfCommand[$i]==$command[$i])&& $match);
                    }
                    if($match==true){
                        $alreadyExists=true;
                    }
                }
            }
            if($alreadyExists===false){
                $filteredBunchOfCommand[]=$command;
            }
        }

        $secondAttempt=array();

        //////////////////
        // First pass
        //////////////////

		foreach ( $filteredBunchOfCommand as $command ) {
			if (is_array ( $command )) {
				if ($hasProceededToUnPrefixing === FALSE && $command [BCommand] > BUpdate) {
					// Un prefix after running all  commands.
					$unPrefixingFailures = $this->_unPrefix ( $treeId, $syncIdentifier );
					if (count ( $unPrefixingFailures ) > 0) {
						return $unPrefixingFailures;
					}
					$hasProceededToUnPrefixing = TRUE;
				}
				$result = $this->_decodeAndRunCommand ( $command, $treeId );
				if ($result != NULL) {
                    // We store for a next pass
                    $secondAttempt[]=$command;
				}
			} else {
				$failures [] = $command . ' is not an array';
			}
			if (isset ( $result )) {
				$failures [] = $result;
			}
			$result = NULL;
		}

        //////////////////
        // Second pass
        //////////////////

        // If we encounter a problem of dependency
        // (order of operation e.g a move before a dependant copy)
        foreach ( $secondAttempt as $command ) {
            if (is_array ( $command )) {
                $result = $this->_decodeAndRunCommand( $command, $treeId);
                if ($result != NULL) {
                    $failures [] = $result;
                }
            }
            $result = NULL;
        }

        //////////////////
        // Second pass
        //////////////////

		if (count ( $failures ) > 0) {

            return $failures;

		} else {

            // Remove the prefix from the synchronized files
			if($hasProceededToUnPrefixing==FALSE){
                // Un prefix the files.
				$unPrefixingFailures = $this->_unPrefix ( $treeId, $syncIdentifier );
				if (count ( $unPrefixingFailures ) > 0) {
					return $unPrefixingFailures;
				}
			}

            // Save the hashMap.

			$this->ioManager->mkdir ( $this->ioManager->absoluteUrl ( $treeId, METADATA_FOLDER.'/' ) );
			if ($this->ioManager->saveHashMap ( $treeId, $finalHashMap )) {
				return NULL;
			} else {
				$failures [] = 'Error when saving the hashmap';
				return $failures;
			}
		}
	}



	private function _compareCommand($a, $b) {

/*
        'BCreate' -> 0
        'BUpdate' -> 1
        'BMove' -> 2
        'BCopy' -> 3
        'BDelete' -> 4


        $aOrder=$a[BCommand];
        $bOrder=$b[BCommand];

*/
		return ($a [BCommand] > $b [BCommand]);
	}

    /**
     * Finalizes the bunch of command
     *
     * @param $treeId
     * @param string $syncIdentifier
     * @internal param string $finalHashMapFilePath
     * @return array
     */
	private function _unPrefix($treeId, $syncIdentifier) {
		$failures = array ();
		foreach ( $this->listOfFiles as $file ) {
			if (substr ( $file, - 1 ) != "/") {
				$relativePath = dirname ( $file ) . DIRECTORY_SEPARATOR . $syncIdentifier . basename ( $file );
				$protectedPath = $this->ioManager->absoluteUrl ( $treeId, $relativePath );
				if ($this->ioManager->exists ( $protectedPath )) {
					$this->ioManager->rename ( $protectedPath, $this->ioManager->absoluteUrl ( $treeId, $file ) );
				} else {
					$failures [] = 'Unexisting path : ' . $protectedPath . ' -> ' . $treeId . ' (' . $relativePath . ') ';
				}
			} else {
				// It is a folder with do not prefix currently the folders
			}
		}
        return $failures;
	}
	
	/**
	 * Decodes and runs the command
	 *
	 * @param array $cmd        	
	 * @param string $treeId        	
	 * @return string on error, or null on success
	 */
	private function _decodeAndRunCommand( array $cmd, $treeId) {

		if (count ( $cmd )> 1 ) {
			$command = $cmd [0];
			// Absolute paths
			$destination = $this->ioManager->absoluteUrl ( $treeId, $cmd [BDestination] );
			$source = $this->ioManager->absoluteUrl ( $treeId, $cmd [BSource] );
            $sourceExistsString=($this->ioManager->exists($source))?"Yes":"No";
            $destinationExistsString=($this->ioManager->exists($destination))?"Yes":"No";

			switch ($command) {
				case BCreate :
					if (! isset ( $cmd [BDestination] )) {
						return 'BDestination must be non null :' . $cmd;
					}
					// There is no real FS action to perform
					// The file should only be "unPrefixed"
					// We only add the file to listOfFiles to be unPrefixed
					$this->listOfFiles [] = $cmd [BDestination];
					return NULL;
					break;
					case BUpdate :
						if (! isset ( $cmd [BDestination] )) {
							return 'BDestination must be non null :' . $cmd;
						}
						// There is no real FS action to perform
						// The file should only be "unPrefixed"
						// We only add the file to listOfFiles to be unPrefixed
						$this->listOfFiles [] = $cmd [BDestination];
						return NULL;
						break;
				case BCopy :
					if ($this->ioManager->copy ( $source, $destination )) {
						return NULL;
					} else {
                        if(($this->ioManager->exists($destination)==true)
                            && ($this->ioManager->exists($source)==false)){
                            return NULL; // We keep the current destination file (May be inferred by a bad client sequence)
                        }
						return 'BCopy error source:' . $source .'(exists ='.$sourceExistsString.') destination: ' . $destination.' (exists ='.$destinationExistsString.')';
                    }
					break;
				case BMove :
					if ($this->ioManager->rename ( $source, $destination )) {
						return NULL;
					} else {
                        if(($this->ioManager->exists($destination)==true)
                            && ($this->ioManager->exists($source)==false)){
                            return NULL; // We keep the current destination file (May be inferred by a bad client sequence)
                        }
						return 'BMove error source:' . $source .'(exists ='.$sourceExistsString.') destination: ' . $destination.' (exists ='.$destinationExistsString.')';
					}
					break;
				case BDelete :
					if ($this->ioManager->delete ( $destination )) {
						return NULL;
					} else {
                        if($this->ioManager->exists($destination)==false){
                            return NULL;// There was no need to delete an unexisting path
                        }
						return 'BDelete error on ' . $destination.'(exists ='.$destinationExistsString.')';
					}
				default :
					break;
			}
		}
		return 'CMD ' . json_encode ( $cmd ) . ' is not valid';
	}
}
?>#BMS#->{"filename":"IOManager.php","checksum":3033658682,"relativePath":"BartlebySync\/Core\/IOManager.php","size":9721}<-#BME#
<?php

namespace BartlebySync\Core;

require_once BARTLEBY_ROOT_FOLDER.'Core/Configuration.php';
require_once 'BartlebySyncConst.php';

use Bartleby\Configuration;

/**
 *  Standard IO Functions
 *  Implement those method to create
 *  a new persistency layer
 * @author bpds
 */
interface IOManagerPersistency {

	public function exists($filename) ;

	public function put_contents($filename, $data);

	public function get_contents($filename);

	public function mkdir($dir);

	public function rename($oldname, $newname);

    /**
     * @param $source
     * @param $destination
     * @return mixed
     */
    public function copy( $source, $destination );

	public function delete($filename);

	public function move_uploaded($filename, $destination);

	public function listRelativePathsIn ($rootPath,$prefix='');

}

interface  IOManager extends IOManagerPersistency{
	/***
	 * Returns the status
	 * @return int
	 */
	public function getStatus();

	/**
	 * Returns the absolute path of a given resource
	 * @param string $treeId
	 * @param string $relativePath
	 * @return string|NULL
	 */
	public function absoluteUrl($treeId, $relativePath);

	/**
	 *  Returns the current public uri for a given resource
	 * @param string $treeId
	 * @param string $relativePath
	 * @return string|NULL
	 */
	public function uriFor($treeId, $relativePath);


	/**
	 * The tree id is persistent not the currentPublicId
	 * That  may change during the life cycle
	 *  For example in case of ACL invalidation for a group member
	 *   It is the public exposed tree root folder
	 * @param string $treeId
	 * @return array|NULL
	 */
	public function createTree( $treeId);



	/**
	 * Deletes the tree
	 * @param string $treeId
	 * @return array|NULL
	 */
	public function deleteTree( $treeId);



	/**
	 * Changes the public identifier.
	 *
	 * @param String $treeId
	 */
	public function touchTree($treeId);


	/**
	 *  Saves the Hash map
	 * @param string $treeId
	 * @param string $hashMap
	 * @return boolean
	 */
	public function saveHashMap($treeId, $hashMap);


	/**
	 *  Creates the repository
	 *  And could perform any installation related task
	 */
	public function install($path);


    /**
     * A function that scans the repository and removes the Ghosts and inconsistent contexts
     * @return array
     */
    public function removeGhosts();

}


/**
 *  IOmanager abstract class
 * @author bpds
 *
 */
abstract class IOManagerAbstract  {

	/**
	 *  Used to define a status code
	 * @var integer
	 */
	public $status=0;


	/**
	 *  The current tree data
	 * @var array
	 */
	protected   $treeData=NULL;


	public function __construct(){
		$this->status = 200;
	}

	public function getStatus(){
		return $this->status;
	}

	public function repositoryAbsolutePath() {
		return REPOSITORY_WRITING_PATH;
	}


	public function absoluteUrl($treeId, $relativePath) {
		$currentId=$this->_currentPublicId($treeId);
		if($currentId!=NULL){
			return $this->repositoryAbsolutePath () . $this->_currentPublicId($currentId). DIRECTORY_SEPARATOR . $relativePath;
		}
		return NULL;
	}


	public function uriFor($treeId, $relativePath) {
		$currentId = $this->_currentPublicId ( $treeId );
		$absoluteUrl = $this->absoluteUrl ( $treeId, $relativePath );
		if ($currentId != NULL) {
			if ($this->exists ( $absoluteUrl )) {
				$uri = REPOSITORY_HOST . $currentId . DIRECTORY_SEPARATOR . $relativePath;
				$uri= str_replace(" ","%20",$uri );
					// @todo 401 if not authorized;
					// $this->status=401
					return $uri;
			}
		}
		$this->status = 404;
		return NULL;
	}

	public function createTree( $treeId){
		$currentPublicId = $this->_createAPublicId($treeId);
		$systemDataFolder = $this->_treeInfosFolderPathFor($treeId);
		$messages=array();
		// Create the system data folder
		if($this->exists($systemDataFolder)){
			return NULL;
		}
		 if (!$this->mkdir ($systemDataFolder)){
			$messages[]= $systemDataFolder.' mkdir error (System data folder)';
			return $messages;
		}

		// Put the current public id, owner, and an array of groups
		$this->treeData=array( $currentPublicId, Configuration::ANONYMOUS,  array(Configuration::ANONYMOUS), 777);

		if($this->put_contents($systemDataFolder.TREE_INFOS_FILENAME, json_encode($this->treeData))==false){
			$messages[]=$treeId.'createTree tree infos file_put_contents error '.$systemDataFolder.TREE_INFOS_FILENAME;
		}
		// Create the public id folder
		$currentPublicIdFolder=$this->repositoryAbsolutePath ().$currentPublicId. DIRECTORY_SEPARATOR ;
		if(!$this->mkdir($currentPublicIdFolder)){
			$messages[]= $currentPublicIdFolder.' mkdir error (public folder)';
		}
		// Create the meatdata folder in the public id folder
		if(!$this->mkdir($currentPublicIdFolder.METADATA_FOLDER.DIRECTORY_SEPARATOR)){
			$messages[]= $currentPublicIdFolder.METADATA_FOLDER.DIRECTORY_SEPARATOR.'   mkdir error  (Metadata folder)';
		}
		if(count($messages)>0){
			return $messages;
		}
		return NULL;
	}


	/**
	 * Deletes the tree
	 * @param string $treeId
	 * @return array|NULL
	 */
	public function deleteTree( $treeId){
		$messages = array ();
		$currentPublicId = $this->_currentPublicId ( $treeId );
		if ($currentPublicId == NULL) {
			$messages [] = 'tree does not exists';
		} else {
			$currentPublicIdFolder = $this->repositoryAbsolutePath () . $currentPublicId . DIRECTORY_SEPARATOR;
			$treeInfoFolder=$this->_treeInfosFolderPathFor ( $treeId );
			if ($this->exists ( $currentPublicIdFolder ) && $this->exists($treeInfoFolder)) {
				if ($this->delete($currentPublicIdFolder)==false || $this->delete($treeInfoFolder)==false) {
					$messages [] =  'Public or tree folder deletion has failed.'.$currentPublicIdFolder.' '.$treeInfoFolder;
				}
			} else {
				$messages [] =  'Public or tree folder data does not exist. '.$currentPublicIdFolder.' '.$treeInfoFolder;
			}
		}
		if (count ( $messages ) > 0) {
			return $messages;
		}
		return NULL;
	}




	public function touchTree($treeId) {
		$messages = array ();
		$currentPublicId = $this->_currentPublicId ( $treeId ); // populates $this->treeData
		if ($currentPublicId == NULL) {
			$messages [] = 'tree does not exists';
		} else {
			$currentPublicIdFolder = $this->repositoryAbsolutePath () . $currentPublicId . DIRECTORY_SEPARATOR;
			if ($this->exists ( $currentPublicIdFolder )) {
				// @TODO to be refactored We do not rename on touch.
				/*
				$oldPublicId = $this->treeData [0];
				$newPublicId = $this->_createAPublicId ($treeId);
				$newPublicIdFolder = $this->repositoryAbsolutePath () . $newPublicId . DIRECTORY_SEPARATOR;
				$this->treeData [0] = $newPublicId;
				if ($this->put_contents ( $this->_treeInfosFolderPathFor ( $treeId ) . TREE_INFOS_FILENAME, json_encode ( $this->treeData ) ) == false) {
					$messages [] = $treeId . ' tree infos file_put_contents error ' . $this->_treeInfosFolderPathFor ( $treeId ) . TREE_INFOS_FILENAME;
				} else {

					if ($this->rename ( $currentPublicIdFolder, $newPublicIdFolder ) == false) {
						$messages [] = $treeId . ' moving folder error ';
						// we need to try to reset the tree infos (fault resilience)
						$this->treeData [0] = $oldPublicId;
						$this->put_contents ( $this->_treeInfosFolderPathFor ( $treeId ) . TREE_INFOS_FILENAME, json_encode ( $this->treeData ) );
					}
				}
				*/
			} else {
				$messages [] = $currentPublicIdFolder . ' does not exist';
			}
		}
		if (count ( $messages ) > 0) {
			return $messages;
		}
		return NULL;
	}


	public function saveHashMap($treeId, $finalHashMap) {
		$destination = $this->absoluteUrl ( $treeId, METADATA_FOLDER .DIRECTORY_SEPARATOR. HASHMAP_FILENAME );
		return $this->put_contents($destination,$finalHashMap);
	}


	public function install($path) {
		if (!isset($path)){
			$path = $this->repositoryAbsolutePath();
		}

		if (! $this->exists ( $path )){
				$this->mkdir ( $path );
		}
	}


	// Protected

	/**
	 * Creates a unique public id for a given server.
	 * @return string
	 */
	protected  function _createAPublicId($treeId){
		if (DEBUG_MODE_WITH_REAL_TREE_ID == false) {
			return md5(uniqid());
		}else{
			return $treeId;
		}

	}


	/**
	 * The infos folder for a given tree
	 * @param string $treeId
	 * @return string
	 */
	protected  function _treeInfosFolderPathFor($treeId){
		if (DEBUG_MODE_WITH_REAL_TREE_ID == false) {
			// The metadata folder uses the unique  tree id
			return $this->repositoryAbsolutePath() . SYSTEM_DATA_PREFIX . md5(BARTLEBY_SYNC_SECRET_KEY . $treeId) . DIRECTORY_SEPARATOR;
		} else {
			return $this->repositoryAbsolutePath() . SYSTEM_DATA_PREFIX . $treeId . DIRECTORY_SEPARATOR;
		}

	}

	/**
	 *  Returns the current public id of a given tree
	 * @param string $treeId
	 * @return string
	 */
	protected function _currentPublicId($treeId){
		if($this->treeData==NULL){
			$p=$this->_treeInfosFolderPathFor($treeId).TREE_INFOS_FILENAME;
			if($this->exists($p)){
				$this->treeData= json_decode( $this->get_contents($p));
				return $this->treeData[0];
			}
			return NULL;
		}else{
			return $this->treeData[0];
		}
	}


    public function removeGhosts(){
        // Void implementation
        return array();
    }

	// ABSTRACT METHOD

	public function exists($filename){
		return false;
	}

	public function put_contents($filename, $data){
		return false;
	}

	public function get_contents($filename){
		return NULL;

	}

	public function mkdir($dir){
		return false;
	}
	public function rename($oldname, $newname){
		return false;
	}

	public function copy( $source, $destination ){
		return false;
	}

	public function delete($filename){
		return false;
	}

	public function move_uploaded($filename, $destination){
		return false;
	}
	public function listRelativePathsIn ($rootPath,$prefix=''){
		return NULL;
	}

}
?>
#BMS#->{"filename":"IOManagerFS.php","checksum":1857768805,"relativePath":"BartlebySync\/Core\/IOManagerFS.php","size":4611}<-#BME#
<?php

namespace BartlebySync\Core;

require_once BARTLEBY_SYNC_ROOT_PATH.'/Core/IOManager.php';

/**
 * Concrete IOManager using a file system
 * @author bpds
 */
final class IOManagerFS extends IOManagerAbstract implements IOManagerPersistency {
	
	public function exists($filename) {
		return file_exists ( $filename );
	}
	
	public function put_contents($filename, $data) {
		return file_put_contents ( $filename, $data );
	}
	
	public function get_contents($filename){
		return file_get_contents($filename);
	}
	
	public function mkdir($dir) {
		if (! file_exists ( $dir )) {
			return mkdir ( $dir, 0777, true );
		}
		return true;
	}
	
	public function rename($oldname, $newname) {
        $this->delete($newname);
		return rename ( $oldname, $newname );
	}
	
	public function copy( $source, $destination ){
        $this->delete($destination);
		return copy($source, $destination);
	}

    /**
     * Deletes a file or recursively a folder
     * Returns true if the file or the folder does not exists.
     * @see IOManagerPersistency::delete()
     * @param $filename
     * @return bool
     */
	public function delete($filename){
		if(!file_exists($filename)){
			return true;
		}
		if(is_dir($filename)){
			// we delete folders with a recursive deletion method
			return $this->_rmdir($filename,true);
		}else{
			return unlink($filename);
		}
	}

    /**
     * @param $dir
     * @param $result
     * @return bool
     */
    private function _rmdir($dir,$result) {
		if (is_dir($dir)) {
			$objects = scandir($dir);
			foreach ($objects as $object) {
				if ($object != "." && $object != "..") {
					if (filetype($dir.DIRECTORY_SEPARATOR.$object) == "dir")
						$result=$result&&$this->_rmdir($dir.DIRECTORY_SEPARATOR.$object,$result);
					else 
						$result=$result&&unlink($dir.DIRECTORY_SEPARATOR.$object);
				}
			}
			$result=$result&&rmdir($dir);
		}
		return $result;
	}


    /**
     * @param $filename
     * @param $destination
     * @return bool
     */
    public function move_uploaded($filename, $destination) {
        $this->delete($destination);
		$this->mkdir( dirname ( $destination ));
		return move_uploaded_file ( $filename, $destination );
	}


    /**
     * @param $dirPath
     * @param string $prefix
     * @return array
     */
    public function  listRelativePathsIn ($dirPath,$prefix=''){
		$dir = rtrim($dirPath, '\\/');
		$result = array();
		foreach (scandir($dir) as $f) {
			if ($f !== '.' and $f !== '..') {
				if (is_dir("$dir/$f")) {
					$result = array_merge($result , $this->listRelativePathsIn("$dir/$f", "$prefix$f/"));
				} else {
					$result[] = $prefix.$f;
				}
			}
		}
		return $result;
	}

    public function removeGhosts(){
        $deletedPath=array();
        $foundPath=array();
        $pathFoundInTreeInfo=array();
        $dir=$this->repositoryAbsolutePath();
        $messages=array();
        foreach (scandir($dir) as $f) {
            $path="$dir$f";
            if (! is_dir($path)){
                $messages[]="$path is not a folder | ";
                $deletedPath[]=$path;
                $this->delete($path);
                continue;
            }
            if($f!='.' && $f!='..'){
                $foundPath[]=$path;
                $p=$dir.$f.'/'.TREE_INFOS_FILENAME;
                if($this->exists($p)){
                    $this->treeData= json_decode( $this->get_contents($p));
                    $associatedPath=$dir.$this->treeData[0].'/';
                    $pathFoundInTreeInfo[]=$associatedPath;
                    if($this->exists($associatedPath)==false){
                        //IF there is TREE INFO file but no associated folder.
                        //ITS is a GHOST Delete the folder
                        $messages[]="$p is associated with a path that do not exists ($associatedPath) | ";
                        $deletedPath[]=$path;
                        $this->delete($path);
                    }
                }
            }
        }
        foreach ($foundPath as $p) {
            $path_parts = pathinfo($p);
            $fileName=$path_parts['basename'];
            $startByDot=(substr ($fileName,0,1 ) == ".");
            if( !in_array($p.'/',$pathFoundInTreeInfo) && !$startByDot){
                //  IF THERE IS NO ASSOCIATED TREE_INFOS_FILENAME IT IS A GHOST
                $messages[]="$p has no tree info file | ";
                $deletedPath[]=$p;
                $this->delete($p);
            }

        }
        return array(
                        "deletedPath"=> $deletedPath,
                        "messages"=>$messages
        );
    }
}
?>#BMS#->{"filename":"BartlebySyncAbstractEndPoint.php","checksum":4048313802,"relativePath":"BartlebySync\/EndPoints\/BartlebySyncAbstractEndPoint.php","size":2274}<-#BME#
<?php

namespace Bartleby\EndPoints;

include_once dirname(dirname(__FILE__)).'/BartlebySyncConfiguration.php';

require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoEndPoint.php';
require_once BARTLEBY_SYNC_ROOT_PATH.'Core/CommandInterpreter.php';
require_once BARTLEBY_SYNC_ROOT_PATH.'Core/IOManager.php';

use Bartleby\Core\CallData;
use Bartleby\Mongo\MongoEndPoint;
use BartlebySync\Core\CommandInterpreter;
use BartlebySync\Core\IOManager;
// We donnot use CallDataRawWrapper but a callData
// We reserve CallDataRawWrapper to generated code
abstract class BartlebySyncAbstractEndPointCallData extends CallData{
    /**
     * The creative key
     * @var string*/
    public $key=NULL;

}

abstract class BartlebySyncAbstractEndPoint extends MongoEndPoint {

    /**
     * The command interpreter
     *
     * @var CommandInterpreter
     */
    protected $interpreter = NULL;

    /**
     *
     * @var IOManager
     */
    protected $ioManager = NULL;

    /**
     * A lazy loading command interpreter
     * with its associated file manager
     *
     * @return CommandInterpreter the interpreter
     */
    protected function getInterpreter() {
        if (! $this->interpreter) {
            $this->interpreter = new CommandInterpreter ();
            $this->interpreter->setIOManager ( $this->getIoManager () );
        }
        return $this->interpreter;
    }

    /**
     *
     * @return IOManager the current IO manager
     */
    protected function getIoManager() {
        if (! $this->ioManager) {
            $className = PERSISTENCY_CLASSNAME;
            $this->ioManager = new $className ();
        }
        return $this->ioManager;
    }

    /**
     * Casts to boolean
     * @param mixed
     * @return bool
     */
    protected  function _castToBoolean($value){
        if (is_string($value)){
            $lcvalue=strtolower($value);
            if ($lcvalue ==='false'||$lcvalue ==='no'||$lcvalue ==='0'){
                return false;
            }else{
                return true;
            }
        }
        if (is_numeric($value)){
            $nvalue=(int)$value;
            if ($nvalue<=0){
                return false;
            }else{
                return true;
            }
        }
        return true;
    }

}#BMS#->{"filename":"BartlebySyncCreateTree.php","checksum":898939481,"relativePath":"BartlebySync\/EndPoints\/BartlebySyncCreateTree.php","size":1272}<-#BME#
<?php

namespace Bartleby\EndPoints;

require_once __DIR__ . '/BartlebySyncAbstractEndPoint.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/Configuration.php';

use Bartleby\Core\JsonResponse;
use Bartleby\Configuration;

final class BartlebySyncCreateTreeCallData extends BartlebySyncAbstractEndPointCallData {

    /**
     * The id of the tree to be created
     * @var string
     */
    public $treeId = NULL;

}

final class BartlebySyncCreateTree extends BartlebySyncAbstractEndPoint {

    function call(BartlebySyncCreateTreeCallData $parameters) {
        if (!isset($parameters->treeId) || strlen($parameters->treeId) < MIN_TREE_ID_LENGTH) {
            return new JsonResponse(VOID_RESPONSE, 406);
        }
        $this->ioManager = $this->getIoManager();
        $result = $this->ioManager->createTree($parameters->treeId);
        if ($result == NULL) {
            return new JsonResponse(VOID_RESPONSE, 201);
        } else {
            if ( $this->_configuration->DEVELOPER_DEBUG_MODE() === true ) {
                return new JsonResponse(array("parameters" => $parameters,
                    "IOManager.explanation" => $result), 400);
            } else {
                return new JsonResponse(VOID_RESPONSE, 400);
            }

        }
    }
}#BMS#->{"filename":"BartlebySyncDeleteTree.php","checksum":3987454656,"relativePath":"BartlebySync\/EndPoints\/BartlebySyncDeleteTree.php","size":1259}<-#BME#
<?php

namespace Bartleby\EndPoints;

require_once __DIR__ . '/BartlebySyncAbstractEndPoint.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/Configuration.php';

use Bartleby\Core\JsonResponse;
use Bartleby\Configuration;

final class BartlebySyncDeleteTreeCallData extends BartlebySyncAbstractEndPointCallData {

    /**
     * The id of the tree to be created
     * @var string
     */
    public $treeId = NULL;

}

final class BartlebySyncDeleteTree extends BartlebySyncAbstractEndPoint {

    function call(BartlebySyncDeleteTreeCallData $parameters) {
        if (!isset($parameters->treeId) || strlen($parameters->treeId) < MIN_TREE_ID_LENGTH) {
            return new JsonResponse(VOID_RESPONSE, 406);
        }
        $this->ioManager = $this->getIoManager();
        $result = $this->ioManager->deleteTree($parameters->treeId);
        if ($result == NULL) {
            return new JsonResponse(VOID_RESPONSE, 200);
        } else {
            if (Configuration::DEVELOPER_DEBUG_MODE == true) {
                return new JsonResponse(array("parameters" => $parameters,
                    "IOManager.explanation" => $result), 400);
            } else {
                return new JsonResponse(VOID_RESPONSE, 400);
            }

        }
    }
}#BMS#->{"filename":"BartlebySyncFinalizeTransactionIn.php","checksum":1740649019,"relativePath":"BartlebySync\/EndPoints\/BartlebySyncFinalizeTransactionIn.php","size":4974}<-#BME#
<?php

namespace Bartleby\EndPoints;

require_once __DIR__ .'/BartlebySyncAbstractEndPoint.php';

use Bartleby\Core\JsonResponse;


final class BartlebySyncFinalizeTransactionInCallData extends BartlebySyncAbstractEndPointCallData{

    /**
     * The id of the tree to be created
     * @var string*/
    public $treeId=NULL;

    public $commands=NULL;

    public $syncIdentifier=NULL;

    // The final HashMap
    public $hashMap=NULL;

}

final class BartlebySyncFinalizeTransactionIn extends BartlebySyncAbstractEndPoint {

    /**
     * Finalizes the synchronization transaction with a bunch, then save the hashMap.
     *
     * @param BartlebySyncFinalizeTransactionInCallData $parameters
     * @return JsonResponse
     */
    function call(BartlebySyncFinalizeTransactionInCallData $parameters) {

        if (isset ($parameters->syncIdentifier) && isset ($parameters->commands) && isset($parameters->hashMap)) {
            $commands = $parameters->commands;
            // We accept encoded string
            if (!is_array($commands)) {
                try {
                    $commands = json_decode($parameters->commands);
                } catch (\Exception $e) {
                    return new JsonResponse('Invalid json command array = ' . $parameters->commands, 400);
                }
            }
            if (is_array($commands)) {
                if (!isset ($parameters->treeId)) {
                    return new JsonResponse('Undefined treeId', 404);
                }
                if (strlen($parameters->treeId) < MIN_TREE_ID_LENGTH) {
                    return new JsonResponse(VOID_RESPONSE, 406);
                }
                $errors = $this->getInterpreter()->interpretBunchOfCommand($parameters->treeId, $parameters->syncIdentifier, $commands, $parameters->hashMap);
                if ($errors == NULL) {
                    // We do not want to clean up on success
                    return new JsonResponse(VOID_RESPONSE, 201);

                } else {

                    // We cleanup if we encountered errors during finalization.
                    // We cannot guarantee a consistent state.
                    // This case should not occur !
                    if (CLEAN_UP_ON_ERROR){
                        $this->cleanUp ($parameters);
                    }

                    return new JsonResponse(array(
                            "message"=>"We have encountered a finalization error. It should be reported to the system adminstrator",
                            "errors" => $errors,
                            "commands" => $commands),
                        417);
                }
            } else {
                return new JsonResponse ('commands must be an array = ' . $parameters->commands, 400);
            }
        } else {
            return new JsonResponse('commands :' . $parameters->commands . ', hashMapSourcePath:' . $_FILES ['hashmap'] . ',  syncIdentifier:' . $parameters->syncIdentifier . ' are required', 400);
        }
    }

    /**
     * We cleanup for a given synchronization ID
     * @param BartlebySyncFinalizeTransactionInCallData $parameters
     * @return JsonResponse
     */
    function cleanUp(BartlebySyncFinalizeTransactionInCallData $parameters) {

        if (!isset ($parameters->treeId)) {
            return new JsonResponse('Undefined treeId', 404);
        }
        if (strlen($parameters->treeId) < MIN_TREE_ID_LENGTH) {
            return new JsonResponse(VOID_RESPONSE, 406);
        }


        if (!isset ($parameters->syncIdentifier)) {
            return new JsonResponse('Undefined syncIdentifier', 404);
        }

        if (strlen($parameters->syncIdentifier)< 20 ){
            return new JsonResponse('syncIdentifier should be 20 char min.', 417);
        }

        $this->ioManager = $this->getIoManager();
        $rootPath = $this->ioManager->absoluteUrl($parameters->treeId, '');
        $fileList = $this->ioManager->listRelativePathsIn($rootPath);
        $deletedPath = array();
        $unModifiedPath = array();

        foreach ($fileList as $relativePath) {
            if (substr($relativePath, -1) != "/") {
                // It is not a folder.
                $pathInfos = pathinfo($relativePath);
                $fileName = $pathInfos ['basename'];
                if ($this->_stringStartsWith($fileName,$parameters->syncIdentifier)) {
                    $absoluteUrl = $this->ioManager->absoluteUrl($parameters->treeId, $relativePath);
                    $this->ioManager->delete($absoluteUrl);
                    $deletedPath [] = $relativePath;
                } else {
                    $unModifiedPath[] = $relativePath;
                }
            };
        };
        return new JsonResponse(array("deleted" => $deletedPath, "notModified" => $unModifiedPath), 200);
    }

    private function _stringStartsWith($haystack, $needle) {
        return (strpos($haystack, $needle) !== FALSE);
    }

}#BMS#->{"filename":"BartlebySyncGetFile.php","checksum":953688619,"relativePath":"BartlebySync\/EndPoints\/BartlebySyncGetFile.php","size":2546}<-#BME#
<?php

namespace Bartleby
\EndPoints;

require_once __DIR__ . '/BartlebySyncAbstractEndPoint.php';

use Bartleby\Core\JsonResponse;
use Bartleby\EndPoints\BartlebySyncAbstractEndPoint;
use Bartleby\EndPoints\BartlebySyncAbstractEndPointCallData;

final class BartlebySyncGetFileCallData extends BartlebySyncAbstractEndPointCallData {

    /**
     * The id of the tree to be created
     * @var string
     */
    public $treeId = NULL;

    /**
     * @var bool redirect to a repository URI
     */
    public $redirect=true;

    /**
     * Returns the value if there is a redirection the redirection applies.
     * @var bool return the value
     */
    public $returnValue=false;

    /**
     * The relative path
     * @var string
     */
    public $path = NULL;


}

final class BartlebySyncGetFile extends BartlebySyncAbstractEndPoint {

    function call(BartlebySyncGetFileCallData $parameters) {

        $redirect=$this->_castToBoolean($parameters->redirect);
        $returnValue=$this->_castToBoolean($parameters->returnValue);

        if (!isset($parameters->treeId)) {
            return new JsonResponse(VOID_RESPONSE, 406);
        }

        if (strlen($parameters->treeId) < MIN_TREE_ID_LENGTH) {
            return new JsonResponse(VOID_RESPONSE, 406);
        }

        if (!isset($parameters->path)) {
            return new JsonResponse(VOID_RESPONSE, 404);
        }

        $this->ioManager = $this->getIoManager();
        $path = $this->ioManager->absoluteUrl($parameters->treeId, $parameters->path);
        if (!$this->ioManager->exists($path)) {
            return new JsonResponse(VOID_RESPONSE, 404);
        }
        if ($returnValue && !$redirect) {
            //This approach can be very expensive.
            $result = $this->ioManager->get_contents($path);
            return new JsonResponse($result, $this->ioManager->getStatus());
        }
        
        // Using an URI is more flexible.
        // It can facilitate load balancing by distributing to multiple repository.
        $uri = $this->ioManager->uriFor($parameters->treeId, $parameters->path);

        if ($redirect) {
            // This is the best approach
            // Redirect with a 307 code
            header('Location:  ' . $uri . '?antiCache=' . uniqid(), true, 307);
            exit ();
        } else {

            // But if it fails we can use
            // A two step approach.

            $infos = array();
            $infos ["uri"] = $uri;
            return new JsonResponse($infos, 200);
        }

    }
}

#BMS#->{"filename":"BartlebySyncGetHashMap.php","checksum":1292478824,"relativePath":"BartlebySync\/EndPoints\/BartlebySyncGetHashMap.php","size":2064}<-#BME#
<?php

namespace Bartleby\EndPoints;

require_once __DIR__ .'/BartlebySyncAbstractEndPoint.php';

use Bartleby\Core\JsonResponse;
use Bartleby\EndPoints\BartlebySyncAbstractEndPoint;
use Bartleby\EndPoints\BartlebySyncAbstractEndPointCallData;

final class BartlebySyncGetHashMapCallData extends BartlebySyncAbstractEndPointCallData{

    /**
     * The id of the tree to be created
     * @var string*/
    public $treeId=NULL;

    /**
     * @var bool redirect to a repository URI
     */
    public $redirect=true;

    /**
     * Returns the value if there is a redirection the redirection applies.
     * @var bool return the value
     */
    public $returnValue=false;

}

final class BartlebySyncGetHashMap extends BartlebySyncAbstractEndPoint {

    function call(BartlebySyncGetHashMapCallData $parameters){

        $redirect=$this->_castToBoolean($parameters->redirect);
        $returnValue=$this->_castToBoolean($parameters->returnValue);

        if ( !isset($parameters->treeId) ) {
            return new JsonResponse(VOID_RESPONSE, 406);
        }

        if (strlen($parameters->treeId) < MIN_TREE_ID_LENGTH) {
            return new JsonResponse(VOID_RESPONSE, 406);
        }

        $this->ioManager = $this->getIoManager ();
        $path = $this->ioManager->absoluteUrl ( $parameters->treeId, METADATA_FOLDER . '/'. HASHMAP_FILENAME );
        if (! $this->ioManager->exists ( $path )) {
            return new JsonResponse(VOID_RESPONSE, 404 );
        }
        if ($returnValue && ! $redirect) {
            $result = $this->ioManager->get_contents ( $path );
            return new JsonResponse($result, $this->ioManager->getStatus());
        }

        $uri = $this->ioManager->uriFor ( $parameters->treeId, METADATA_FOLDER .'/'. HASHMAP_FILENAME );
        if ($redirect) {
            header('Location:  ' . $uri . '?antiCache=' . uniqid(), true, 307);
            exit ();
        } else {
            $infos = array ();
            $infos ["uri"] = $uri;
            return new JsonResponse( $infos, 200 );
        }

    }
}

#BMS#->{"filename":"BartlebySyncInstall.php","checksum":3948546835,"relativePath":"BartlebySync\/EndPoints\/BartlebySyncInstall.php","size":633}<-#BME#
<?php

namespace Bartleby\EndPoints;

require_once __DIR__ . '/BartlebySyncAbstractEndPoint.php';

use Bartleby\Core\JsonResponse;

final class BartlebySyncInstallCallData extends BartlebySyncAbstractEndPointCallData {

    /**
     * The repository path
     * @var string
     */
    public $repositoryPath = NULL;
    
}

final class BartlebySyncInstall extends BartlebySyncAbstractEndPoint {

    function call(BartlebySyncInstallCallData $parameters) {
        $this->ioManager = $this->getIoManager();
        $this->ioManager->install($parameters->repositoryPath);
        return new JsonResponse(VOID_RESPONSE, 201);
    }
}
#BMS#->{"filename":"BartlebySyncRemoveGhosts.php","checksum":1719203556,"relativePath":"BartlebySync\/EndPoints\/BartlebySyncRemoveGhosts.php","size":530}<-#BME#
<?php

namespace Bartleby\EndPoints;

require_once __DIR__ . '/BartlebySyncAbstractEndPoint.php';

use Bartleby\Core\JsonResponse;

final class BartlebySyncRemoveGhostsCallData extends BartlebySyncAbstractEndPointCallData {

}

final class BartlebySyncRemoveGhosts extends BartlebySyncAbstractEndPoint {

    function call(BartlebySyncRemoveGhostsCallData $parameters) {
        $this->ioManager = $this->getIoManager();
        $details = $this->ioManager->removeGhosts();
        return new JsonResponse($details, 201);
    }
}
#BMS#->{"filename":"BartlebySyncSupports.php","checksum":2930183341,"relativePath":"BartlebySync\/EndPoints\/BartlebySyncSupports.php","size":443}<-#BME#
<?php

namespace Bartleby\EndPoints;

require_once __DIR__ .'/BartlebySyncAbstractEndPoint.php';

use Bartleby\Core\JsonResponse;

final class BartlebySyncSupportsCallData extends BartlebySyncAbstractEndPointCallData{
}

final class BartlebySyncSupports extends BartlebySyncAbstractEndPoint {

    function call(BartlebySyncSupportsCallData $parameters){

        return new JsonResponse(array('version'=>BARTLEBY_SYNC_VERSION), 200);
    }

}#BMS#->{"filename":"BartlebySyncTouchTree.php","checksum":562041412,"relativePath":"BartlebySync\/EndPoints\/BartlebySyncTouchTree.php","size":922}<-#BME#
<?php

namespace Bartleby\EndPoints;

require_once __DIR__ . '/BartlebySyncAbstractEndPoint.php';

use Bartleby\Core\JsonResponse;

final class BartlebySyncTouchTreeCallData extends BartlebySyncAbstractEndPointCallData{

    /**
     * The id of the tree to be created
     * @var string
     */
    public $treeId = NULL;

}

final class BartlebySyncTouchTree extends BartlebySyncAbstractEndPoint{

    function call(BartlebySyncTouchTreeCallData $parameters){
        if (!isset($parameters->treeId) || strlen($parameters->treeId) < MIN_TREE_ID_LENGTH) {
            return new JsonResponse(VOID_RESPONSE, 406);
        }
        $this->ioManager = $this->getIoManager();
        $result = $this->ioManager->touchTree($parameters->treeId);
        if ($result == NULL) {
            return new JsonResponse(VOID_RESPONSE, 201);
        } else {
            return new JsonResponse(VOID_RESPONSE, 404);
        }

    }
}#BMS#->{"filename":"BartlebySyncUploadFileTo.php","checksum":3237022050,"relativePath":"BartlebySync\/EndPoints\/BartlebySyncUploadFileTo.php","size":4417}<-#BME#
<?php


namespace Bartleby\EndPoints;

require_once __DIR__ . '/BartlebySyncAbstractEndPoint.php';

use Bartleby\Core\JsonResponse;

final class BartlebySyncUploadFileToCallData extends BartlebySyncAbstractEndPointCallData {

    /**
     * The id of the tree to be created
     * @var string
     */
    public $treeId = NULL;

    public $destination = NULL;

    public $syncIdentifier = NULL;

}

final class BartlebySyncUploadFileTo extends BartlebySyncAbstractEndPoint {

    function call(BartlebySyncUploadFileToCallData $parameters) {

        if (!isset($parameters->treeId)) {
            return new JsonResponse(VOID_RESPONSE, 404);
        }

        if (strlen($parameters->treeId) < MIN_TREE_ID_LENGTH) {
            return new JsonResponse(VOID_RESPONSE, 406);
        }

        if (isset ($parameters->destination) && isset ($parameters->syncIdentifier)) {

            $this->ioManager = $this->getIoManager();
            $treeFolder = $this->ioManager->absoluteUrl($parameters->treeId, '');

            if (isset ($treeFolder) && $this->ioManager->exists($treeFolder)) {

                $destination = $parameters->destination;
                $syncIdentifier = $parameters->syncIdentifier;
                $isAFolder = (substr($destination, -1) == "/");
                $d = $this->ioManager->absoluteUrl($parameters->treeId, $destination);

                if ($isAFolder == true) {

                    // We create directly the folder without the sync identifier
                    if ($this->ioManager->mkdir($d)) {
                        return new JsonResponse(VOID_RESPONSE, 201);
                    } else {
                        return new JsonResponse("Mkdir failure" . $destination, 417);
                    }

                } else {

                    // there is a source it should be a file.
                    $d = dirname($destination) . DIRECTORY_SEPARATOR . $syncIdentifier . basename($destination);
                    $destinationPath = $this->ioManager->absoluteUrl($parameters->treeId, $d);

                    // We create the folder if necessary.
                    $this->ioManager->mkdir(dirname($destinationPath));

                    ////////////////
                    // Use $_FILES
                    ////////////////

                    if (isset ($_FILES ['source'])) {
                        // NSURLSession do not set $_FILES
                        // But if a client populates  $_FILES it can be a relevant approach.
                        if ($this->ioManager->move_uploaded($_FILES ['source'] ['tmp_name'], $destinationPath)) {
                            return $this->_reponse($destinationPath);
                        }

                        // We prefer to resume on failure
                        // Lack of else is a choice
                    }

                    ////////////////////////
                    // USE a stream input.
                    ////////////////////////

                    // We prefer not to load the file in memory.
                    // direct stream handling without that requires less memory than
                    // $flow= $this->ioManager->get_contents("php://input");
                    // $this->ioManager->put_contents($destinationPath,$flow);

                    $flow = fopen("php://input", "r");
                    /* Open a file for writing */
                    $fp = fopen($destinationPath, "w");
                    /* Read the data 1 KB at a time and write to the file */
                    while ($data = fread($flow, 1024)) {
                        fwrite($fp, $data);
                    }
                    fclose($fp);
                    fclose($flow);

                    ////////////////////////
                    return $this->_reponse($destinationPath);
                }

            } else {
                return new JsonResponse('Unexisting tree id ' . $treeFolder, 417);
            }
        } else {
            return new JsonResponse('The components destination and syncIdentifier are required', 417);
        }
    }


    private  function _reponse($destinationPath){
        if ($this->ioManager->exists($destinationPath)) {
            return new JsonResponse(VOID_RESPONSE, 201);
        } else {
            return new JsonResponse('An error has occured the uploaded has not been created' . $destinationPath, 410);
        }
    }

}



#BMS#->{"filename":"README.md","checksum":3166715634,"relativePath":"BartlebySync\/README.md","size":17955}<-#BME#
# BartlebySync 1.0 

BartlebySync is a delta synchronizer for documents and data between devices.It allows to synchronizes local and distant grouped files tree.The standard synchronization topology relies on a client software and a light blind Restfull service, but can work locally and using P2P.


## Approach ##

- delegate as much as possible of the synchronization logic to the clients to distribute the load and to save server charge and bandwidth
- keep it as minimal and simple as possible
- do not focus on conflict resolution but on fault resilience (there is no transactional guarantee)
- allow very efficient caching and mem caching strategy (we will provide advanced implementation samples)
- support any encryption and cryptographic strategy
- allow advanced hashing strategy ( like : considering that a modified file should not be synchronized because the modification is not significant. e.g a metadata has changed.)

## HashMap  ##

For BartlebySync a **HashMap** is a dictionary with for a given folder the list of all its files relative path as a key and a Hash as a value or the inverse.

The master maintains one HashMap per root folder, the hash map is always crypted client side.


Json representation :

```javascript
	{
		 "hashToPath" : {
    		 "1952419745" : "47b2e7fb27643408f95f7c66d995fbe9.music",
    		 "2402594160" : "folder1/4fd6de231a723be15375552928c9c52a.track",
  		}
	}
```
## DeltaPathMap ##

A **DeltaPathMap** references the differences between two **HashMap** and furnish the logic to planify downloading or uploading command operations for clients according to their role.

Json representation :

```javascript
	{
		"createdPaths":[],
		"copiedPaths":["folder1/a.mp3","folder2/a.mp3"],
		"deletedPaths":[],
		"movedPaths":["x.txt","folder1/y.txt"],
		"updatedPaths":["folder1/4fd6de231a723be15375552928c9c52a.track"],
	}
```

## Synchronization process synopsis ##

With 1 Source client (Objc), 1 sync service(php), and n Destination clients(Objc)

1. Source -> downloads the **HashMap** (if there is no HashMap the delta will be the current local)
2. Source -> proceed to **DeltaPathMap**  creation and command provisionning
3. Source -> uploads files with a .<SyncID> prefix to the service
4. Source -> uploads the hasMap of the current root folder and finalize the transaction (un prefix the files, and call the sanitizing procedure =  removal of orpheans, **Optionaly** the synch server can send a push notification to the slave clients to force the step 5)
5. Destination -> downloads the current **HashMap** ( Or its HashMapView representation??)
6. Destination -> proceeds to **DeltaPathMap** creation and command provisionning
7. Destination -> downloads the files (on any missing file the task list is interrupted, the local hash map is recomputed and we step back to 5)
8. Destination -> on completion the synchronization is finalized. (We redownload the **HashMap** and compare to conclude if stepping back to 5 is required.)

# BartlebySync PHP #
A very simple PHP sync restfull service to use in conjonction with BartlebySync objc, swift client

### Status codes ###

* 1xx: Informational - Request received, continuing process
* 2xx: Success - The action was successfully received, understood, and accepted
* 3xx: Redirection - Further action must be taken in order to complete the request
* 4xx: Client Error - The request contains bad syntax or cannot be fulfilled
* 5xx: Server Error - The server failed to fulfill an apparently valid request

#### Notable client errors ####

* 401 => 'Unauthorized' : if auth is required
* 423 => 'Locked' : if locked

##### Status code references ####
[www.w3.org] (http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html), [www.ietf.org] (http://www.ietf.org/assignments/http-status-codes/http-status-codes.xml)

#### Commands  : ####

Any command is encoded in an array.
Json Encoded command [BCopy,<BDestination>,<BSource>] : [1,'a/a.caf','b/c/c.caf'] will copy the file from 'b/c/c.caf' to 'a/a.caf'

##### Sync CMD ####
```c
typedef NS_ENUM (NSUInteger,
                  BSyncCommand) {
    BCreate   = 0 , 
    BUpdate   = 1 ,
    BMove     = 2 , 
    BCopy     = 3 , 
    BDelete   = 4 
} ;


typedef NS_ENUM(NSUInteger,
                BSyncCMDParamRank) {
    BCommand     = 0,
    BDestination = 1,
    BSource      = 2
} ;

```



## Installation of BartlebySync PHP ## 

Prerequisite, you should have a deployed Bartleby's app.

### Copy the BartlebySync module folder

BartlebySync Module folder Should be installed beside Bartleby's folder.
By default the file repository will be located in a "files/" folder beside Bartleby's folder
Normally The Repository Folder "files/" should be allocated to the "www-data" user and the right  set to 711.

### BartlebySyncConfiguration.php

- Define the BARTLEBY_SYNC_CREATIVE_KEY and BARTLEBY_SYNC_SECRET_KEY
- Define if necessary BARTLEBY_SYNC_ROOT_PATH, REPOSITORY_HOST, REPOSITORY_WRITING_PATH 


### Bartleby's app Configuration.php

In getEndpointsSearchPaths() add the module's endpoint folder to the searchpaths
```php
    function getEndpointsSearchPaths() {
        $searchPaths = parent::getEndpointsSearchPaths();
        ...
        $searchPaths[]=dirname(dirname($this->_executionDirectory)).'/BartlebySync/EndPoints/';
        return $searchPaths;
    }
```

Add the persmission in _configure()

```php  
    ...
 
    // BartlebySync
    'BartlebySyncSupports->call'=>array('level' => PERMISSION_NO_RESTRICTION),
    'BartlebySyncInstall->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
    'BartlebySyncCreateTree->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
    'BartlebySyncTouchTree->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
    'BartlebySyncGetHashMap->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
    'BartlebySyncGetFile->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
    'BartlebySyncUploadFileTo->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
    'BartlebySyncFinalizeTransactionIn->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
    'BartlebySyncFinalizeTransactionIn->cleanUp'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),// May be suspended ( it is used on finalizeTransactionIn)
    'BartlebySyncRemoveGhosts->call'=>array('level' => PERMISSION_BY_IDENTIFICATION)
```

Add the routes aliases 

```php  
    protected function  _getEndPointsRouteAliases() {
        $routes = parent::_getEndPointsRouteAliases();
        $mapping = array(
            ... 
            // BartlebySync
            'GET:/BartlebySync/isSupported'=>array('BartlebySyncSupports','call'),
            'GET:/BartlebySync/reachable'=>array('Reachable','GET'),
            'POST:/BartlebySync/install'=>array('BartlebySyncInstall','call'),
            'POST:/BartlebySync/create/tree/{treeId}'=>array('BartlebySyncCreateTree','call'),
            'POST:/BartlebySync/touch/tree/{treeId}'=>array('BartlebySyncTouchTree','call'),
            'GET:/BartlebySync/tree/{treeId}'=>array('BartlebySyncTouchTree','call'),//touch alias
            'GET:/BartlebySync/hashMap/tree/{treeId}'=>array('BartlebySyncGetHashMap','call'),
            'GET:/BartlebySync/file/tree/{treeId}'=>array('BartlebySyncGetFile','call'),
            'POST:/BartlebySync/uploadFileTo/tree/{treeId}'=>array('BartlebySyncUploadFileTo','call'),
            'POST:/BartlebySync/finalizeTransactionIn/tree/{treeId}'=>array('BartlebySyncFinalizeTransactionIn','call'),
            'POST:/BartlebySync/cleanUp/tree/{treeId}'=>array('BartlebySyncFinalizeTransactionIn','cleanUp'), // May be suspended ( it is used on finalizeTransactionIn)
            'POST:/BartlebySync/removeGhosts'=>array('BartlebySyncRemoveGhosts','call')
        );
        $routes->addAliasesToMapping($mapping);
        return $routes;
    }
```



## "The ultimate" Commandline tutorial ##

Copy and paste the command line in your shell environment.

### 1 Prerequesite:"Install HTTPie" ###
You can install [HTTPie] (https://github.com/jkbrzt/httpie)

### 2 Test if BartlebySync is supported ###

Define the BASE_URL temp variable : 

```shell
    BASE_URL=http://yd.local/api/v1/
````

Test if BartlebySync is supported : 

```shell
     http GET ${BASE_URL}BartlebySync/isSupported    
```
Successful Response HTTP status code 200: 

```shell
    HTTP/1.1 200 OK
    Access-Control-Allow-Methods: *
    Access-Control-Allow-Origin: *
    Connection: Keep-Alive
    Content-Length: 17
    Content-Type: application/json
    Date: Tue, 29 Dec 2015 08:57:47 GMT
    Keep-Alive: timeout=5, max=100
    Server: Apache
    X-Powered-By: PHP/5.6.10
    
    {
        "version": "1.5"
    }
```

### 3 Call BartlebySync Reachability endpoint

```shell
    http GET ${BASE_URL}BartlebySync/reachable
```

Successful Response HTTP status code 200: 

```shell
    HTTP/1.1 200 OK
    Access-Control-Allow-Methods: *
    Access-Control-Allow-Origin: *
    Connection: Keep-Alive
    Content-Length: 4
    Content-Type: application/json
    Date: Tue, 29 Dec 2015 10:06:38 GMT
    Keep-Alive: timeout=5, max=100
    Server: Apache
    X-Powered-By: PHP/5.6.10
    
    "{}"
```

### 4 create local assets 

Create a Sample folder 

```shell
    mkdir ~/Desktop/Samples/
```

Create a Sample files  

```shell
    touch ~/Desktop/Samples/text1.txt
    echo "Eureka1" > ~/Desktop/Samples/text1.txt
    touch ~/Desktop/Samples/text2.txt
    echo "Eureka2" > ~/Desktop/Samples/text2.txt
    touch ~/Desktop/Samples/hashmap.data
    echo  "[]" > ~/Desktop/Samples/hashmap.data
````

### 5 install the repository 

```shell
    http -v -f POST ${BASE_URL}BartlebySync/install/
````

Successful Response HTTP status code 201: 

```shell
    HTTP/1.1 201 Created
    Access-Control-Allow-Methods: *
    Access-Control-Allow-Origin: *
    Connection: Keep-Alive
    Content-Length: 4
    Content-Type: application/json
    Date: Tue, 29 Dec 2015 10:08:09 GMT
    Keep-Alive: timeout=5, max=100
    Server: Apache
    X-Powered-By: PHP/5.6.10
    
    "{}"
```

### 5 creates trees 

```shell
    http -v -f POST  ${BASE_URL}BartlebySync/create/tree/1 
    http -v -f POST  ${BASE_URL}BartlebySync/create/tree/2
    http -v -f POST  ${BASE_URL}BartlebySync/create/tree/3
```

Successful Response HTTP status code 201: 
 
```shell
    HTTP/1.1 201 Created
    Access-Control-Allow-Methods: *
    Access-Control-Allow-Origin: *
    Connection: Keep-Alive
    Content-Length: 4
    Content-Type: application/json
    Date: Tue, 29 Dec 2015 10:15:27 GMT
    Keep-Alive: timeout=5, max=100
    Server: Apache
    X-Powered-By: PHP/5.6.10
    
    "{}"
```

### 5A delete the tree 3 

```shell
    http -v -f DELETE ${BASE_URL}BartlebySync/delete/tree/3
```

Successful Response HTTP status code 200

```shell
     HTTP/1.1 200 OK
     Access-Control-Allow-Methods: *
     Access-Control-Allow-Origin: *
     Connection: Keep-Alive
     Content-Length: 4
     Content-Type: application/json
     Date: Fri, 20 May 2016 07:32:36 GMT
     Keep-Alive: timeout=5, max=100
     Server: Apache
     X-Powered-By: PHP/5.6.10
     
     "{}"
```



    

### 5B touch the tree "1" to reset its public id, then try an unexisting ID

```shell
    http -v -f POST ${BASE_URL}BartlebySync/touch/tree/1
```
    
Successful Response HTTP status code 201

```shell 
    HTTP/1.1 201 Created
    Access-Control-Allow-Methods: *
    Access-Control-Allow-Origin: *
    Connection: Keep-Alive
    Content-Length: 4
    Content-Type: application/json
    Date: Tue, 29 Dec 2015 11:11:34 GMT
    Keep-Alive: timeout=5, max=100
    Server: Apache
    X-Powered-By: PHP/5.6.10
    
    "{}"
```
  
Try an unexisting ID

```shell
    http -v -f POST ${BASE_URL}BartlebySync/touch/tree/unexisting-tree
```

Should Respond HTTP status code 404

```shell
    HTTP/1.1 404 Not Found
    Access-Control-Allow-Methods: *
    Access-Control-Allow-Origin: *
    Connection: Keep-Alive
    Content-Length: 4
    Content-Type: application/json
    Date: Tue, 29 Dec 2015 11:13:32 GMT
    Keep-Alive: timeout=5, max=100
    Server: Apache
    X-Powered-By: PHP/5.6.10
    
    "{}"
```

### 6 try to Grab the hashmap that should not exists

```shell
    http -v GET  ${BASE_URL}BartlebySync/hashMap/tree/1/ redirect==true returnValue==false
```

Should Respond HTTP status code 404

```shell
    HTTP/1.1 404 Not Found
    Access-Control-Allow-Methods: *
    Access-Control-Allow-Origin: *
    Connection: Keep-Alive
    Content-Length: 4
    Content-Type: application/json
    Date: Tue, 29 Dec 2015 11:15:37 GMT
    Keep-Alive: timeout=5, max=100
    Server: Apache
    X-Powered-By: PHP/5.6.10
    
    "{}"
```

### 7 Upload the files
    
```shell
    SYNC_ID="my_sync_id_"
    http -v -f POST  ${BASE_URL}BartlebySync/uploadFileTo/tree/1/ destination='file1.txt' syncIdentifier=${SYNC_ID} source@~/Desktop/Samples/text1.txt
    http -v -f POST  ${BASE_URL}BartlebySync/uploadFileTo/tree/1/ destination='file2.txt' syncIdentifier=${SYNC_ID} source@~/Desktop/Samples/text2.txt
```
    
HTTPie details on successful upload should Respond HTTP status code 201 ("created")

```shell
    POST /api/v1/BartlebySync/uploadFileTo/tree/1/ HTTP/1.1
    Accept: */*
    Accept-Encoding: gzip, deflate
    Connection: keep-alive
    Content-Length: 364
    Content-Type: multipart/form-data; boundary=5d042e80f3f4472882d2a071d2806ce2
    Host: yd.local
    User-Agent: HTTPie/0.9.2
    
    --5d042e80f3f4472882d2a071d2806ce2
    Content-Disposition: form-data; name="destination"
    
    a/file1.txt
    --5d042e80f3f4472882d2a071d2806ce2
    Content-Disposition: form-data; name="syncIdentifier"
    
    my_sync_id_
    --5d042e80f3f4472882d2a071d2806ce2
    Content-Disposition: form-data; name="source"; filename="text1.txt"
    
    Eureka1
    
    --5d042e80f3f4472882d2a071d2806ce2--
    
    HTTP/1.1 201 Created
    Access-Control-Allow-Methods: *
    Access-Control-Allow-Origin: *
    Connection: Keep-Alive
    Content-Length: 4
    Content-Type: application/json
    Date: Tue, 29 Dec 2015 11:18:22 GMT
    Keep-Alive: timeout=5, max=100
    Server: Apache
    X-Powered-By: PHP/5.6.10
    
    "{}"
```

### 8 Finalize the upload session

To remain simple we donnot inject the real hash map data but a placeholder.

```shell

    http -v -f POST ${BASE_URL}BartlebySync/finalizeTransactionIn/tree/1/ commands='[[0 ,"file1.txt"],[0 ,"file2.txt"]]' syncIdentifier=${SYNC_ID} hashMap@~/Desktop/Samples/hashmap.data 

```

NB: You could manually inject a checksum via cksum

```shell
    cksum ~/Desktop/Samples/text1.txt
    1812593931 8 /Users/bpds/Desktop/Samples/text1.txt
    cksum ~/Desktop/Samples/text2.txt
    1851787394 8 /Users/bpds/Desktop/Samples/text2.txt
   
    Update the hashmap.data file 
    {
        "pthToH" :  {
            "text1.txt" : 1812593931,
            "text2.txt" : 1851787394,
        }
    }
```
    
OBJC and swift client are implementing the delta logic, and all the synchronization scenari.
    

### Down Stream samples 


Download a hashmap 

```shell
   http -v GET  ${BASE_URL}BartlebySync/hashMap/tree/1/ redirect==false returnValue==true
```



Download a file 
```shell
    http -v GET ${BASE_URL}BartlebySync/file/tree/1/ path=='file1.txt' redirect==false returnValue==true
```    
    
The response with redirect==true returnValue==false

```shell
   
    HTTP/1.1 200 OK
    Access-Control-Allow-Methods: *
    Access-Control-Allow-Origin: *
    Connection: Keep-Alive
    Content-Length: 13
    Content-Type: application/json
    Date: Tue, 29 Dec 2015 13:59:42 GMT
    Keep-Alive: timeout=5, max=100
    Server: Apache
    X-Powered-By: PHP/5.6.10
    
    [
        "Eureka1\n"
    ]
    
```    
    
The response with redirect==true 

```shell
    http -v GET ${BASE_URL}BartlebySync/file/tree/1/ path=='file1.txt' redirect==true
    
   
    GET /api/v1/BartlebySync/file/tree/1/?redirect=true&path=file1.txt HTTP/1.1
    Accept: */*
    Accept-Encoding: gzip, deflate
    Connection: keep-alive
    Host: yd.local
    User-Agent: HTTPie/0.9.2
    
            
    HTTP/1.1 307 Temporary Redirect
    Connection: Keep-Alive
    Content-Length: 0
    Content-Type: text/html; charset=UTF-8
    Date: Tue, 29 Dec 2015 14:01:19 GMT
    Keep-Alive: timeout=5, max=100
    Location: http://yd.repository.local:9999/70e441ffc22a069b927d8b3791256f52/file1.txt
    Server: Apache
    X-Powered-By: PHP/5.6.10
```

You can access directly to the file in a browser : http://yd.repository.local:9999/70e441ffc22a069b927d8b3791256f52/file1.txt

   
# Remove Ghosts 

Remove Ghosts ( in case of repository corruption e.g : manual deletion of assets or injection of files) 

```shell
    http -v -f POST ${BASE_URL}BartlebySync/removeGhosts 

    HTTP/1.1 201 Created
    Access-Control-Allow-Methods: *
    Access-Control-Allow-Origin: *
    Connection: Keep-Alive
    Content-Length: 418
    Content-Type: application/json
    Date: Tue, 29 Dec 2015 14:17:14 GMT
    Keep-Alive: timeout=5, max=100
    Server: Apache
    X-Powered-By: PHP/5.6.10
    
    {
        "deletedPath": [
            ".../files/.DS_Store", 
            ".../files/ok.txt"
        ], 
        "messages": [
            ".../files/.DS_Store is not a folder | ", 
            ".../files/ok.txt is not a folder | "
        ]
    }
```

# Native Clients #

- OSX Bsync commandline 
- OSX BsyncXPC services
- Bsync lib (iOS, tvOS, OSX)


# BartlebySync 1.0 #

- BartlebySync 1.0 supports hashMapView : A hashMapView file is a hasmap that is stored with the regular files that should be used  Master>Slave downstream only
- BartlebySync 1.0 supports  folder directives.json {"source":"http://...", "destination":"file://...","role":"<[slave,master,both]>","dataView":"<name of view none for global hashmap>","repositoryRelativePath":"/medias/"} 
- BartlebySync 1.0 supports Interruptibily per command (once a command has be executed on resume it is skipped) ?
- BartlebySync 1.0 and offers a Sync progress interface ?
#BMS#->{"filename":"destroy-repository.sh","checksum":350952541,"relativePath":"destroy-repository.sh","size":51}<-#BME#
#!/usr/bin/env bash

rm -Rf ./files/
mkdir ./files/#BMS#->{"filename":"GenerativeConstants.php","checksum":3576378709,"relativePath":"GenerativeConstants.php","size":673}<-#BME#
<?php

if (!defined('BARTLEBY_FLEXIONS_ENVIRONMENT')){

    define('BARTLEBY_FLEXIONS_ENVIRONMENT',true);

    // Define the absolutes xOS clients generative export path
    define('xOS_APP_EXPORT_PATH','AP_xOS_AEP');
    define('xOS_BARTLEBYS_COMMONS_EXPORT_PATH','AP_xOS_BCEP');

    // Define relative path from Bartleby's parent folder to the public App Root Folder
    // You adjust this relative path
    // The most current configuration is :
    //  /Bartleby/              <- Bartleby's framework
    //  /Barleby_xxx/           <- Bartleby's modules
    //  /www/                   <- Bartleby's app document root
    define('APP_PUBLIC_ROOT_FOLDER','AP_PRF');

}#BMS#->{"filename":"globalflexions.sh","checksum":1972561042,"relativePath":"globalflexions.sh","size":301}<-#BME#
#!/usr/bin/env bash



cd ./Bartleby/Commons.flexions/EndPointsFromDefinitions/
php -f run.php

cd ../../../

cd ./Bartleby/Commons.flexions/App/
php -f run.php

cd ../../../

cd ./YouDubApi.flexions/EndPointsFromDefinitions/
php -f run.php

cd ../../

cd ./App.flexions/App/
php -f run.php

cd ../../#BMS#->{"filename":"BartlebySyncConfiguration.php","checksum":3112100276,"relativePath":"Modules\/BartlebySyncConfiguration.php","size":2130}<-#BME#
<?php

if (!defined('BARTLEBY_SYNC_ROOT_PATH')) {

    define('BARTLEBY_SYNC_ROOT_PATH', dirname(__FILE__).'/');

    ///////////////////////
    // KEYS
    ///////////////////////

    
    define('BARTLEBY_SYNC_SECRET_KEY', 'AP_BS_SSK'); // Used create the data system folder

    ///////////////////////
    // REPOSITORY
    ///////////////////////


    // At this point $configuration is set
    $stage=$configuration->STAGE();

    if ($stage==Stages::DEVELOPMENT){
        define('BARTLEBY_SYNC_SECRET_KEY', 'AP_BS_SSK_LOCAL'); // Used create the data system folder
        define('REPOSITORY_HOST','AP_BS_RH_DEVELOPMENT');
        define('REPOSITORY_WRITING_PATH', dirname(__DIR__) .DIRECTORY_SEPARATOR.'files'.DIRECTORY_SEPARATOR);
    }elseif($stage==Stages::PRODUCTION){
        define('BARTLEBY_SYNC_SECRET_KEY', 'AP_BS_SSK_PRODUCTION'); // Used create the data system folder
        define('REPOSITORY_HOST','AP_BS_RH_PRODUCTION');
        define('REPOSITORY_WRITING_PATH', dirname(__DIR__) .DIRECTORY_SEPARATOR.'files'.DIRECTORY_SEPARATOR);
    }elseif($stage==Stages::ALTERNATIVE){
        define('BARTLEBY_SYNC_SECRET_KEY', 'AP_BS_SSK_ALTERNATIVE'); // Used create the data system folder
        define('REPOSITORY_HOST','AP_BS_RH_ALTERNATIVE');
        define('REPOSITORY_WRITING_PATH', dirname(__DIR__) .DIRECTORY_SEPARATOR.'files'.DIRECTORY_SEPARATOR);
    }else{
        // It is local Stages::LOCAL
        define('BARTLEBY_SYNC_SECRET_KEY', 'AP_BS_SSK_LOCAL'); // Used create the data system folder
        define('REPOSITORY_HOST','AP_BS_RH_LOCAL');
        define('REPOSITORY_WRITING_PATH', dirname(__DIR__) .DIRECTORY_SEPARATOR.'files'.DIRECTORY_SEPARATOR);
    }


    ///////////////////////
    // PERSITENCY
    ///////////////////////

    $a=BARTLEBY_SYNC_ROOT_PATH . 'Core/IOManagerFS.php';
    require_once BARTLEBY_SYNC_ROOT_PATH . 'Core/IOManagerFS.php';  // Default adapter
    define('PERSISTENCY_CLASSNAME', 'BartlebySync\Core\IOManagerFS');

    //////////////////////
    // MISC
    //////////////////////

    define('MIN_TREE_ID_LENGTH', 1);

    define('CLEAN_UP_ON_ERROR',false);


}#BMS#->{"filename":".htaccess","checksum":2201738643,"relativePath":"www\/.htaccess","size":347}<-#BME#
<IfModule mod_rewrite.c>

RewriteEngine On

# Routes to API
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^api/v1/(.*)$ api/go.php?request=$1 [QSA,NC,L]

# Routes to Pages
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule (.*)$ Pages/go.php?request=$1 [QSA,NC,L]

</IfModule>#BMS#->{"filename":"go.php","checksum":2373792713,"relativePath":"www\/api\/go.php","size":713}<-#BME#
<?php

namespace Bartleby;

require_once dirname(__DIR__) . '/Configuration.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/Gateway.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/JsonResponse.php';

use Bartleby\Configuration;
use Bartleby\Core\Gateway;
use Bartleby\Core\Mode;
use Bartleby\Core\JsonResponse;

$currentDirectory=__DIR__.'/';
$configuration=new Configuration($currentDirectory,BARTLEBY_ROOT_FOLDER);
$gateway = new Gateway($configuration,Mode::API);

try {
    $gateway->getResponse();
} catch (\Exception $e) {
    $status = 500;
    $header = 'HTTP/1.1 ' . $status . ' ' . JsonResponse::getRequestStatus($status);
    header($header);
    echo json_encode(Array('error' => $e->getMessage()));
}#BMS#->{"filename":"Configuration.php","checksum":763551156,"relativePath":"www\/Configuration.php","size":7968}<-#BME#
<?php

// SHARED CONFIGURATION BETWEEN THE API & MAIN PAGES

namespace Bartleby;

// Where is Bartleby?
$baseDirectory = (dirname(__DIR__));
define('BARTLEBY_ROOT_FOLDER', $baseDirectory . '/Bartleby/');
define('BARTLEBY_PUBLIC_FOLDER',__DIR__ .'/');

require_once BARTLEBY_ROOT_FOLDER . 'Core/RoutesAliases.php';
require_once BARTLEBY_ROOT_FOLDER . 'Commons/Filters/FilterEntityPasswordRemover.php';
require_once BARTLEBY_ROOT_FOLDER . 'Commons/Filters/FilterCollectionOfEntityPasswordsRemover.php';
require_once BARTLEBY_ROOT_FOLDER . 'Commons/Filters/FilterHookByClosure.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/KeyPath.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/Stages.php';

require_once __DIR__ . '/api/v1/_generated/GeneratedConfiguration.php';

use Bartleby\Core\Stages;
use Bartleby\GeneratedConfiguration;

class Configuration extends GeneratedConfiguration {

    ////////////////////
    // BEHAVIORAL CONSTS
    ///////////////////

    /*
     * Can be used during development to simplify the tests.
     */
    const BY_PASS_SALTED_TOKENS = false;

    /*
    * Should be used once to call destructive installer.
    */
    const ALLOW_DESTRUCTIVE_INSTALLER = false;

    /**
     * Used to get more verbose response on Core issues
     */
    const DEVELOPER_DEBUG_MODE = true;


    /**
     * If set to true on multiple creation attempts
     * The exception thrown by the creation will be catched
     */
    const IGNORE_MULTIPLE_CREATION_IN_CRUD_MODE = true;


    /**
     * @param string
     * @param string
     */
    public function __construct($executionDirectory, $bartlebyRootDirectory) {
        parent::__construct($executionDirectory, $bartlebyRootDirectory);
        $this->_configure();
    }


    private function _configure() {

        /////////////////////////
        // APP configuration
        /////////////////////////

        $this->_STAGE = Stages::DEVELOPMENT;
        $this->_VERSION = 'v1';
        $this->_SECRET_KEY = 'AP_SK'; // 32 Bytes min
        $this->_SHARED_SALT='AP_PSS'; // 32 Bytes min

        /////////////////////////
        // MONGO DB
        /////////////////////////

        $this->_MONGO_DB_NAME = 'AP_MDN';


        $this->_configurePermissions();

        /////////////////////////
        // PARSE parameters.json
        /////////////////////////

        try{
            $path=__DIR__.'/Protected/parameters.json';
            $string=file_get_contents($path);
            if(isset($string)){
                $conf=json_decode($string,true);
                if(is_array($conf)){
                    if (array_key_exists("superAdmins",$conf)){
                        $sAdmins=$conf["superAdmins"];
                        if (is_array($sAdmins)){
                            $this->addSuperAdminUIDs($sAdmins);
                        }
                    }
                }
            }
        }catch (\Exception $e){
            // Silent catch
        }
    }



    protected function _configurePermissions(){

        parent::_configurePermissions();
        $permissions = array(

            // Check the Generated configuration
            // All the calls are set by default to PERMISSION_BY_TOKEN
            // Including AUTHENTICATION

            // You can add or modify permissions here.
            // If you declare a rule it will replace the generated rule.

            // Un comment
            //'CreateUser->call'=>array('level' =>PERMISSION_NO_RESTRICTION),

            //SSE Time
            'SSETime->GET'=> array('level'=> PERMISSION_NO_RESTRICTION),

            // Pages
            'Start->GET'=>array('level' => PERMISSION_NO_RESTRICTION),
            'Time->GET'=>array('level' => PERMISSION_NO_RESTRICTION),

            // BartlebySync
            'BartlebySyncSupports->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
            'BartlebySyncInstall->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
            'BartlebySyncCreateTree->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
            'BartlebySyncTouchTree->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
            'BartlebySyncGetHashMap->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
            'BartlebySyncGetFile->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
            'BartlebySyncUploadFileTo->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
            'BartlebySyncFinalizeTransactionIn->call'=>array('level' => PERMISSION_BY_IDENTIFICATION),
            'BartlebySyncFinalizeTransactionIn->cleanUp'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY),// May be suspended ( it is used on finalizeTransactionIn)
            'BartlebySyncRemoveGhosts->call'=>array('level' => PERMISSION_IS_GRANTED_TO_SUPER_ADMIN_ONLY)
        );
        $this->addPermissions($permissions);
    }



    /////////////////////////
    // Pages aliases
    /////////////////////////

    protected function _getPagesRouteAliases() {
        $routes = parent::_getPagesRouteAliases();
        $mapping = array(
            '' => 'Start',
            'time' => 'Time',
            '*' => 'NotFound'
        );
        $routes->addAliasesToMapping($mapping);
        return $routes;
    }

    /////////////////////////
    // End points aliases
    /////////////////////////
    protected function  _getEndPointsRouteAliases() {
        $routes = parent::_getEndPointsRouteAliases();
        $mapping = array(
            //'POST:/user/{userId}/comments'=>array('CommentsByUser','POST_method_for_demo'),
            //'DELETE:/user/{userId}/comments'=>array('CommentsByUser','DELETE'),
            'time' => 'SSETime', // A server sent event sample
            // BartlebySync
            'GET:/BartlebySync/isSupported'=>array('BartlebySyncSupports','call'),
            'GET:/BartlebySync/reachable'=>array('Reachable','GET'),
            'POST:/BartlebySync/install'=>array('BartlebySyncInstall','call'),
            'POST:/BartlebySync/create/tree/{treeId}'=>array('BartlebySyncCreateTree','call'),
            'POST:/BartlebySync/touch/tree/{treeId}'=>array('BartlebySyncTouchTree','call'),
            'GET:/BartlebySync/tree/{treeId}'=>array('BartlebySyncTouchTree','call'),//touch alias
            'GET:/BartlebySync/hashMap/tree/{treeId}'=>array('BartlebySyncGetHashMap','call'),
            'GET:/BartlebySync/file/tree/{treeId}'=>array('BartlebySyncGetFile','call'),
            'POST:/BartlebySync/uploadFileTo/tree/{treeId}'=>array('BartlebySyncUploadFileTo','call'),
            'POST:/BartlebySync/finalizeTransactionIn/tree/{treeId}'=>array('BartlebySyncFinalizeTransactionIn','call'),
            'POST:/BartlebySync/cleanUp/tree/{treeId}'=>array('BartlebySyncFinalizeTransactionIn','cleanUp'), // May be suspended ( it is used on finalizeTransactionIn)
            'POST:/BartlebySync/removeGhosts'=>array('BartlebySyncRemoveGhosts','call')
        );
        $routes->addAliasesToMapping($mapping);
        return $routes;
    }


    // ################
    // ### ADVANCED ###
    // ################


    /////////////////////////
    // SEARCH PATHS
    /////////////////////////

    function getEndpointsSearchPaths() {
        $searchPaths = parent::getEndpointsSearchPaths();
        // You can add your own search paths if necessary
        // The search paths are absolute.
        // BartlebySync
        $searchPaths[]=dirname(dirname($this->_executionDirectory)).'/BartlebySync/EndPoints/';
        return $searchPaths;
    }

    function getPagesSearchPaths() {
        $searchPaths = parent::getPagesSearchPaths();
        // You can add your own search paths if necessary
        // The search paths are absolute.
        return $searchPaths;
    }

    function getModelsSearchPaths() {
        $searchPaths = parent::getModelsSearchPaths();
        // You can add your own search paths if necessary
        // The search paths are absolute.
        return $searchPaths;
    }
}#BMS#->{"filename":"are-cookies-enabled.php","checksum":2784482050,"relativePath":"www\/Diagnostics\/are-cookies-enabled.php","size":307}<-#BME#
<?php
if (isset($_GET['cookiecheck'])) {
    if (isset($_COOKIE['testcookie'])) {
        print "Cookies are enabled";
    } else {
        print "Cookies are not enabled";
    }
} else {
    setcookie('testcookie', "testvalue");
    die(header("Location: " . $_SERVER['PHP_SELF'] . "?cookiecheck=1"));
}
?>#BMS#->{"filename":"is-mcrypt-supported.php","checksum":3067284155,"relativePath":"www\/Diagnostics\/is-mcrypt-supported.php","size":592}<-#BME#
<?php

require_once dirname(__DIR__).'/Configuration.php';
use Bartleby\Configuration;

$directory=dirname(__DIR__).'/';
$configuration=new Configuration($directory,BARTLEBY_ROOT_FOLDER);;

if(function_exists('mcrypt_encrypt')) {
    print '"mcrypt" is available. ';
}else{
    print '"mcrypt" is not available! ';
}
if ($configuration->encryptIdentificationValue('NO_BODY','NO_DOCUMENT')=='NO_DOCUMENT'){
    print "But the authentication engine is not able to use it. That's a minor security issue that exposes publicly the userID via a cookie.";
}else{
    print '"userId" is crypted!';
}
#BMS#->{"filename":"is-mongodb-available.php","checksum":2688709000,"relativePath":"www\/Diagnostics\/is-mongodb-available.php","size":635}<-#BME#
<?php

namespace Bartleby;

require_once dirname(__DIR__).'/Configuration.php';
use Bartleby\Configuration;

$directory=dirname(__DIR__).'/';
$configuration=new Configuration($directory,BARTLEBY_ROOT_FOLDER);;

use MongoClient;

if (class_exists('MongoClient')) {
    print "PHP Legacy Mongo client is Installed";
}
else {
    print "PHP Legacy Mongo  client is not Installed";
}



/*
use \MongoDB\Driver ;


if (class_exists('Driver')) {
    $client=new Driver;
    print "PHP MongoDB client is Installed";
}
else {
    print "PHP MongoDB client is not Installed";
}

print(' (You should may be start the daemon : sudo mongod)');

*/#BMS#->{"filename":"phpinfo.php","checksum":1981069917,"relativePath":"www\/Diagnostics\/phpinfo.php","size":19}<-#BME#
<?php phpinfo(); ?>#BMS#->{"filename":"index.php","checksum":952179748,"relativePath":"www\/index.php","size":43}<-#BME#
<?php
include_once __DIR__.'/Pages/go.php';#BMS#->{"filename":"go.php","checksum":2966910473,"relativePath":"www\/Pages\/go.php","size":705}<-#BME#
<?php

namespace Bartleby;

require_once dirname(__DIR__) . '/Configuration.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/Gateway.php';
require_once BARTLEBY_ROOT_FOLDER . 'Core/Response.php';

use Bartleby\Configuration;
use Bartleby\Core\Gateway;
use Bartleby\Core\Mode;
use bartleby\Core\Response;

$currentDirectory=__DIR__.'/';
$configuration=new Configuration($currentDirectory,BARTLEBY_ROOT_FOLDER);;
$gateway = new Gateway($configuration,Mode::PAGES);

try {
    $gateway->getResponse();
} catch (\Exception $e) {
    $status = 500;
    $header = 'HTTP/1.1 ' . $status . ' ' . Response::getRequestStatus($status);
    header($header);
    echo json_encode(Array('error' => $e->getMessage()));
}
#BMS#->{"filename":"BasePage.php","checksum":211058200,"relativePath":"www\/Pages\/v1\/Pages\/BasePage.php","size":504}<-#BME#
<?php

namespace Bartleby\Pages;

require_once BARTLEBY_ROOT_FOLDER . 'Mongo/MongoHTML5Page.php';

use Bartleby\Core\CallData;
use Bartleby\Mongo\MongoHTML5Page;


class BasePageCallData extends CallData {

}
class BasePage extends  MongoHTML5Page{

    protected function _copyleft(){
        return '<p>Powered by Bartleby | Authenticated:'.($this->isAuthenticated("xxxx")?'<a href="/api/v1/user/logout/?dID=xxxx" _target="_blank">With ID '.$this->getCurrentUserID("xxxx").'</a>':'No').'</p>';
    }

}#BMS#->{"filename":"NotFound.php","checksum":2671477027,"relativePath":"www\/Pages\/v1\/Pages\/NotFound.php","size":896}<-#BME#
<?php

namespace Bartleby\Pages;

require_once __DIR__.'/BasePage.php';

use Bartleby\Core\HTMLResponse;

final class NotFoundCallData extends BasePageCallData {

}

final class NotFound extends BasePage {

    function GET(NotFoundCallData $parameters) {
        return $this->getDocument();
    }


    function POST(NotFoundCallData $parameters) {
        return $this->getDocument();
    }


    /**
     * @return HTMLResponse
     */
    public function getDocument() {
        $r=new HTMLResponse();
		$r->statusCode=404;
        $r->document='<!DOCTYPE HTML>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Default 404 page</title>
</head>
<body>
	<header>
		<nav><ul></ul></nav>
	</header>
	<section>
		<article>
			<p>Not found</p>
		</article>
	</section>
	<footer>'.$this->_copyleft().'</footer>
</body>
</html>';
        return $r;
    }

}#BMS#->{"filename":"Start.php","checksum":848963299,"relativePath":"www\/Pages\/v1\/Pages\/Start.php","size":925}<-#BME#
<?php

// DEMO CLASS FOR TEST PURPOSES

namespace Bartleby\Pages;

require_once __DIR__.'/BasePage.php';

use Bartleby\Core\HTMLResponse;

final class StartCallData extends BasePageCallData {

}

final class Start extends BasePage {

    function GET(StartCallData $parameters) {
        return $this->getDocument();
    }

    function POST(StartCallData $parameters) {
        return $this->getDocument();
    }

    /**
     * @return HTMLResponse
     */
    public function getDocument() {
        $r=new HTMLResponse();
        $r->statusCode=200;
        $r->document='<!DOCTYPE HTML>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Default Start  page</title>
</head>
<body>
	<header>
		<nav><ul></ul></nav>
	</header>
	<section>
		<article>
			<p>Start page</p>
		</article>
	</section>
	<footer>'.$this->_copyleft().'</footer>
</body>
</html>';
        return $r;
    }

}#BMS#->{"filename":"Time.php","checksum":2134676794,"relativePath":"www\/Pages\/v1\/Pages\/Time.php","size":1417}<-#BME#
<?php

// DEMO CLASS FOR TEST PURPOSES

namespace Bartleby\Pages;


require_once __DIR__.'/BasePage.php';

use Bartleby\Core\HTMLResponse;

final class TimeCallData extends BasePageCallData {

}

final class Time extends BasePage {

    function GET(TimeCallData $parameters) {
        $r=new HTMLResponse();
        $r->statusCode=200;
        // To support complex deployments we do inject $_SERVER['REQUEST_URI']
        // But remove the last component of the URI
        $url='http' . (isset($_SERVER['HTTPS']) ? 's' : '') .'://'.$_SERVER['SERVER_NAME'].str_replace('time','',$_SERVER['REQUEST_URI']).'api/v1/time';
        $r->document='<!DOCTYPE HTML>
<html>
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title>Server Sent Event Time Sample</title>
</head>
<body>
	<header>
		<nav><ul></ul></nav>
	</header>
	<section>
		<article>
			<p id="output"></p>
		</article>
	</section>
	<footer>'.$this->_copyleft().' <a href="'.$url.'"> Time SSE </a> <em>'.$url.'</em></footer>
</body>
<script>
    var output = document.getElementById("output");
    var source = new EventSource("'.$url.'");
    var counter = 1;
    var lastLine ;
    source.addEventListener("tic",function(evt){
            var currentData=JSON.parse(evt.data)
            output.innerHTML=currentData.serverTime;
            counter++;
            return;
    })
</script>
</html>';
        return $r;
    }




}#BMS#->{"filename":"parameters.json","checksum":3308146688,"relativePath":"www\/parameters.json","size":18}<-#BME#
{"superAdmins":[]}#BMS#->{"filename":".htaccess","checksum":3862890224,"relativePath":"www\/Protected\/.htaccess","size":30}<-#BME#
Order Allow,Deny
Deny from all#BMS#->{"filename":"parameters.json","checksum":3308146688,"relativePath":"www\/Protected\/parameters.json","size":18}<-#BME#
{"superAdmins":[]}