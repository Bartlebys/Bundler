
    // MARK: - BaseObject Block

    // This  id is always  created locally and used as primary index by MONGODB
    internal var _id: String=Default.NO_UID{
        didSet {
            // tag ephemeral instance
            if Bartleby.ephemeral {
                self.ephemeral=true
            }
            // And register.
            Registry.register(self)
        }
    }

    /**
     The creation of a Unique Identifier is ressource intensive.
     We create the UID only if necessary.
     */
    open func defineUID() {
        if self._id == Default.NO_UID {
            self._id=Bartleby.createUID()
        }
    }

    final public var UID: String {
        get {
            self.defineUID()
            return  self._id
        }
    }
    
    //The supervisers container
    internal var _supervisers=[String:SupervisionClosure]()

    deinit{
        self._supervisers.removeAll()
    }
    // An optionnal Quick reference to the document
    open var document:BartlebyDocument?

    // On object insertion or Registry deserialization
    // We setup this collection reference
    // On newUser we setup directly user.document.
    open var collection:CollectibleCollection?{
        didSet{
            if let registry=collection?.document{
                self.document=registry
            }
        }
    }


    open var committed: Bool = false {
        willSet {
            if newValue==true{
                // The changes have been committed
                self._shouldBeCommitted=false
            }
        }
    }

    // MARK: UniversalType

    // Used to store the type name on serialization
    fileprivate lazy var _typeName: String = type(of: self).typeName()

    internal var _runTimeTypeName: String?

    // The runTypeName is used when deserializing the instance.
    open func runTimeTypeName() -> String {
        guard let _ = self._runTimeTypeName  else {
            self._runTimeTypeName = NSStringFromClass(type(of: self))
            return self._runTimeTypeName!
        }
        return self._runTimeTypeName!
    }
